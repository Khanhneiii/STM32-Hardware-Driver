
LightGPSNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800ecb8  0800ecb8  0001ecb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f354  0800f354  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f354  0800f354  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f354  0800f354  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f354  0800f354  0001f354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f358  0800f358  0001f358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800f35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003744  200000b0  0800f40c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037f4  0800f40c  000237f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f45  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000520c  00000000  00000000  00042061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  00047270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c5  00000000  00000000  00048ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007564  00000000  00000000  00049dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022ef6  00000000  00000000  00051311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097284  00000000  00000000  00074207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007060  00000000  00000000  0010b48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001124ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eca0 	.word	0x0800eca0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	0800eca0 	.word	0x0800eca0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065c:	f000 fec4 	bl	80013e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000660:	f000 f854 	bl	800070c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000664:	f000 f97e 	bl	8000964 <MX_GPIO_Init>
	MX_DMA_Init();
 8000668:	f000 f94e 	bl	8000908 <MX_DMA_Init>
	MX_CAN_Init();
 800066c:	f000 f894 	bl	8000798 <MX_CAN_Init>
	MX_I2C1_Init();
 8000670:	f000 f8c8 	bl	8000804 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8000674:	f000 f8f4 	bl	8000860 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000678:	f000 f91c 	bl	80008b4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800067c:	f006 f980 	bl	8006980 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of tDefault */
	tDefaultHandle = osThreadNew(StartDefaultTask, NULL, &tDefault_attributes);
 8000680:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <main+0x80>)
 8000682:	2100      	movs	r1, #0
 8000684:	4815      	ldr	r0, [pc, #84]	; (80006dc <main+0x84>)
 8000686:	f006 fa09 	bl	8006a9c <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <main+0x88>)
 800068e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	SyncPrintf_Init();
 8000690:	f00c f930 	bl	800c8f4 <SyncPrintf_Init>
	I2C_OS_Init(&mainI2C, &hi2c1);
 8000694:	4913      	ldr	r1, [pc, #76]	; (80006e4 <main+0x8c>)
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <main+0x90>)
 8000698:	f00c f820 	bl	800c6dc <I2C_OS_Init>
	CAN_OS_Init(&CANmain, &hcan);
 800069c:	4913      	ldr	r1, [pc, #76]	; (80006ec <main+0x94>)
 800069e:	4814      	ldr	r0, [pc, #80]	; (80006f0 <main+0x98>)
 80006a0:	f00b fe46 	bl	800c330 <CAN_OS_Init>

	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateTxCB_ID, CAN_TxCallback);
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <main+0x9c>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <main+0x98>)
 80006aa:	f00b ffa0 	bl	800c5ee <CAN_OS_RegisterCB>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateRxFifo0_ID, CAN_RxFifo0Callback);
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <main+0xa0>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <main+0x98>)
 80006b4:	f00b ff9b 	bl	800c5ee <CAN_OS_RegisterCB>

	UART_OS_Init(&gpsUART, &huart2);
 80006b8:	4910      	ldr	r1, [pc, #64]	; (80006fc <main+0xa4>)
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <main+0xa8>)
 80006bc:	f00c f96c 	bl	800c998 <UART_OS_Init>
	GPS_Init(&GPS, &gpsUART, 100);
 80006c0:	2264      	movs	r2, #100	; 0x64
 80006c2:	490f      	ldr	r1, [pc, #60]	; (8000700 <main+0xa8>)
 80006c4:	480f      	ldr	r0, [pc, #60]	; (8000704 <main+0xac>)
 80006c6:	f00a fe71 	bl	800b3ac <GPS_Init>

//	TestTaskHandle = osThreadNew(TestTask, NULL, &TestTask_attributes);

	SyncPrintf("####### LightGPS AWAKE ##### \r\n");
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <main+0xb0>)
 80006cc:	f00c f920 	bl	800c910 <SyncPrintf>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80006d0:	f006 f988 	bl	80069e4 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006d4:	e7fe      	b.n	80006d4 <main+0x7c>
 80006d6:	bf00      	nop
 80006d8:	0800f058 	.word	0x0800f058
 80006dc:	08000c29 	.word	0x08000c29
 80006e0:	200002e0 	.word	0x200002e0
 80006e4:	20000130 	.word	0x20000130
 80006e8:	200002f8 	.word	0x200002f8
 80006ec:	200000cc 	.word	0x200000cc
 80006f0:	20000314 	.word	0x20000314
 80006f4:	08000a9d 	.word	0x08000a9d
 80006f8:	08000ac1 	.word	0x08000ac1
 80006fc:	200001cc 	.word	0x200001cc
 8000700:	200002e4 	.word	0x200002e4
 8000704:	2000064c 	.word	0x2000064c
 8000708:	0800ecd0 	.word	0x0800ecd0

0800070c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00d f9c4 	bl	800daa8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000736:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800074a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f004 fc35 	bl	8004fc4 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x58>
		Error_Handler();
 8000760:	f000 facc 	bl	8000cfc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000774:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fea2 	bl	80054c8 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x82>
		Error_Handler();
 800078a:	f000 fab7 	bl	8000cfc <Error_Handler>
	}
}
 800078e:	bf00      	nop
 8000790:	3740      	adds	r7, #64	; 0x40
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_CAN_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_CAN_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_CAN_Init+0x64>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_CAN_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_CAN_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_CAN_Init+0x64>)
 80007b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007ba:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_CAN_Init+0x64>)
 80007be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007c2:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_CAN_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_CAN_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_CAN_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_CAN_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_CAN_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_CAN_Init+0x64>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_CAN_Init+0x64>)
 80007ea:	f000 fe5f 	bl	80014ac <HAL_CAN_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_CAN_Init+0x60>
		Error_Handler();
 80007f4:	f000 fa82 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000cc 	.word	0x200000cc
 8000800:	40006400 	.word	0x40006400

08000804 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f002 fbc9 	bl	8002fd8 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800084c:	f000 fa56 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000130 	.word	0x20000130
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_USART1_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x4c>)
 8000898:	f004 ffa4 	bl	80057e4 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80008a2:	f000 fa2b 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000184 	.word	0x20000184
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f004 ff7a 	bl	80057e4 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80008f6:	f000 fa01 	bl	8000cfc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200001cc 	.word	0x200001cc
 8000904:	40004400 	.word	0x40004400

08000908 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_DMA_Init+0x58>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_DMA_Init+0x58>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_DMA_Init+0x58>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2105      	movs	r1, #5
 800092a:	200e      	movs	r0, #14
 800092c:	f001 fead 	bl	800268a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000930:	200e      	movs	r0, #14
 8000932:	f001 fec6 	bl	80026c2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	200f      	movs	r0, #15
 800093c:	f001 fea5 	bl	800268a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000940:	200f      	movs	r0, #15
 8000942:	f001 febe 	bl	80026c2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2105      	movs	r1, #5
 800094a:	2010      	movs	r0, #16
 800094c:	f001 fe9d 	bl	800268a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000950:	2010      	movs	r0, #16
 8000952:	f001 feb6 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000978:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <MX_GPIO_Init+0xe4>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <MX_GPIO_Init+0xe4>)
 800097e:	f043 0320 	orr.w	r3, r3, #32
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <MX_GPIO_Init+0xe4>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0320 	and.w	r3, r3, #32
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_GPIO_Init+0xe4>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a2c      	ldr	r2, [pc, #176]	; (8000a48 <MX_GPIO_Init+0xe4>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_GPIO_Init+0xe4>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_GPIO_Init+0xe4>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <MX_GPIO_Init+0xe4>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_GPIO_Init+0xe4>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80009c0:	2200      	movs	r2, #0
 80009c2:	2173      	movs	r1, #115	; 0x73
 80009c4:	4821      	ldr	r0, [pc, #132]	; (8000a4c <MX_GPIO_Init+0xe8>)
 80009c6:	f002 fad5 	bl	8002f74 <HAL_GPIO_WritePin>
	LED_BEHIND_Pin | LED_FRONT_Pin | SPEAKER_Pin | LED_RIGHT_Pin | LED_LEFT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin | LED_G_Pin | LED_R_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f640 4102 	movw	r1, #3074	; 0xc02
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xec>)
 80009d2:	f002 facf 	bl	8002f74 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_BEHIND_Pin LED_FRONT_Pin SPEAKER_Pin LED_RIGHT_Pin
	 LED_LEFT_Pin */
	GPIO_InitStruct.Pin = LED_BEHIND_Pin | LED_FRONT_Pin | SPEAKER_Pin
 80009d6:	2373      	movs	r3, #115	; 0x73
 80009d8:	613b      	str	r3, [r7, #16]
			| LED_RIGHT_Pin | LED_LEFT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4619      	mov	r1, r3
 80009ec:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_GPIO_Init+0xe8>)
 80009ee:	f002 f93d 	bl	8002c6c <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_2_Pin */
	GPIO_InitStruct.Pin = BTN_2_Pin;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	4619      	mov	r1, r3
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_GPIO_Init+0xe8>)
 8000a06:	f002 f931 	bl	8002c6c <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0xec>)
 8000a1e:	f002 f925 	bl	8002c6c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | LED_G_Pin | LED_R_Pin;
 8000a22:	f640 4302 	movw	r3, #3074	; 0xc02
 8000a26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_GPIO_Init+0xec>)
 8000a3c:	f002 f916 	bl	8002c6c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010800 	.word	0x40010800
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MemRxCpltCallback+0x20>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d102      	bne.n	8000a6c <HAL_I2C_MemRxCpltCallback+0x18>
		I2C_OS_MEM_RxCpltCB(&mainI2C);
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <HAL_I2C_MemRxCpltCallback+0x20>)
 8000a68:	f00b ff27 	bl	800c8ba <I2C_OS_MEM_RxCpltCB>
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200002f8 	.word	0x200002f8

08000a78 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d102      	bne.n	8000a90 <HAL_I2C_MemTxCpltCallback+0x18>
		I2C_OS_MEM_TxCpltCB(&mainI2C);
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000a8c:	f00b ff23 	bl	800c8d6 <I2C_OS_MEM_TxCpltCB>
	}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200002f8 	.word	0x200002f8

08000a9c <CAN_TxCallback>:
void CAN_TxCallback(CAN_HandleTypeDef *hcan) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <CAN_TxCallback+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d102      	bne.n	8000ab4 <CAN_TxCallback+0x18>
		CAN_OS_TxCplt_CB(&CANmain);
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <CAN_TxCallback+0x20>)
 8000ab0:	f00b fd90 	bl	800c5d4 <CAN_OS_TxCplt_CB>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000314 	.word	0x20000314

08000ac0 <CAN_RxFifo0Callback>:
void CAN_RxFifo0Callback(CAN_HandleTypeDef *hcan) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <CAN_RxFifo0Callback+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d102      	bne.n	8000ad8 <CAN_RxFifo0Callback+0x18>
		CAN_OS_RxFifo0Cplt_CB(&CANmain);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <CAN_RxFifo0Callback+0x20>)
 8000ad4:	f00b fd66 	bl	800c5a4 <CAN_OS_RxFifo0Cplt_CB>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000314 	.word	0x20000314

08000ae4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if (gpsUART.huart == huart) {
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_UART_RxCpltCallback+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d102      	bne.n	8000afc <HAL_UART_RxCpltCallback+0x18>
		UART_OS_RxCplt_CB(&gpsUART);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <HAL_UART_RxCpltCallback+0x20>)
 8000af8:	f00b fff2 	bl	800cae0 <UART_OS_RxCplt_CB>
	}
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200002e4 	.word	0x200002e4

08000b08 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (gpsUART.huart == huart) {
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_UART_TxCpltCallback+0x20>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d102      	bne.n	8000b20 <HAL_UART_TxCpltCallback+0x18>
		UART_OS_TxCplt_CB(&gpsUART);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <HAL_UART_TxCpltCallback+0x20>)
 8000b1c:	f00b ffee 	bl	800cafc <UART_OS_TxCplt_CB>
	}
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002e4 	.word	0x200002e4

08000b2c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
	if (gpsUART.huart == huart) {
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_UARTEx_RxEventCallback+0x28>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d104      	bne.n	8000b4c <HAL_UARTEx_RxEventCallback+0x20>
		UART_OS_RcvToIdle_CB(&gpsUART, Size);
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <HAL_UARTEx_RxEventCallback+0x28>)
 8000b48:	f00b ffb7 	bl	800caba <UART_OS_RcvToIdle_CB>
	}

}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200002e4 	.word	0x200002e4

08000b58 <CANFrame_RcvDoneHandler>:

void CANFrame_RcvDoneHandler(CANFrame_RxHeaderTypedef *CANFrame_RxHeader,
		uint8_t *str) {
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b099      	sub	sp, #100	; 0x64
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	uint8_t strLen = CANFrame_RxHeader->DataLen;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t ID;
	char Data[50];
	int LeftState, RightState, FrontState, StopState;
	int SpeakerState;
	int res = 4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
	if (str[0] != '#' || str[strLen - 1] != '\n') {
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b23      	cmp	r3, #35	; 0x23
 8000b74:	d14b      	bne.n	8000c0e <CANFrame_RcvDoneHandler+0xb6>
 8000b76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b0a      	cmp	r3, #10
 8000b84:	d143      	bne.n	8000c0e <CANFrame_RcvDoneHandler+0xb6>
		return;
	}

	if (DataPack_Split((char*) str, &ID, Data) != 0) {
 8000b86:	f107 021c 	add.w	r2, r7, #28
 8000b8a:	f107 034f 	add.w	r3, r7, #79	; 0x4f
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6838      	ldr	r0, [r7, #0]
 8000b92:	f00c fce3 	bl	800d55c <DataPack_Split>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d13a      	bne.n	8000c12 <CANFrame_RcvDoneHandler+0xba>
		return;
	}

	switch (ID) {
 8000b9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d002      	beq.n	8000baa <CANFrame_RcvDoneHandler+0x52>
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d020      	beq.n	8000bea <CANFrame_RcvDoneHandler+0x92>
		if (res != 0)
			return;
		LEDSpeaker_setSpeaker(&LEDSpeaker, SpeakerState);
		break;
	default:
		break;
 8000ba8:	e038      	b.n	8000c1c <CANFrame_RcvDoneHandler+0xc4>
		res = DataPack_GetLEDState(Data, &LeftState, &RightState, &FrontState,
 8000baa:	f107 0410 	add.w	r4, r7, #16
 8000bae:	f107 0214 	add.w	r2, r7, #20
 8000bb2:	f107 0118 	add.w	r1, r7, #24
 8000bb6:	f107 001c 	add.w	r0, r7, #28
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	4623      	mov	r3, r4
 8000bc2:	f00c fd07 	bl	800d5d4 <DataPack_GetLEDState>
 8000bc6:	6538      	str	r0, [r7, #80]	; 0x50
		if (res != 0)
 8000bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d123      	bne.n	8000c16 <CANFrame_RcvDoneHandler+0xbe>
		LEDSpeaker_SetLED(&LEDSpeaker, LeftState, RightState, FrontState,
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	b2d9      	uxtb	r1, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	4603      	mov	r3, r0
 8000be2:	4810      	ldr	r0, [pc, #64]	; (8000c24 <CANFrame_RcvDoneHandler+0xcc>)
 8000be4:	f00b fa02 	bl	800bfec <LEDSpeaker_SetLED>
		break;
 8000be8:	e018      	b.n	8000c1c <CANFrame_RcvDoneHandler+0xc4>
		DataPack_GetSpeakerState(Data, &SpeakerState);
 8000bea:	f107 0208 	add.w	r2, r7, #8
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f00c fd3b 	bl	800d670 <DataPack_GetSpeakerState>
		if (res != 0)
 8000bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10c      	bne.n	8000c1a <CANFrame_RcvDoneHandler+0xc2>
		LEDSpeaker_setSpeaker(&LEDSpeaker, SpeakerState);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <CANFrame_RcvDoneHandler+0xcc>)
 8000c08:	f00b fa3a 	bl	800c080 <LEDSpeaker_setSpeaker>
		break;
 8000c0c:	e006      	b.n	8000c1c <CANFrame_RcvDoneHandler+0xc4>
		return;
 8000c0e:	bf00      	nop
 8000c10:	e004      	b.n	8000c1c <CANFrame_RcvDoneHandler+0xc4>
		return;
 8000c12:	bf00      	nop
 8000c14:	e002      	b.n	8000c1c <CANFrame_RcvDoneHandler+0xc4>
			return;
 8000c16:	bf00      	nop
 8000c18:	e000      	b.n	8000c1c <CANFrame_RcvDoneHandler+0xc4>
			return;
 8000c1a:	bf00      	nop
	}
}
 8000c1c:	375c      	adds	r7, #92	; 0x5c
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000030 	.word	0x20000030

08000c28 <StartDefaultTask>:
 * @brief  Function implementing the tDefault thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8
 8000c2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	INA219_Init(&INA219_main, &mainI2C, INA219_ADDRESS_Default);
 8000c30:	2240      	movs	r2, #64	; 0x40
 8000c32:	4926      	ldr	r1, [pc, #152]	; (8000ccc <StartDefaultTask+0xa4>)
 8000c34:	4826      	ldr	r0, [pc, #152]	; (8000cd0 <StartDefaultTask+0xa8>)
 8000c36:	f00b f9a9 	bl	800bf8c <INA219_Init>
	INA219_setCalibration_32V_2A(&INA219_main);
 8000c3a:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <StartDefaultTask+0xa8>)
 8000c3c:	f00b f982 	bl	800bf44 <INA219_setCalibration_32V_2A>
	isotp_init_link(&g_link, CANFRAME_MASTER_ID, g_isotpSendBuf, ISOTP_BUFSIZE,
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <StartDefaultTask+0xac>)
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <StartDefaultTask+0xb0>)
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	4823      	ldr	r0, [pc, #140]	; (8000cdc <StartDefaultTask+0xb4>)
 8000c50:	f00c fbdc 	bl	800d40c <isotp_init_link>
			g_isotpRecvBuf,
			ISOTP_BUFSIZE);
	g_link.receive_arbitration_id = CANFRAME_LIGHT_GPS_ID;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <StartDefaultTask+0xb4>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24

	CANFrame_Init(&CANFrame_Handler, &CANmain, CANFRAME_MASTER_ID,
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4920      	ldr	r1, [pc, #128]	; (8000ce0 <StartDefaultTask+0xb8>)
 8000c60:	4820      	ldr	r0, [pc, #128]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000c62:	f00b fa85 	bl	800c170 <CANFrame_Init>
	CAN_RX_FIFO0);
	PowerPublisher_Init(&PowerPub, &INA219_main, &CANFrame_Handler, 20);
 8000c66:	2314      	movs	r3, #20
 8000c68:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000c6a:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <StartDefaultTask+0xa8>)
 8000c6c:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <StartDefaultTask+0xc0>)
 8000c6e:	f00a fb21 	bl	800b2b4 <PowerPublisher_Init>
	CANFrame_RegCB(&CANFrame_Handler, CANFRAME_RCVCPLT_CB_ID,
 8000c72:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <StartDefaultTask+0xc4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	481b      	ldr	r0, [pc, #108]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000c78:	f00b fb0c 	bl	800c294 <CANFrame_RegCB>
			CANFrame_RcvDoneHandler);
	CAN_OS_Start(&CANmain);
 8000c7c:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <StartDefaultTask+0xb8>)
 8000c7e:	f00b fb95 	bl	800c3ac <CAN_OS_Start>

//	GPSPublisher_Init(&GPSPub, &GPS, &CANFrame_Handler, 10);
//	GPSPublisher_Start(&GPSPub, 1);
	PowerPublisher_Start(&PowerPub, 1);
 8000c82:	2101      	movs	r1, #1
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <StartDefaultTask+0xc0>)
 8000c86:	f00a fb3b 	bl	800b300 <PowerPublisher_Start>
	osThreadSetPriority(tDefaultHandle, osPriorityBelowNormal);
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <StartDefaultTask+0xc8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 ffad 	bl	8006bf0 <osThreadSetPriority>
	/* Infinite loop */
	for (;;) {
		GPIO_TogglePin(Blinker);
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <StartDefaultTask+0xcc>)
 8000c98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c9c:	f00b fcfb 	bl	800c696 <GPIO_TogglePin>
		SyncPrintf(
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000ca2:	f8d3 1318 	ldr.w	r1, [r3, #792]	; 0x318
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000ca8:	f8d3 231c 	ldr.w	r2, [r3, #796]	; 0x31c
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000cae:	f8d3 0320 	ldr.w	r0, [r3, #800]	; 0x320
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <StartDefaultTask+0xbc>)
 8000cb4:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	480e      	ldr	r0, [pc, #56]	; (8000cf8 <StartDefaultTask+0xd0>)
 8000cbe:	f00b fe27 	bl	800c910 <SyncPrintf>
				"Send Success %ld Send Fail %ld Rcv Success %ld Rcv Failed %ld\n",
				CANFrame_Handler.SendSuccessCounter,
				CANFrame_Handler.SendFailedCounter,
				CANFrame_Handler.RcvSucessCounter,
				CANFrame_Handler.RcvFailedCounter);
		osDelay(500);
 8000cc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc6:	f006 f837 	bl	8006d38 <osDelay>
		GPIO_TogglePin(Blinker);
 8000cca:	e7e4      	b.n	8000c96 <StartDefaultTask+0x6e>
 8000ccc:	200002f8 	.word	0x200002f8
 8000cd0:	20000304 	.word	0x20000304
 8000cd4:	200006c8 	.word	0x200006c8
 8000cd8:	2000072c 	.word	0x2000072c
 8000cdc:	20000688 	.word	0x20000688
 8000ce0:	20000314 	.word	0x20000314
 8000ce4:	20000324 	.word	0x20000324
 8000ce8:	20000668 	.word	0x20000668
 8000cec:	08000b59 	.word	0x08000b59
 8000cf0:	200002e0 	.word	0x200002e0
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	0800ecf0 	.word	0x0800ecf0

08000cfc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_MspInit+0x68>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_MspInit+0x68>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6193      	str	r3, [r2, #24]
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_MspInit+0x68>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_MspInit+0x68>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_MspInit+0x68>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_MspInit+0x68>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210f      	movs	r1, #15
 8000d42:	f06f 0001 	mvn.w	r0, #1
 8000d46:	f001 fca0 	bl	800268a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_MspInit+0x6c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_MspInit+0x6c>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000

08000d78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <HAL_CAN_MspInit+0xcc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d151      	bne.n	8000e3c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_CAN_MspInit+0xd0>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <HAL_CAN_MspInit+0xd0>)
 8000d9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_CAN_MspInit+0xd0>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <HAL_CAN_MspInit+0xd0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <HAL_CAN_MspInit+0xd0>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <HAL_CAN_MspInit+0xd0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481b      	ldr	r0, [pc, #108]	; (8000e4c <HAL_CAN_MspInit+0xd4>)
 8000dde:	f001 ff45 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <HAL_CAN_MspInit+0xd4>)
 8000df8:	f001 ff38 	bl	8002c6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2105      	movs	r1, #5
 8000e00:	2013      	movs	r0, #19
 8000e02:	f001 fc42 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000e06:	2013      	movs	r0, #19
 8000e08:	f001 fc5b 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2105      	movs	r1, #5
 8000e10:	2014      	movs	r0, #20
 8000e12:	f001 fc3a 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e16:	2014      	movs	r0, #20
 8000e18:	f001 fc53 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2105      	movs	r1, #5
 8000e20:	2015      	movs	r0, #21
 8000e22:	f001 fc32 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e26:	2015      	movs	r0, #21
 8000e28:	f001 fc4b 	bl	80026c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2105      	movs	r1, #5
 8000e30:	2016      	movs	r0, #22
 8000e32:	f001 fc2a 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e36:	2016      	movs	r0, #22
 8000e38:	f001 fc43 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40006400 	.word	0x40006400
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010800 	.word	0x40010800

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_I2C_MspInit+0x80>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d12b      	bne.n	8000ec8 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_I2C_MspInit+0x84>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_I2C_MspInit+0x84>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_I2C_MspInit+0x84>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_I2C_MspInit+0x88>)
 8000e9c:	f001 fee6 	bl	8002c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x84>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_I2C_MspInit+0x84>)
 8000ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eaa:	61d3      	str	r3, [r2, #28]
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_I2C_MspInit+0x84>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2105      	movs	r1, #5
 8000ebc:	201f      	movs	r0, #31
 8000ebe:	f001 fbe4 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ec2:	201f      	movs	r0, #31
 8000ec4:	f001 fbfd 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a79      	ldr	r2, [pc, #484]	; (80010dc <HAL_UART_MspInit+0x200>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f040 8087 	bne.w	800100c <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efe:	4b78      	ldr	r3, [pc, #480]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a77      	ldr	r2, [pc, #476]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b72      	ldr	r3, [pc, #456]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a71      	ldr	r2, [pc, #452]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4868      	ldr	r0, [pc, #416]	; (80010e4 <HAL_UART_MspInit+0x208>)
 8000f44:	f001 fe92 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4861      	ldr	r0, [pc, #388]	; (80010e4 <HAL_UART_MspInit+0x208>)
 8000f5e:	f001 fe85 	bl	8002c6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f64:	4a61      	ldr	r2, [pc, #388]	; (80010ec <HAL_UART_MspInit+0x210>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6e:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f74:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f80:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f86:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8c:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f92:	4855      	ldr	r0, [pc, #340]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000f94:	f001 fbb0 	bl	80026f8 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000f9e:	f7ff fead 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a50      	ldr	r2, [pc, #320]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_UART_MspInit+0x20c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000fae:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fb0:	4a50      	ldr	r2, [pc, #320]	; (80010f4 <HAL_UART_MspInit+0x218>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb4:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fcc:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fde:	4844      	ldr	r0, [pc, #272]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000fe0:	f001 fb8a 	bl	80026f8 <HAL_DMA_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000fea:	f7ff fe87 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a3f      	ldr	r2, [pc, #252]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff4:	4a3e      	ldr	r2, [pc, #248]	; (80010f0 <HAL_UART_MspInit+0x214>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	2025      	movs	r0, #37	; 0x25
 8001000:	f001 fb43 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001004:	2025      	movs	r0, #37	; 0x25
 8001006:	f001 fb5c 	bl	80026c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	e063      	b.n	80010d4 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_UART_MspInit+0x21c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d15e      	bne.n	80010d4 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001016:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <HAL_UART_MspInit+0x204>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a2b      	ldr	r2, [pc, #172]	; (80010e0 <HAL_UART_MspInit+0x204>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <HAL_UART_MspInit+0x204>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001046:	2304      	movs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4619      	mov	r1, r3
 8001058:	4822      	ldr	r0, [pc, #136]	; (80010e4 <HAL_UART_MspInit+0x208>)
 800105a:	f001 fe07 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800105e:	2308      	movs	r3, #8
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4619      	mov	r1, r3
 8001070:	481c      	ldr	r0, [pc, #112]	; (80010e4 <HAL_UART_MspInit+0x208>)
 8001072:	f001 fdfb 	bl	8002c6c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_UART_MspInit+0x220>)
 8001078:	4a21      	ldr	r2, [pc, #132]	; (8001100 <HAL_UART_MspInit+0x224>)
 800107a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107c:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HAL_UART_MspInit+0x220>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <HAL_UART_MspInit+0x220>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_UART_MspInit+0x220>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_UART_MspInit+0x220>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_MspInit+0x220>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_UART_MspInit+0x220>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_UART_MspInit+0x220>)
 80010a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x220>)
 80010aa:	f001 fb25 	bl	80026f8 <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80010b4:	f7ff fe22 	bl	8000cfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_UART_MspInit+0x220>)
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_UART_MspInit+0x220>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2105      	movs	r1, #5
 80010c8:	2026      	movs	r0, #38	; 0x26
 80010ca:	f001 fade 	bl	800268a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ce:	2026      	movs	r0, #38	; 0x26
 80010d0:	f001 faf7 	bl	80026c2 <HAL_NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	20000214 	.word	0x20000214
 80010ec:	40020058 	.word	0x40020058
 80010f0:	20000258 	.word	0x20000258
 80010f4:	40020044 	.word	0x40020044
 80010f8:	40004400 	.word	0x40004400
 80010fc:	2000029c 	.word	0x2000029c
 8001100:	4002006c 	.word	0x4002006c

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f99f 	bl	8001474 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001136:	f008 ff5f 	bl	8009ff8 <xTaskGetSchedulerState>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d001      	beq.n	8001144 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001140:	f009 fdfa 	bl	800ad38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <DMA1_Channel4_IRQHandler+0x10>)
 800114e:	f001 fc41 	bl	80029d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000258 	.word	0x20000258

0800115c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <DMA1_Channel5_IRQHandler+0x10>)
 8001162:	f001 fc37 	bl	80029d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000214 	.word	0x20000214

08001170 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA1_Channel6_IRQHandler+0x10>)
 8001176:	f001 fc2d 	bl	80029d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000029c 	.word	0x2000029c

08001184 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800118a:	f000 ff6c 	bl	8002066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000cc 	.word	0x200000cc

08001198 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800119e:	f000 ff62 	bl	8002066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000cc 	.word	0x200000cc

080011ac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <CAN1_RX1_IRQHandler+0x10>)
 80011b2:	f000 ff58 	bl	8002066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000cc 	.word	0x200000cc

080011c0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <CAN1_SCE_IRQHandler+0x10>)
 80011c6:	f000 ff4e 	bl	8002066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000cc 	.word	0x200000cc

080011d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <I2C1_EV_IRQHandler+0x10>)
 80011da:	f002 fae7 	bl	80037ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000130 	.word	0x20000130

080011e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USART1_IRQHandler+0x10>)
 80011ee:	f004 fccd 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000184 	.word	0x20000184

080011fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <USART2_IRQHandler+0x10>)
 8001202:	f004 fcc3 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001cc 	.word	0x200001cc

08001210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <_kill>:

int _kill(int pid, int sig)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001228:	f00c fd50 	bl	800dccc <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	2216      	movs	r2, #22
 8001230:	601a      	str	r2, [r3, #0]
  return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_exit>:

void _exit (int status)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001246:	f04f 31ff 	mov.w	r1, #4294967295
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffe7 	bl	800121e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001250:	e7fe      	b.n	8001250 <_exit+0x12>

08001252 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e00a      	b.n	800127a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001264:	f3af 8000 	nop.w
 8001268:	4601      	mov	r1, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60ba      	str	r2, [r7, #8]
 8001270:	b2ca      	uxtb	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbf0      	blt.n	8001264 <_read+0x12>
  }

  return len;
 8001282:	687b      	ldr	r3, [r7, #4]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e009      	b.n	80012b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	60ba      	str	r2, [r7, #8]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	3301      	adds	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbf1      	blt.n	800129e <_write+0x12>
  }
  return len;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_close>:

int _close(int file)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_isatty>:

int _isatty(int file)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f00c fcba 	bl	800dccc <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20005000 	.word	0x20005000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000790 	.word	0x20000790
 800138c:	200037f8 	.word	0x200037f8

08001390 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800139c:	f7ff fff8 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013a2:	490c      	ldr	r1, [pc, #48]	; (80013d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b8:	4c09      	ldr	r4, [pc, #36]	; (80013e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f00c fc87 	bl	800dcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ca:	f7ff f945 	bl	8000658 <main>
  bx lr
 80013ce:	4770      	bx	lr
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80013d8:	0800f35c 	.word	0x0800f35c
  ldr r2, =_sbss
 80013dc:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80013e0:	200037f4 	.word	0x200037f4

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_Init+0x28>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	; (8001410 <HAL_Init+0x28>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f001 f93b 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fc80 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f001 f953 	bl	80026de <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f001 f91b 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000044 	.word	0x20000044
 800146c:	2000004c 	.word	0x2000004c
 8001470:	20000048 	.word	0x20000048

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x1c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x20>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a03      	ldr	r2, [pc, #12]	; (8001494 <HAL_IncTick+0x20>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	2000004c 	.word	0x2000004c
 8001494:	20000794 	.word	0x20000794

08001498 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <HAL_GetTick+0x10>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000794 	.word	0x20000794

080014ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e11c      	b.n	80016f8 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d131      	bne.n	800152e <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a8c      	ldr	r2, [pc, #560]	; (8001700 <HAL_CAN_Init+0x254>)
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a8c      	ldr	r2, [pc, #560]	; (8001704 <HAL_CAN_Init+0x258>)
 80014d4:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a8b      	ldr	r2, [pc, #556]	; (8001708 <HAL_CAN_Init+0x25c>)
 80014da:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a8b      	ldr	r2, [pc, #556]	; (800170c <HAL_CAN_Init+0x260>)
 80014e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a8a      	ldr	r2, [pc, #552]	; (8001710 <HAL_CAN_Init+0x264>)
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a8a      	ldr	r2, [pc, #552]	; (8001714 <HAL_CAN_Init+0x268>)
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a89      	ldr	r2, [pc, #548]	; (8001718 <HAL_CAN_Init+0x26c>)
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a89      	ldr	r2, [pc, #548]	; (800171c <HAL_CAN_Init+0x270>)
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a88      	ldr	r2, [pc, #544]	; (8001720 <HAL_CAN_Init+0x274>)
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a88      	ldr	r2, [pc, #544]	; (8001724 <HAL_CAN_Init+0x278>)
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a87      	ldr	r2, [pc, #540]	; (8001728 <HAL_CAN_Init+0x27c>)
 800150a:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a87      	ldr	r2, [pc, #540]	; (800172c <HAL_CAN_Init+0x280>)
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a86      	ldr	r2, [pc, #536]	; (8001730 <HAL_CAN_Init+0x284>)
 8001516:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a84      	ldr	r2, [pc, #528]	; (8001734 <HAL_CAN_Init+0x288>)
 8001524:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153e:	f7ff ffab 	bl	8001498 <HAL_GetTick>
 8001542:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001544:	e012      	b.n	800156c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001546:	f7ff ffa7 	bl	8001498 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b0a      	cmp	r3, #10
 8001552:	d90b      	bls.n	800156c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2205      	movs	r2, #5
 8001564:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0c5      	b.n	80016f8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0e5      	beq.n	8001546 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0202 	bic.w	r2, r2, #2
 8001588:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800158a:	f7ff ff85 	bl	8001498 <HAL_GetTick>
 800158e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001590:	e012      	b.n	80015b8 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001592:	f7ff ff81 	bl	8001498 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b0a      	cmp	r3, #10
 800159e:	d90b      	bls.n	80015b8 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2205      	movs	r2, #5
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e09f      	b.n	80016f8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1e5      	bne.n	8001592 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7e1b      	ldrb	r3, [r3, #24]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e007      	b.n	80015f0 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e5b      	ldrb	r3, [r3, #25]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d108      	bne.n	800160a <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e007      	b.n	800161a <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7e9b      	ldrb	r3, [r3, #26]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d108      	bne.n	8001634 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0220 	orr.w	r2, r2, #32
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	e007      	b.n	8001644 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0220 	bic.w	r2, r2, #32
 8001642:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7edb      	ldrb	r3, [r3, #27]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d108      	bne.n	800165e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0210 	bic.w	r2, r2, #16
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	e007      	b.n	800166e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0210 	orr.w	r2, r2, #16
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7f1b      	ldrb	r3, [r3, #28]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0208 	orr.w	r2, r2, #8
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e007      	b.n	8001698 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0208 	bic.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7f5b      	ldrb	r3, [r3, #29]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d108      	bne.n	80016b2 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0204 	orr.w	r2, r2, #4
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0204 	bic.w	r2, r2, #4
 80016c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	ea42 0103 	orr.w	r1, r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	0800245d 	.word	0x0800245d
 8001704:	0800246f 	.word	0x0800246f
 8001708:	08002481 	.word	0x08002481
 800170c:	08002493 	.word	0x08002493
 8001710:	080023f1 	.word	0x080023f1
 8001714:	08002403 	.word	0x08002403
 8001718:	08002415 	.word	0x08002415
 800171c:	08002427 	.word	0x08002427
 8001720:	08002439 	.word	0x08002439
 8001724:	0800244b 	.word	0x0800244b
 8001728:	080024a5 	.word	0x080024a5
 800172c:	080024b7 	.word	0x080024b7
 8001730:	080024c9 	.word	0x080024c9
 8001734:	08000d79 	.word	0x08000d79

08001738 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	460b      	mov	r3, r1
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e094      	b.n	800188a <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d168      	bne.n	800183e <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	2b0e      	cmp	r3, #14
 8001770:	d85c      	bhi.n	800182c <HAL_CAN_RegisterCallback+0xf4>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_CAN_RegisterCallback+0x40>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017b5 	.word	0x080017b5
 800177c:	080017bd 	.word	0x080017bd
 8001780:	080017c5 	.word	0x080017c5
 8001784:	080017cd 	.word	0x080017cd
 8001788:	080017d5 	.word	0x080017d5
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017e5 	.word	0x080017e5
 8001794:	080017ed 	.word	0x080017ed
 8001798:	080017f5 	.word	0x080017f5
 800179c:	080017fd 	.word	0x080017fd
 80017a0:	08001805 	.word	0x08001805
 80017a4:	0800180d 	.word	0x0800180d
 80017a8:	08001815 	.word	0x08001815
 80017ac:	0800181d 	.word	0x0800181d
 80017b0:	08001825 	.word	0x08001825
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80017ba:	e065      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80017c2:	e061      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80017ca:	e05d      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80017d2:	e059      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80017da:	e055      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 80017e2:	e051      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80017ea:	e04d      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80017f2:	e049      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80017fa:	e045      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8001802:	e041      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800180a:	e03d      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8001812:	e039      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800181a:	e035      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8001822:	e031      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800182a:	e02d      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	75fb      	strb	r3, [r7, #23]
        break;
 800183c:	e024      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 800184a:	7afb      	ldrb	r3, [r7, #11]
 800184c:	2b0d      	cmp	r3, #13
 800184e:	d002      	beq.n	8001856 <HAL_CAN_RegisterCallback+0x11e>
 8001850:	2b0e      	cmp	r3, #14
 8001852:	d004      	beq.n	800185e <HAL_CAN_RegisterCallback+0x126>
 8001854:	e007      	b.n	8001866 <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800185c:	e014      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8001864:	e010      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
        break;
 8001876:	e007      	b.n	8001888 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001888:	7dfb      	ldrb	r3, [r7, #23]
}
 800188a:	4618      	mov	r0, r3
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d003      	beq.n	80018ba <HAL_CAN_ConfigFilter+0x26>
 80018b2:	7cfb      	ldrb	r3, [r7, #19]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	f040 80aa 	bne.w	8001a0e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2201      	movs	r2, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d123      	bne.n	800193c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001916:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3248      	adds	r2, #72	; 0x48
 800191c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001930:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001932:	6979      	ldr	r1, [r7, #20]
 8001934:	3348      	adds	r3, #72	; 0x48
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d122      	bne.n	800198a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001964:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3248      	adds	r2, #72	; 0x48
 800196a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800197e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001980:	6979      	ldr	r1, [r7, #20]
 8001982:	3348      	adds	r3, #72	; 0x48
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	401a      	ands	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019a4:	e007      	b.n	80019b6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	401a      	ands	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	431a      	orrs	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a00:	f023 0201 	bic.w	r2, r3, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e006      	b.n	8001a1c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
  }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d12e      	bne.n	8001a98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a52:	f7ff fd21 	bl	8001498 <HAL_GetTick>
 8001a56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a58:	e012      	b.n	8001a80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a5a:	f7ff fd1d 	bl	8001498 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b0a      	cmp	r3, #10
 8001a66:	d90b      	bls.n	8001a80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e012      	b.n	8001aa6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e5      	bne.n	8001a5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e006      	b.n	8001aa6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
  }
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d133      	bne.n	8001b2a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fce1 	bl	8001498 <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad8:	e012      	b.n	8001b00 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ada:	f7ff fcdd 	bl	8001498 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b0a      	cmp	r3, #10
 8001ae6:	d90b      	bls.n	8001b00 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2205      	movs	r2, #5
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e01b      	b.n	8001b38 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0e5      	beq.n	8001ada <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0202 	bic.w	r2, r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e006      	b.n	8001b38 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d003      	beq.n	8001b6c <HAL_CAN_AddTxMessage+0x2c>
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80ad 	bne.w	8001cc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8095 	beq.w	8001cb6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	0e1b      	lsrs	r3, r3, #24
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bb2:	68f9      	ldr	r1, [r7, #12]
 8001bb4:	6809      	ldr	r1, [r1, #0]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3318      	adds	r3, #24
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	440b      	add	r3, r1
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e00f      	b.n	8001be4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bd8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3318      	adds	r3, #24
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	440b      	add	r3, r1
 8001be2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6819      	ldr	r1, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3318      	adds	r3, #24
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	7d1b      	ldrb	r3, [r3, #20]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d111      	bne.n	8001c24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3318      	adds	r3, #24
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	6811      	ldr	r1, [r2, #0]
 8001c14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3318      	adds	r3, #24
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	440b      	add	r3, r1
 8001c20:	3304      	adds	r3, #4
 8001c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3307      	adds	r3, #7
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	061a      	lsls	r2, r3, #24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3306      	adds	r3, #6
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3305      	adds	r3, #5
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	3204      	adds	r2, #4
 8001c44:	7812      	ldrb	r2, [r2, #0]
 8001c46:	4610      	mov	r0, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6811      	ldr	r1, [r2, #0]
 8001c4c:	ea43 0200 	orr.w	r2, r3, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3303      	adds	r3, #3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	061a      	lsls	r2, r3, #24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3302      	adds	r3, #2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3301      	adds	r3, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	4313      	orrs	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	7812      	ldrb	r2, [r2, #0]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6811      	ldr	r1, [r2, #0]
 8001c82:	ea43 0200 	orr.w	r2, r3, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3318      	adds	r3, #24
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	6811      	ldr	r1, [r2, #0]
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3318      	adds	r3, #24
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	440b      	add	r3, r1
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e00e      	b.n	8001cd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e006      	b.n	8001cd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3724      	adds	r7, #36	; 0x24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d002      	beq.n	8001cfe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d11d      	bne.n	8001d3a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d002      	beq.n	8001d68 <HAL_CAN_IsTxMessagePending+0x22>
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d10b      	bne.n	8001d80 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	069b      	lsls	r3, r3, #26
 8001d72:	401a      	ands	r2, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d003      	beq.n	8001db0 <HAL_CAN_GetRxMessage+0x24>
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	f040 8103 	bne.w	8001fb6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d116      	bne.n	8001df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0f7      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d107      	bne.n	8001df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0e8      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	331b      	adds	r3, #27
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	4413      	add	r3, r2
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0204 	and.w	r2, r3, #4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	331b      	adds	r3, #27
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0d5b      	lsrs	r3, r3, #21
 8001e20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e00b      	b.n	8001e42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	331b      	adds	r3, #27
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	331b      	adds	r3, #27
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0202 	and.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	331b      	adds	r3, #27
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2208      	movs	r2, #8
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	e00b      	b.n	8001e90 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	331b      	adds	r3, #27
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	331b      	adds	r3, #27
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	331b      	adds	r3, #27
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0a1a      	lsrs	r2, r3, #8
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0c1a      	lsrs	r2, r3, #16
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	3302      	adds	r3, #2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	0e1a      	lsrs	r2, r3, #24
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	3304      	adds	r3, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0a1a      	lsrs	r2, r3, #8
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3305      	adds	r3, #5
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0c1a      	lsrs	r2, r3, #16
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	3306      	adds	r3, #6
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e1a      	lsrs	r2, r3, #24
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3307      	adds	r3, #7
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d108      	bne.n	8001fa2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	e007      	b.n	8001fb2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0220 	orr.w	r2, r2, #32
 8001fb0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e006      	b.n	8001fc4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d002      	beq.n	8001ff0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d10f      	bne.n	8002010 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e005      	b.n	8002010 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002010:	68fb      	ldr	r3, [r7, #12]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d002      	beq.n	800203a <HAL_CAN_ActivateNotification+0x1e>
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d109      	bne.n	800204e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6959      	ldr	r1, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e006      	b.n	800205c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b08a      	sub	sp, #40	; 0x28
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8083 	beq.w	80021b4 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d025      	beq.n	8002104 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
 80020d2:	e017      	b.n	8002104 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e00d      	b.n	8002104 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	e003      	b.n	8002104 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d026      	beq.n	800215c <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002116:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e017      	b.n	800215c <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	e00d      	b.n	800215c <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	e003      	b.n	800215c <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d026      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800216e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
 8002182:	e017      	b.n	80021b4 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e00d      	b.n	80021b4 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	e003      	b.n	80021b4 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2208      	movs	r2, #8
 80021f2:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00c      	beq.n	8002240 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2208      	movs	r2, #8
 800225a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2210      	movs	r2, #16
 800229e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2208      	movs	r2, #8
 80022c2:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07b      	beq.n	80023ce <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d072      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f043 0302 	orr.w	r3, r3, #2
 8002316:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233a:	2b00      	cmp	r3, #0
 800233c:	d043      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03e      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800234e:	2b60      	cmp	r3, #96	; 0x60
 8002350:	d02b      	beq.n	80023aa <HAL_CAN_IRQHandler+0x344>
 8002352:	2b60      	cmp	r3, #96	; 0x60
 8002354:	d82e      	bhi.n	80023b4 <HAL_CAN_IRQHandler+0x34e>
 8002356:	2b50      	cmp	r3, #80	; 0x50
 8002358:	d022      	beq.n	80023a0 <HAL_CAN_IRQHandler+0x33a>
 800235a:	2b50      	cmp	r3, #80	; 0x50
 800235c:	d82a      	bhi.n	80023b4 <HAL_CAN_IRQHandler+0x34e>
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	d019      	beq.n	8002396 <HAL_CAN_IRQHandler+0x330>
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d826      	bhi.n	80023b4 <HAL_CAN_IRQHandler+0x34e>
 8002366:	2b30      	cmp	r3, #48	; 0x30
 8002368:	d010      	beq.n	800238c <HAL_CAN_IRQHandler+0x326>
 800236a:	2b30      	cmp	r3, #48	; 0x30
 800236c:	d822      	bhi.n	80023b4 <HAL_CAN_IRQHandler+0x34e>
 800236e:	2b10      	cmp	r3, #16
 8002370:	d002      	beq.n	8002378 <HAL_CAN_IRQHandler+0x312>
 8002372:	2b20      	cmp	r3, #32
 8002374:	d005      	beq.n	8002382 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002376:	e01d      	b.n	80023b4 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	f043 0308 	orr.w	r3, r3, #8
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002380:	e019      	b.n	80023b6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f043 0310 	orr.w	r3, r3, #16
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800238a:	e014      	b.n	80023b6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002394:	e00f      	b.n	80023b6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800239e:	e00a      	b.n	80023b6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a8:	e005      	b.n	80023b6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b2:	e000      	b.n	80023b6 <HAL_CAN_IRQHandler+0x350>
            break;
 80023b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2204      	movs	r2, #4
 80023cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4906      	ldr	r1, [pc, #24]	; (8002574 <__NVIC_EnableIRQ+0x34>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f7ff ff90 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff2d 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff42 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff90 	bl	80025cc <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5f 	bl	8002578 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff35 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e043      	b.n	8002796 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <HAL_DMA_Init+0xa8>)
 8002716:	4413      	add	r3, r2
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <HAL_DMA_Init+0xac>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	009a      	lsls	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_DMA_Init+0xb0>)
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002742:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002746:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	bffdfff8 	.word	0xbffdfff8
 80027a4:	cccccccd 	.word	0xcccccccd
 80027a8:	40020000 	.word	0x40020000

080027ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Start_IT+0x20>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e04b      	b.n	8002864 <HAL_DMA_Start_IT+0xb8>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d13a      	bne.n	8002856 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fa03 	bl	8002c10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 020e 	orr.w	r2, r2, #14
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e00f      	b.n	8002844 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 020a 	orr.w	r2, r2, #10
 8002842:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e005      	b.n	8002862 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d008      	beq.n	8002896 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2204      	movs	r2, #4
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e020      	b.n	80028d8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 020e 	bic.w	r2, r2, #14
 80028a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0201 	bic.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	2101      	movs	r1, #1
 80028c0:	fa01 f202 	lsl.w	r2, r1, r2
 80028c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d005      	beq.n	8002908 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2204      	movs	r2, #4
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e051      	b.n	80029ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 020e 	bic.w	r2, r2, #14
 8002916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_DMA_Abort_IT+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d029      	beq.n	8002986 <HAL_DMA_Abort_IT+0xa2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <HAL_DMA_Abort_IT+0xd8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_DMA_Abort_IT+0x9e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_DMA_Abort_IT+0xdc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01a      	beq.n	800297c <HAL_DMA_Abort_IT+0x98>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <HAL_DMA_Abort_IT+0xe0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d012      	beq.n	8002976 <HAL_DMA_Abort_IT+0x92>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_DMA_Abort_IT+0xe4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00a      	beq.n	8002970 <HAL_DMA_Abort_IT+0x8c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <HAL_DMA_Abort_IT+0xe8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <HAL_DMA_Abort_IT+0x86>
 8002964:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002968:	e00e      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 800296a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296e:	e00b      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002974:	e008      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297a:	e005      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 800297c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002980:	e002      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002982:	2310      	movs	r3, #16
 8002984:	e000      	b.n	8002988 <HAL_DMA_Abort_IT+0xa4>
 8002986:	2301      	movs	r3, #1
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_DMA_Abort_IT+0xec>)
 800298a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
    } 
  }
  return status;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020008 	.word	0x40020008
 80029bc:	4002001c 	.word	0x4002001c
 80029c0:	40020030 	.word	0x40020030
 80029c4:	40020044 	.word	0x40020044
 80029c8:	40020058 	.word	0x40020058
 80029cc:	4002006c 	.word	0x4002006c
 80029d0:	40020000 	.word	0x40020000

080029d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2204      	movs	r2, #4
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d04f      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xc8>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a66      	ldr	r2, [pc, #408]	; (8002bc4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d029      	beq.n	8002a82 <HAL_DMA_IRQHandler+0xae>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_DMA_IRQHandler+0x1f4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xaa>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_DMA_IRQHandler+0x1f8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01a      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xa4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a62      	ldr	r2, [pc, #392]	; (8002bd0 <HAL_DMA_IRQHandler+0x1fc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d012      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x9e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a60      	ldr	r2, [pc, #384]	; (8002bd4 <HAL_DMA_IRQHandler+0x200>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x98>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5f      	ldr	r2, [pc, #380]	; (8002bd8 <HAL_DMA_IRQHandler+0x204>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d102      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x92>
 8002a60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a64:	e00e      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a6a:	e00b      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a70:	e008      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a76:	e005      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7c:	e002      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	e000      	b.n	8002a84 <HAL_DMA_IRQHandler+0xb0>
 8002a82:	2304      	movs	r3, #4
 8002a84:	4a55      	ldr	r2, [pc, #340]	; (8002bdc <HAL_DMA_IRQHandler+0x208>)
 8002a86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8094 	beq.w	8002bba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a9a:	e08e      	b.n	8002bba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d056      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x186>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d051      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020a 	bic.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d029      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x166>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_DMA_IRQHandler+0x1f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x162>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <HAL_DMA_IRQHandler+0x1f8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x15c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d012      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x156>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <HAL_DMA_IRQHandler+0x200>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00a      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x150>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a31      	ldr	r2, [pc, #196]	; (8002bd8 <HAL_DMA_IRQHandler+0x204>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x14a>
 8002b18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b1c:	e00e      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b22:	e00b      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b28:	e008      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b2e:	e005      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b34:	e002      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b36:	2320      	movs	r3, #32
 8002b38:	e000      	b.n	8002b3c <HAL_DMA_IRQHandler+0x168>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	4a27      	ldr	r2, [pc, #156]	; (8002bdc <HAL_DMA_IRQHandler+0x208>)
 8002b3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d034      	beq.n	8002bba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b58:	e02f      	b.n	8002bba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2208      	movs	r2, #8
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d028      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x1e8>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 020e 	bic.w	r2, r2, #14
 8002b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
    }
  }
  return;
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
}
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40020008 	.word	0x40020008
 8002bc8:	4002001c 	.word	0x4002001c
 8002bcc:	40020030 	.word	0x40020030
 8002bd0:	40020044 	.word	0x40020044
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	4002006c 	.word	0x4002006c
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bee:	b2db      	uxtb	r3, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d108      	bne.n	8002c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c4e:	e007      	b.n	8002c60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b08b      	sub	sp, #44	; 0x2c
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7e:	e169      	b.n	8002f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c80:	2201      	movs	r2, #1
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8158 	bne.w	8002f4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a9a      	ldr	r2, [pc, #616]	; (8002f0c <HAL_GPIO_Init+0x2a0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d05e      	beq.n	8002d66 <HAL_GPIO_Init+0xfa>
 8002ca8:	4a98      	ldr	r2, [pc, #608]	; (8002f0c <HAL_GPIO_Init+0x2a0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d875      	bhi.n	8002d9a <HAL_GPIO_Init+0x12e>
 8002cae:	4a98      	ldr	r2, [pc, #608]	; (8002f10 <HAL_GPIO_Init+0x2a4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d058      	beq.n	8002d66 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a96      	ldr	r2, [pc, #600]	; (8002f10 <HAL_GPIO_Init+0x2a4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d86f      	bhi.n	8002d9a <HAL_GPIO_Init+0x12e>
 8002cba:	4a96      	ldr	r2, [pc, #600]	; (8002f14 <HAL_GPIO_Init+0x2a8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d052      	beq.n	8002d66 <HAL_GPIO_Init+0xfa>
 8002cc0:	4a94      	ldr	r2, [pc, #592]	; (8002f14 <HAL_GPIO_Init+0x2a8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d869      	bhi.n	8002d9a <HAL_GPIO_Init+0x12e>
 8002cc6:	4a94      	ldr	r2, [pc, #592]	; (8002f18 <HAL_GPIO_Init+0x2ac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d04c      	beq.n	8002d66 <HAL_GPIO_Init+0xfa>
 8002ccc:	4a92      	ldr	r2, [pc, #584]	; (8002f18 <HAL_GPIO_Init+0x2ac>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d863      	bhi.n	8002d9a <HAL_GPIO_Init+0x12e>
 8002cd2:	4a92      	ldr	r2, [pc, #584]	; (8002f1c <HAL_GPIO_Init+0x2b0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d046      	beq.n	8002d66 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a90      	ldr	r2, [pc, #576]	; (8002f1c <HAL_GPIO_Init+0x2b0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d85d      	bhi.n	8002d9a <HAL_GPIO_Init+0x12e>
 8002cde:	2b12      	cmp	r3, #18
 8002ce0:	d82a      	bhi.n	8002d38 <HAL_GPIO_Init+0xcc>
 8002ce2:	2b12      	cmp	r3, #18
 8002ce4:	d859      	bhi.n	8002d9a <HAL_GPIO_Init+0x12e>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_GPIO_Init+0x80>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d67 	.word	0x08002d67
 8002cf0:	08002d41 	.word	0x08002d41
 8002cf4:	08002d53 	.word	0x08002d53
 8002cf8:	08002d95 	.word	0x08002d95
 8002cfc:	08002d9b 	.word	0x08002d9b
 8002d00:	08002d9b 	.word	0x08002d9b
 8002d04:	08002d9b 	.word	0x08002d9b
 8002d08:	08002d9b 	.word	0x08002d9b
 8002d0c:	08002d9b 	.word	0x08002d9b
 8002d10:	08002d9b 	.word	0x08002d9b
 8002d14:	08002d9b 	.word	0x08002d9b
 8002d18:	08002d9b 	.word	0x08002d9b
 8002d1c:	08002d9b 	.word	0x08002d9b
 8002d20:	08002d9b 	.word	0x08002d9b
 8002d24:	08002d9b 	.word	0x08002d9b
 8002d28:	08002d9b 	.word	0x08002d9b
 8002d2c:	08002d9b 	.word	0x08002d9b
 8002d30:	08002d49 	.word	0x08002d49
 8002d34:	08002d5d 	.word	0x08002d5d
 8002d38:	4a79      	ldr	r2, [pc, #484]	; (8002f20 <HAL_GPIO_Init+0x2b4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d3e:	e02c      	b.n	8002d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e029      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e024      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	3308      	adds	r3, #8
 8002d58:	623b      	str	r3, [r7, #32]
          break;
 8002d5a:	e01f      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	330c      	adds	r3, #12
 8002d62:	623b      	str	r3, [r7, #32]
          break;
 8002d64:	e01a      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	623b      	str	r3, [r7, #32]
          break;
 8002d72:	e013      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	611a      	str	r2, [r3, #16]
          break;
 8002d86:	e009      	b.n	8002d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	615a      	str	r2, [r3, #20]
          break;
 8002d92:	e003      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
          break;
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x130>
          break;
 8002d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2bff      	cmp	r3, #255	; 0xff
 8002da0:	d801      	bhi.n	8002da6 <HAL_GPIO_Init+0x13a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	e001      	b.n	8002daa <HAL_GPIO_Init+0x13e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2bff      	cmp	r3, #255	; 0xff
 8002db0:	d802      	bhi.n	8002db8 <HAL_GPIO_Init+0x14c>
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	e002      	b.n	8002dbe <HAL_GPIO_Init+0x152>
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	3b08      	subs	r3, #8
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80b1 	beq.w	8002f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dec:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <HAL_GPIO_Init+0x2b8>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	4a4c      	ldr	r2, [pc, #304]	; (8002f24 <HAL_GPIO_Init+0x2b8>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6193      	str	r3, [r2, #24]
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_GPIO_Init+0x2b8>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e04:	4a48      	ldr	r2, [pc, #288]	; (8002f28 <HAL_GPIO_Init+0x2bc>)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4013      	ands	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <HAL_GPIO_Init+0x2c0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_GPIO_Init+0x1ec>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <HAL_GPIO_Init+0x2c4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00d      	beq.n	8002e54 <HAL_GPIO_Init+0x1e8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <HAL_GPIO_Init+0x2c8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d007      	beq.n	8002e50 <HAL_GPIO_Init+0x1e4>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3d      	ldr	r2, [pc, #244]	; (8002f38 <HAL_GPIO_Init+0x2cc>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_GPIO_Init+0x1e0>
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e006      	b.n	8002e5a <HAL_GPIO_Init+0x1ee>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	e004      	b.n	8002e5a <HAL_GPIO_Init+0x1ee>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_Init+0x1ee>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_GPIO_Init+0x1ee>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	f002 0203 	and.w	r2, r2, #3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4093      	lsls	r3, r2
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e6a:	492f      	ldr	r1, [pc, #188]	; (8002f28 <HAL_GPIO_Init+0x2bc>)
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e84:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	492c      	ldr	r1, [pc, #176]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	4928      	ldr	r1, [pc, #160]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4922      	ldr	r1, [pc, #136]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
 8002eb8:	e006      	b.n	8002ec8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	491e      	ldr	r1, [pc, #120]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4918      	ldr	r1, [pc, #96]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	4914      	ldr	r1, [pc, #80]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d021      	beq.n	8002f40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	490e      	ldr	r1, [pc, #56]	; (8002f3c <HAL_GPIO_Init+0x2d0>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e021      	b.n	8002f4e <HAL_GPIO_Init+0x2e2>
 8002f0a:	bf00      	nop
 8002f0c:	10320000 	.word	0x10320000
 8002f10:	10310000 	.word	0x10310000
 8002f14:	10220000 	.word	0x10220000
 8002f18:	10210000 	.word	0x10210000
 8002f1c:	10120000 	.word	0x10120000
 8002f20:	10110000 	.word	0x10110000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40010800 	.word	0x40010800
 8002f30:	40010c00 	.word	0x40010c00
 8002f34:	40011000 	.word	0x40011000
 8002f38:	40011400 	.word	0x40011400
 8002f3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_GPIO_Init+0x304>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4909      	ldr	r1, [pc, #36]	; (8002f70 <HAL_GPIO_Init+0x304>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	3301      	adds	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f47f ae8e 	bne.w	8002c80 <HAL_GPIO_Init+0x14>
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	372c      	adds	r7, #44	; 0x2c
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	041a      	lsls	r2, r3, #16
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43d9      	mvns	r1, r3
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	400b      	ands	r3, r1
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	611a      	str	r2, [r3, #16]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e12b      	b.n	8003242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd ff26 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2224      	movs	r2, #36	; 0x24
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800303c:	f002 fb8c 	bl	8005758 <HAL_RCC_GetPCLK1Freq>
 8003040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4a81      	ldr	r2, [pc, #516]	; (800324c <HAL_I2C_Init+0x274>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d807      	bhi.n	800305c <HAL_I2C_Init+0x84>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_I2C_Init+0x278>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	e006      	b.n	800306a <HAL_I2C_Init+0x92>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a7d      	ldr	r2, [pc, #500]	; (8003254 <HAL_I2C_Init+0x27c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0e7      	b.n	8003242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a78      	ldr	r2, [pc, #480]	; (8003258 <HAL_I2C_Init+0x280>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9b      	lsrs	r3, r3, #18
 800307c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a6a      	ldr	r2, [pc, #424]	; (800324c <HAL_I2C_Init+0x274>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d802      	bhi.n	80030ac <HAL_I2C_Init+0xd4>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3301      	adds	r3, #1
 80030aa:	e009      	b.n	80030c0 <HAL_I2C_Init+0xe8>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	4a69      	ldr	r2, [pc, #420]	; (800325c <HAL_I2C_Init+0x284>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	3301      	adds	r3, #1
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	495c      	ldr	r1, [pc, #368]	; (800324c <HAL_I2C_Init+0x274>)
 80030dc:	428b      	cmp	r3, r1
 80030de:	d819      	bhi.n	8003114 <HAL_I2C_Init+0x13c>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e59      	subs	r1, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ee:	1c59      	adds	r1, r3, #1
 80030f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030f4:	400b      	ands	r3, r1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_I2C_Init+0x138>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1e59      	subs	r1, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fbb1 f3f3 	udiv	r3, r1, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310e:	e051      	b.n	80031b4 <HAL_I2C_Init+0x1dc>
 8003110:	2304      	movs	r3, #4
 8003112:	e04f      	b.n	80031b4 <HAL_I2C_Init+0x1dc>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d111      	bne.n	8003140 <HAL_I2C_Init+0x168>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e012      	b.n	8003166 <HAL_I2C_Init+0x18e>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	0099      	lsls	r1, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	fbb0 f3f3 	udiv	r3, r0, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x196>
 800316a:	2301      	movs	r3, #1
 800316c:	e022      	b.n	80031b4 <HAL_I2C_Init+0x1dc>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10e      	bne.n	8003194 <HAL_I2C_Init+0x1bc>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1e58      	subs	r0, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	440b      	add	r3, r1
 8003184:	fbb0 f3f3 	udiv	r3, r0, r3
 8003188:	3301      	adds	r3, #1
 800318a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003192:	e00f      	b.n	80031b4 <HAL_I2C_Init+0x1dc>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	0099      	lsls	r1, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	6809      	ldr	r1, [r1, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6911      	ldr	r1, [r2, #16]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68d2      	ldr	r2, [r2, #12]
 80031ee:	4311      	orrs	r1, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	000186a0 	.word	0x000186a0
 8003250:	001e847f 	.word	0x001e847f
 8003254:	003d08ff 	.word	0x003d08ff
 8003258:	431bde83 	.word	0x431bde83
 800325c:	10624dd3 	.word	0x10624dd3

08003260 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d103      	bne.n	800327e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  }
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	f040 808a 	bne.w	80033c8 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032b4:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_I2C_Mem_Write_IT+0x14c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_I2C_Mem_Write_IT+0x150>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0a1a      	lsrs	r2, r3, #8
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d112      	bne.n	8003300 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	e064      	b.n	80033ca <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d0df      	beq.n	80032ce <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_I2C_Mem_Write_IT+0x94>
 8003318:	2302      	movs	r3, #2
 800331a:	e056      	b.n	80033ca <HAL_I2C_Mem_Write_IT+0x142>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d007      	beq.n	8003342 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003350:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a3a      	ldr	r2, [r7, #32]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a16      	ldr	r2, [pc, #88]	; (80033dc <HAL_I2C_Mem_Write_IT+0x154>)
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003384:	897a      	ldrh	r2, [r7, #10]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800338a:	893a      	ldrh	r2, [r7, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80033c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	20000044 	.word	0x20000044
 80033d8:	14f8b589 	.word	0x14f8b589
 80033dc:	ffff0000 	.word	0xffff0000

080033e0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b20      	cmp	r3, #32
 8003408:	f040 8096 	bne.w	8003538 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800340c:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <HAL_I2C_Mem_Read_IT+0x164>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <HAL_I2C_Mem_Read_IT+0x168>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	0a1a      	lsrs	r2, r3, #8
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3b01      	subs	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d112      	bne.n	8003458 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	e070      	b.n	800353a <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d0df      	beq.n	8003426 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2C_Mem_Read_IT+0x94>
 8003470:	2302      	movs	r3, #2
 8003472:	e062      	b.n	800353a <HAL_I2C_Mem_Read_IT+0x15a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d007      	beq.n	800349a <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2222      	movs	r2, #34	; 0x22
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_I2C_Mem_Read_IT+0x16c>)
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80034dc:	897a      	ldrh	r2, [r7, #10]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80034e2:	893a      	ldrh	r2, [r7, #8]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003502:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003532:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	20000044 	.word	0x20000044
 8003548:	14f8b589 	.word	0x14f8b589
 800354c:	ffff0000 	.word	0xffff0000

08003550 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	460b      	mov	r3, r1
 800355e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7fd ff9a 	bl	8001498 <HAL_GetTick>
 8003564:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	f040 8111 	bne.w	800379a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2319      	movs	r3, #25
 800357e:	2201      	movs	r2, #1
 8003580:	4988      	ldr	r1, [pc, #544]	; (80037a4 <HAL_I2C_IsDeviceReady+0x254>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f001 fc58 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
 8003590:	e104      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_I2C_IsDeviceReady+0x50>
 800359c:	2302      	movs	r3, #2
 800359e:	e0fd      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d007      	beq.n	80035c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2224      	movs	r2, #36	; 0x24
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4a70      	ldr	r2, [pc, #448]	; (80037a8 <HAL_I2C_IsDeviceReady+0x258>)
 80035e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f001 fc16 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003620:	d103      	bne.n	800362a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0b6      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800363c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800363e:	f7fd ff2b 	bl	8001498 <HAL_GetTick>
 8003642:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003672:	e025      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003674:	f7fd ff10 	bl	8001498 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <HAL_I2C_IsDeviceReady+0x13a>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22a0      	movs	r2, #160	; 0xa0
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b02      	cmp	r3, #2
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2ba0      	cmp	r3, #160	; 0xa0
 80036ca:	d005      	beq.n	80036d8 <HAL_I2C_IsDeviceReady+0x188>
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_I2C_IsDeviceReady+0x188>
 80036d2:	7dbb      	ldrb	r3, [r7, #22]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0cd      	beq.n	8003674 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d129      	bne.n	8003742 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	2201      	movs	r2, #1
 800371c:	4921      	ldr	r1, [pc, #132]	; (80037a4 <HAL_I2C_IsDeviceReady+0x254>)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f001 fb8a 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e036      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e02c      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800375a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2319      	movs	r3, #25
 8003762:	2201      	movs	r2, #1
 8003764:	490f      	ldr	r1, [pc, #60]	; (80037a4 <HAL_I2C_IsDeviceReady+0x254>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f001 fb66 	bl	8004e38 <I2C_WaitOnFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e012      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	3301      	adds	r3, #1
 800377a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	f4ff af32 	bcc.w	80035ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	00100002 	.word	0x00100002
 80037a8:	ffff0000 	.word	0xffff0000

080037ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d003      	beq.n	80037e4 <HAL_I2C_EV_IRQHandler+0x38>
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	f040 80b1 	bne.w	8003946 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_I2C_EV_IRQHandler+0x6e>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003804:	d003      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x62>
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800380c:	d101      	bne.n	8003812 <HAL_I2C_EV_IRQHandler+0x66>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x68>
 8003812:	2300      	movs	r3, #0
 8003814:	2b01      	cmp	r3, #1
 8003816:	f000 8114 	beq.w	8003a42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x90>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f001 fbae 	bl	8004f90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fca7 	bl	8004188 <I2C_Master_SB>
 800383a:	e083      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_I2C_EV_IRQHandler+0xac>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fd1e 	bl	8004292 <I2C_Master_ADD10>
 8003856:	e075      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0xc8>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fd39 	bl	80042e4 <I2C_Master_ADDR>
 8003872:	e067      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d036      	beq.n	80038ec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388c:	f000 80db 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <HAL_I2C_EV_IRQHandler+0x10a>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_I2C_EV_IRQHandler+0x10a>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f91b 	bl	8003aea <I2C_MasterTransmit_TXE>
 80038b4:	e046      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80c2 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80bc 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038ce:	7bbb      	ldrb	r3, [r7, #14]
 80038d0:	2b21      	cmp	r3, #33	; 0x21
 80038d2:	d103      	bne.n	80038dc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f9a4 	bl	8003c22 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038da:	e0b4      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	f040 80b1 	bne.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa12 	bl	8003d0e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ea:	e0ac      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fa:	f000 80a4 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00d      	beq.n	8003924 <HAL_I2C_EV_IRQHandler+0x178>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_I2C_EV_IRQHandler+0x178>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa8e 	bl	8003e3e <I2C_MasterReceive_RXNE>
 8003922:	e00f      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 808b 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8085 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fb39 	bl	8003fb4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003942:	e080      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
 8003944:	e07f      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e007      	b.n	8003968 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d011      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00c      	beq.n	8003996 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800398c:	69b9      	ldr	r1, [r7, #24]
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 feff 	bl	8004792 <I2C_Slave_ADDR>
 8003994:	e05a      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_I2C_EV_IRQHandler+0x206>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 ff3a 	bl	8004824 <I2C_Slave_STOPF>
 80039b0:	e04c      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039b2:	7bbb      	ldrb	r3, [r7, #14]
 80039b4:	2b21      	cmp	r3, #33	; 0x21
 80039b6:	d002      	beq.n	80039be <HAL_I2C_EV_IRQHandler+0x212>
 80039b8:	7bbb      	ldrb	r3, [r7, #14]
 80039ba:	2b29      	cmp	r3, #41	; 0x29
 80039bc:	d120      	bne.n	8003a00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <HAL_I2C_EV_IRQHandler+0x238>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_I2C_EV_IRQHandler+0x238>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fe1c 	bl	800461a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039e2:	e032      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02d      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x29e>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d028      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fe4b 	bl	8004694 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039fe:	e024      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x27a>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_I2C_EV_IRQHandler+0x27a>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fe58 	bl	80046d4 <I2C_SlaveReceive_RXNE>
 8003a24:	e012      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fe88 	bl	8004750 <I2C_SlaveReceive_BTF>
 8003a40:	e004      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b00:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d150      	bne.n	8003bb2 <I2C_MasterTransmit_TXE+0xc8>
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b21      	cmp	r3, #33	; 0x21
 8003b14:	d14d      	bne.n	8003bb2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d01d      	beq.n	8003b58 <I2C_MasterTransmit_TXE+0x6e>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d01a      	beq.n	8003b58 <I2C_MasterTransmit_TXE+0x6e>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b28:	d016      	beq.n	8003b58 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b38:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2211      	movs	r2, #17
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff7e 	bl	8003a52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b56:	e060      	b.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b66:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b76:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d107      	bne.n	8003ba2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc ff6c 	bl	8000a78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ba0:	e03b      	b.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ff51 	bl	8003a52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bb0:	e033      	b.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b21      	cmp	r3, #33	; 0x21
 8003bb6:	d005      	beq.n	8003bc4 <I2C_MasterTransmit_TXE+0xda>
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d12d      	bne.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b22      	cmp	r3, #34	; 0x22
 8003bc2:	d12a      	bne.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bdc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003bde:	e01c      	b.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d103      	bne.n	8003bf4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f88e 	bl	8003d0e <I2C_MemoryTransmit_TXE_BTF>
}
 8003bf2:	e012      	b.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c18:	e7ff      	b.n	8003c1a <I2C_MasterTransmit_TXE+0x130>
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b21      	cmp	r3, #33	; 0x21
 8003c3a:	d164      	bne.n	8003d06 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d012      	beq.n	8003c6c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c6a:	e04c      	b.n	8003d06 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d01d      	beq.n	8003cae <I2C_MasterTransmit_BTF+0x8c>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d01a      	beq.n	8003cae <I2C_MasterTransmit_BTF+0x8c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c7e:	d016      	beq.n	8003cae <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2211      	movs	r2, #17
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fed3 	bl	8003a52 <HAL_I2C_MasterTxCpltCallback>
}
 8003cac:	e02b      	b.n	8003d06 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cbc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ccc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d107      	bne.n	8003cf8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fc fec1 	bl	8000a78 <HAL_I2C_MemTxCpltCallback>
}
 8003cf6:	e006      	b.n	8003d06 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff fea6 	bl	8003a52 <HAL_I2C_MasterTxCpltCallback>
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11d      	bne.n	8003d62 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10b      	bne.n	8003d46 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003d44:	e077      	b.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	121b      	asrs	r3, r3, #8
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d60:	e069      	b.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10b      	bne.n	8003d82 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d80:	e059      	b.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d152      	bne.n	8003e30 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b22      	cmp	r3, #34	; 0x22
 8003d8e:	d10d      	bne.n	8003dac <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003daa:	e044      	b.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d015      	beq.n	8003de2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b21      	cmp	r3, #33	; 0x21
 8003dba:	d112      	bne.n	8003de2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003de0:	e029      	b.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d124      	bne.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b21      	cmp	r3, #33	; 0x21
 8003df0:	d121      	bne.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e00:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fc fe25 	bl	8000a78 <HAL_I2C_MemTxCpltCallback>
}
 8003e2e:	e002      	b.n	8003e36 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fa15 	bl	8003260 <I2C_Flush_DR>
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	f040 80ac 	bne.w	8003fac <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d921      	bls.n	8003ea6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	f040 808c 	bne.w	8003fac <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ea4:	e082      	b.n	8003fac <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d075      	beq.n	8003f9a <I2C_MasterReceive_RXNE+0x15c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <I2C_MasterReceive_RXNE+0x7c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d16f      	bne.n	8003f9a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f001 f836 	bl	8004f2c <I2C_WaitOnSTOPRequestThroughIT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d142      	bne.n	8003f4c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ee4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d10a      	bne.n	8003f36 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc fd90 	bl	8000a54 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f34:	e03a      	b.n	8003fac <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2212      	movs	r2, #18
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fd8d 	bl	8003a64 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f4a:	e02f      	b.n	8003fac <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f5a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fd97 	bl	8003ac6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f98:	e008      	b.n	8003fac <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa8:	605a      	str	r2, [r3, #4]
}
 8003faa:	e7ff      	b.n	8003fac <I2C_MasterReceive_RXNE+0x16e>
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d11b      	bne.n	8004004 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fda:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004002:	e0bd      	b.n	8004180 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b03      	cmp	r3, #3
 800400c:	d129      	bne.n	8004062 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d00a      	beq.n	800403a <I2C_MasterReceive_BTF+0x86>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d007      	beq.n	800403a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004060:	e08e      	b.n	8004180 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d176      	bne.n	800415a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d002      	beq.n	8004078 <I2C_MasterReceive_BTF+0xc4>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b10      	cmp	r3, #16
 8004076:	d108      	bne.n	800408a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e019      	b.n	80040be <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d002      	beq.n	8004096 <I2C_MasterReceive_BTF+0xe2>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d108      	bne.n	80040a8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e00a      	b.n	80040be <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d007      	beq.n	80040be <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004118:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d10a      	bne.n	8004144 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc fc89 	bl	8000a54 <HAL_I2C_MemRxCpltCallback>
}
 8004142:	e01d      	b.n	8004180 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2212      	movs	r2, #18
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fc86 	bl	8003a64 <HAL_I2C_MasterRxCpltCallback>
}
 8004158:	e012      	b.n	8004180 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d117      	bne.n	80041cc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041b4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80041b6:	e067      	b.n	8004288 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]
}
 80041ca:	e05d      	b.n	8004288 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d4:	d133      	bne.n	800423e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b21      	cmp	r3, #33	; 0x21
 80041e0:	d109      	bne.n	80041f6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	e008      	b.n	8004208 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	b2da      	uxtb	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <I2C_Master_SB+0x92>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	2b00      	cmp	r3, #0
 8004220:	d032      	beq.n	8004288 <I2C_Master_SB+0x100>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02d      	beq.n	8004288 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423a:	605a      	str	r2, [r3, #4]
}
 800423c:	e024      	b.n	8004288 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10e      	bne.n	8004264 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	b29b      	uxth	r3, r3
 800424c:	11db      	asrs	r3, r3, #7
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f003 0306 	and.w	r3, r3, #6
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f063 030f 	orn	r3, r3, #15
 800425a:	b2da      	uxtb	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]
}
 8004262:	e011      	b.n	8004288 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10d      	bne.n	8004288 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	b29b      	uxth	r3, r3
 8004272:	11db      	asrs	r3, r3, #7
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f063 030e 	orn	r3, r3, #14
 8004280:	b2da      	uxtb	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <I2C_Master_ADD10+0x26>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d108      	bne.n	80042ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <I2C_Master_ADD10+0x48>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d8:	605a      	str	r2, [r3, #4]
  }
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b091      	sub	sp, #68	; 0x44
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b22      	cmp	r3, #34	; 0x22
 800430c:	f040 8174 	bne.w	80045f8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <I2C_Master_ADDR+0x54>
 8004318:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d10b      	bne.n	8004338 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004320:	2300      	movs	r3, #0
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	e16b      	b.n	8004610 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11d      	bne.n	800437c <I2C_Master_ADDR+0x98>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004348:	d118      	bne.n	800437c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434a:	2300      	movs	r3, #0
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	651a      	str	r2, [r3, #80]	; 0x50
 800437a:	e149      	b.n	8004610 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d113      	bne.n	80043ae <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e120      	b.n	80045f0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f040 808a 	bne.w	80044ce <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043c0:	d137      	bne.n	8004432 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e0:	d113      	bne.n	800440a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	e0f2      	b.n	80045f0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e0de      	b.n	80045f0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2b08      	cmp	r3, #8
 8004436:	d02e      	beq.n	8004496 <I2C_Master_ADDR+0x1b2>
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	2b20      	cmp	r3, #32
 800443c:	d02b      	beq.n	8004496 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	2b12      	cmp	r3, #18
 8004442:	d102      	bne.n	800444a <I2C_Master_ADDR+0x166>
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	2b01      	cmp	r3, #1
 8004448:	d125      	bne.n	8004496 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	2b04      	cmp	r3, #4
 800444e:	d00e      	beq.n	800446e <I2C_Master_ADDR+0x18a>
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	2b02      	cmp	r3, #2
 8004454:	d00b      	beq.n	800446e <I2C_Master_ADDR+0x18a>
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2b10      	cmp	r3, #16
 800445a:	d008      	beq.n	800446e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e007      	b.n	800447e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800447c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	e0ac      	b.n	80045f0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e090      	b.n	80045f0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d158      	bne.n	800458a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d021      	beq.n	8004522 <I2C_Master_ADDR+0x23e>
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d01e      	beq.n	8004522 <I2C_Master_ADDR+0x23e>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d01b      	beq.n	8004522 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e012      	b.n	8004548 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004556:	d14b      	bne.n	80045f0 <I2C_Master_ADDR+0x30c>
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800455e:	d00b      	beq.n	8004578 <I2C_Master_ADDR+0x294>
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	2b01      	cmp	r3, #1
 8004564:	d008      	beq.n	8004578 <I2C_Master_ADDR+0x294>
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b08      	cmp	r3, #8
 800456a:	d005      	beq.n	8004578 <I2C_Master_ADDR+0x294>
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	2b10      	cmp	r3, #16
 8004570:	d002      	beq.n	8004578 <I2C_Master_ADDR+0x294>
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	2b20      	cmp	r3, #32
 8004576:	d13b      	bne.n	80045f0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	e032      	b.n	80045f0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a8:	d117      	bne.n	80045da <I2C_Master_ADDR+0x2f6>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b0:	d00b      	beq.n	80045ca <I2C_Master_ADDR+0x2e6>
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d008      	beq.n	80045ca <I2C_Master_ADDR+0x2e6>
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d005      	beq.n	80045ca <I2C_Master_ADDR+0x2e6>
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d002      	beq.n	80045ca <I2C_Master_ADDR+0x2e6>
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d107      	bne.n	80045da <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045f6:	e00b      	b.n	8004610 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
}
 800460e:	e7ff      	b.n	8004610 <I2C_Master_ADDR+0x32c>
 8004610:	bf00      	nop
 8004612:	3744      	adds	r7, #68	; 0x44
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d114      	bne.n	800468c <I2C_SlaveTransmit_TXE+0x72>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b29      	cmp	r3, #41	; 0x29
 8004666:	d111      	bne.n	800468c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004676:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2221      	movs	r2, #33	; 0x21
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2228      	movs	r2, #40	; 0x28
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff f9f5 	bl	8003a76 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d02c      	beq.n	8004748 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d114      	bne.n	8004748 <I2C_SlaveReceive_RXNE+0x74>
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b2a      	cmp	r3, #42	; 0x2a
 8004722:	d111      	bne.n	8004748 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004732:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2222      	movs	r2, #34	; 0x22
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2228      	movs	r2, #40	; 0x28
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff f9a0 	bl	8003a88 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004748:	bf00      	nop
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047ac:	2b28      	cmp	r3, #40	; 0x28
 80047ae:	d125      	bne.n	80047fc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047be:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d103      	bne.n	80047e0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	81bb      	strh	r3, [r7, #12]
 80047de:	e002      	b.n	80047e6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047ee:	89ba      	ldrh	r2, [r7, #12]
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff f950 	bl	8003a9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047fa:	e00e      	b.n	800481a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fc:	2300      	movs	r3, #0
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004842:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004844:	2300      	movs	r3, #0
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004870:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004880:	d172      	bne.n	8004968 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b22      	cmp	r3, #34	; 0x22
 8004886:	d002      	beq.n	800488e <I2C_Slave_STOPF+0x6a>
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b2a      	cmp	r3, #42	; 0x2a
 800488c:	d135      	bne.n	80048fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe f98a 	bl	8002be0 <HAL_DMA_GetState>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d049      	beq.n	8004966 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	4a69      	ldr	r2, [pc, #420]	; (8004a7c <I2C_Slave_STOPF+0x258>)
 80048d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe f800 	bl	80028e4 <HAL_DMA_Abort_IT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d03d      	beq.n	8004966 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f4:	4610      	mov	r0, r2
 80048f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f8:	e035      	b.n	8004966 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b29a      	uxth	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe f954 	bl	8002be0 <HAL_DMA_GetState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d014      	beq.n	8004968 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	4a4e      	ldr	r2, [pc, #312]	; (8004a7c <I2C_Slave_STOPF+0x258>)
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	4618      	mov	r0, r3
 800494c:	f7fd ffca 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004960:	4610      	mov	r0, r2
 8004962:	4798      	blx	r3
 8004964:	e000      	b.n	8004968 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004966:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d03e      	beq.n	80049f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d112      	bne.n	80049a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b40      	cmp	r3, #64	; 0x40
 80049b2:	d112      	bne.n	80049da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f043 0204 	orr.w	r2, r3, #4
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f843 	bl	8004a84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049fe:	e039      	b.n	8004a74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d109      	bne.n	8004a1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2228      	movs	r2, #40	; 0x28
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff f837 	bl	8003a88 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b28      	cmp	r3, #40	; 0x28
 8004a24:	d111      	bne.n	8004a4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <I2C_Slave_STOPF+0x25c>)
 8004a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff f836 	bl	8003ab4 <HAL_I2C_ListenCpltCallback>
}
 8004a48:	e014      	b.n	8004a74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	2b22      	cmp	r3, #34	; 0x22
 8004a50:	d002      	beq.n	8004a58 <I2C_Slave_STOPF+0x234>
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b22      	cmp	r3, #34	; 0x22
 8004a56:	d10d      	bne.n	8004a74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff f80a 	bl	8003a88 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08004ce9 	.word	0x08004ce9
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d002      	beq.n	8004aa8 <I2C_ITError+0x24>
 8004aa2:	7bbb      	ldrb	r3, [r7, #14]
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d10a      	bne.n	8004abe <I2C_ITError+0x3a>
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b22      	cmp	r3, #34	; 0x22
 8004aac:	d107      	bne.n	8004abe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004abc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ac4:	2b28      	cmp	r3, #40	; 0x28
 8004ac6:	d107      	bne.n	8004ad8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2228      	movs	r2, #40	; 0x28
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ad6:	e015      	b.n	8004b04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d00a      	beq.n	8004afe <I2C_ITError+0x7a>
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b60      	cmp	r3, #96	; 0x60
 8004aec:	d007      	beq.n	8004afe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b12:	d162      	bne.n	8004bda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d020      	beq.n	8004b74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	4a6a      	ldr	r2, [pc, #424]	; (8004ce0 <I2C_ITError+0x25c>)
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd fed0 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8089 	beq.w	8004c5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4798      	blx	r3
 8004b72:	e074      	b.n	8004c5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	4a59      	ldr	r2, [pc, #356]	; (8004ce0 <I2C_ITError+0x25c>)
 8004b7a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd feaf 	bl	80028e4 <HAL_DMA_Abort_IT>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d068      	beq.n	8004c5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d10b      	bne.n	8004bb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
 8004bd8:	e041      	b.n	8004c5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b60      	cmp	r3, #96	; 0x60
 8004be4:	d125      	bne.n	8004c32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10b      	bne.n	8004c1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fe ff54 	bl	8003ad8 <HAL_I2C_AbortCpltCallback>
 8004c30:	e015      	b.n	8004c5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d10b      	bne.n	8004c58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fe ff34 	bl	8003ac6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10e      	bne.n	8004c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d113      	bne.n	8004cd8 <I2C_ITError+0x254>
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b28      	cmp	r3, #40	; 0x28
 8004cb4:	d110      	bne.n	8004cd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <I2C_ITError+0x260>)
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fe feee 	bl	8003ab4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08004ce9 	.word	0x08004ce9
 8004ce4:	ffff0000 	.word	0xffff0000

08004ce8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <I2C_DMAAbort+0x148>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	4a4a      	ldr	r2, [pc, #296]	; (8004e34 <I2C_DMAAbort+0x14c>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a1a      	lsrs	r2, r3, #8
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d2e:	e00a      	b.n	8004d46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d44:	d0ea      	beq.n	8004d1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	2200      	movs	r2, #0
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	2200      	movs	r2, #0
 8004d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2200      	movs	r2, #0
 8004d8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b60      	cmp	r3, #96	; 0x60
 8004db6:	d10e      	bne.n	8004dd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f7fe fe82 	bl	8003ad8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dd4:	e027      	b.n	8004e26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dd6:	7cfb      	ldrb	r3, [r7, #19]
 8004dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ddc:	2b28      	cmp	r3, #40	; 0x28
 8004dde:	d117      	bne.n	8004e10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2228      	movs	r2, #40	; 0x28
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e0e:	e007      	b.n	8004e20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e20:	6978      	ldr	r0, [r7, #20]
 8004e22:	f7fe fe50 	bl	8003ac6 <HAL_I2C_ErrorCallback>
}
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000044 	.word	0x20000044
 8004e34:	14f8b589 	.word	0x14f8b589

08004e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e48:	e048      	b.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d044      	beq.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fc fb21 	bl	8001498 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d139      	bne.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10d      	bne.n	8004e8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	e00c      	b.n	8004ea8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	43da      	mvns	r2, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d116      	bne.n	8004edc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e023      	b.n	8004f24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10d      	bne.n	8004f02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	e00c      	b.n	8004f1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d093      	beq.n	8004e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	0a1a      	lsrs	r2, r3, #8
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f043 0220 	orr.w	r2, r3, #32
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e008      	b.n	8004f7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f78:	d0e9      	beq.n	8004f4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000044 	.word	0x20000044
 8004f8c:	14f8b589 	.word	0x14f8b589

08004f90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fa0:	d103      	bne.n	8004faa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004fa8:	e007      	b.n	8004fba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fb2:	d102      	bne.n	8004fba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e272      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8087 	beq.w	80050f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fe4:	4b92      	ldr	r3, [pc, #584]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d00c      	beq.n	800500a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff0:	4b8f      	ldr	r3, [pc, #572]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d112      	bne.n	8005022 <HAL_RCC_OscConfig+0x5e>
 8004ffc:	4b8c      	ldr	r3, [pc, #560]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005008:	d10b      	bne.n	8005022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500a:	4b89      	ldr	r3, [pc, #548]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d06c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x12c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d168      	bne.n	80050f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e24c      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x76>
 800502c:	4b80      	ldr	r3, [pc, #512]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7f      	ldr	r2, [pc, #508]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e02e      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x98>
 8005042:	4b7b      	ldr	r3, [pc, #492]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7a      	ldr	r2, [pc, #488]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b78      	ldr	r3, [pc, #480]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a77      	ldr	r2, [pc, #476]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0xbc>
 8005066:	4b72      	ldr	r3, [pc, #456]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a71      	ldr	r2, [pc, #452]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b6f      	ldr	r3, [pc, #444]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a6e      	ldr	r2, [pc, #440]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xd4>
 8005080:	4b6b      	ldr	r3, [pc, #428]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6a      	ldr	r2, [pc, #424]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b68      	ldr	r3, [pc, #416]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a67      	ldr	r2, [pc, #412]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fc f9fa 	bl	8001498 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fc f9f6 	bl	8001498 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e200      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xe4>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fc f9e6 	bl	8001498 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fc f9e2 	bl	8001498 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e1ec      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	4b53      	ldr	r3, [pc, #332]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x10c>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d063      	beq.n	80051c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050fe:	4b4c      	ldr	r3, [pc, #304]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800510a:	4b49      	ldr	r3, [pc, #292]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b08      	cmp	r3, #8
 8005114:	d11c      	bne.n	8005150 <HAL_RCC_OscConfig+0x18c>
 8005116:	4b46      	ldr	r3, [pc, #280]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d116      	bne.n	8005150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	4b43      	ldr	r3, [pc, #268]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_RCC_OscConfig+0x176>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1c0      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513a:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4939      	ldr	r1, [pc, #228]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800514a:	4313      	orrs	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514e:	e03a      	b.n	80051c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d020      	beq.n	800519a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005158:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800515a:	2201      	movs	r2, #1
 800515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515e:	f7fc f99b 	bl	8001498 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005166:	f7fc f997 	bl	8001498 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e1a1      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b2a      	ldr	r3, [pc, #168]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4927      	ldr	r1, [pc, #156]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
 8005198:	e015      	b.n	80051c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <HAL_RCC_OscConfig+0x270>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fc f97a 	bl	8001498 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fc f976 	bl	8001498 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e180      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d03a      	beq.n	8005248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d019      	beq.n	800520e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051da:	4b17      	ldr	r3, [pc, #92]	; (8005238 <HAL_RCC_OscConfig+0x274>)
 80051dc:	2201      	movs	r2, #1
 80051de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e0:	f7fc f95a 	bl	8001498 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e8:	f7fc f956 	bl	8001498 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e160      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005206:	2001      	movs	r0, #1
 8005208:	f000 face 	bl	80057a8 <RCC_Delay>
 800520c:	e01c      	b.n	8005248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_RCC_OscConfig+0x274>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005214:	f7fc f940 	bl	8001498 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521a:	e00f      	b.n	800523c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7fc f93c 	bl	8001498 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d908      	bls.n	800523c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e146      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
 800522e:	bf00      	nop
 8005230:	40021000 	.word	0x40021000
 8005234:	42420000 	.word	0x42420000
 8005238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	4b92      	ldr	r3, [pc, #584]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e9      	bne.n	800521c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80a6 	beq.w	80053a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525a:	4b8b      	ldr	r3, [pc, #556]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4a87      	ldr	r2, [pc, #540]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800526c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005270:	61d3      	str	r3, [r2, #28]
 8005272:	4b85      	ldr	r3, [pc, #532]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	4b82      	ldr	r3, [pc, #520]	; (800548c <HAL_RCC_OscConfig+0x4c8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d118      	bne.n	80052c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800528e:	4b7f      	ldr	r3, [pc, #508]	; (800548c <HAL_RCC_OscConfig+0x4c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a7e      	ldr	r2, [pc, #504]	; (800548c <HAL_RCC_OscConfig+0x4c8>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529a:	f7fc f8fd 	bl	8001498 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7fc f8f9 	bl	8001498 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b64      	cmp	r3, #100	; 0x64
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e103      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	4b75      	ldr	r3, [pc, #468]	; (800548c <HAL_RCC_OscConfig+0x4c8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d106      	bne.n	80052d6 <HAL_RCC_OscConfig+0x312>
 80052c8:	4b6f      	ldr	r3, [pc, #444]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	4a6e      	ldr	r2, [pc, #440]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6213      	str	r3, [r2, #32]
 80052d4:	e02d      	b.n	8005332 <HAL_RCC_OscConfig+0x36e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x334>
 80052de:	4b6a      	ldr	r3, [pc, #424]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	4a69      	ldr	r2, [pc, #420]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80052e4:	f023 0301 	bic.w	r3, r3, #1
 80052e8:	6213      	str	r3, [r2, #32]
 80052ea:	4b67      	ldr	r3, [pc, #412]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a66      	ldr	r2, [pc, #408]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	f023 0304 	bic.w	r3, r3, #4
 80052f4:	6213      	str	r3, [r2, #32]
 80052f6:	e01c      	b.n	8005332 <HAL_RCC_OscConfig+0x36e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d10c      	bne.n	800531a <HAL_RCC_OscConfig+0x356>
 8005300:	4b61      	ldr	r3, [pc, #388]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	4a60      	ldr	r2, [pc, #384]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	6213      	str	r3, [r2, #32]
 800530c:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a5d      	ldr	r2, [pc, #372]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	6213      	str	r3, [r2, #32]
 8005318:	e00b      	b.n	8005332 <HAL_RCC_OscConfig+0x36e>
 800531a:	4b5b      	ldr	r3, [pc, #364]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4a5a      	ldr	r2, [pc, #360]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	6213      	str	r3, [r2, #32]
 8005326:	4b58      	ldr	r3, [pc, #352]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4a57      	ldr	r2, [pc, #348]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d015      	beq.n	8005366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7fc f8ad 	bl	8001498 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fc f8a9 	bl	8001498 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005350:	4293      	cmp	r3, r2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e0b1      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005358:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ee      	beq.n	8005342 <HAL_RCC_OscConfig+0x37e>
 8005364:	e014      	b.n	8005390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005366:	f7fc f897 	bl	8001498 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536c:	e00a      	b.n	8005384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536e:	f7fc f893 	bl	8001498 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e09b      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005384:	4b40      	ldr	r3, [pc, #256]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ee      	bne.n	800536e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005396:	4b3c      	ldr	r3, [pc, #240]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4a3b      	ldr	r2, [pc, #236]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800539c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8087 	beq.w	80054ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ac:	4b36      	ldr	r3, [pc, #216]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d061      	beq.n	800547c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d146      	bne.n	800544e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4b33      	ldr	r3, [pc, #204]	; (8005490 <HAL_RCC_OscConfig+0x4cc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fc f867 	bl	8001498 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ce:	f7fc f863 	bl	8001498 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e06d      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e0:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d108      	bne.n	8005408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	4921      	ldr	r1, [pc, #132]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a19      	ldr	r1, [r3, #32]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	430b      	orrs	r3, r1
 800541a:	491b      	ldr	r1, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x4cc>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fc f837 	bl	8001498 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542e:	f7fc f833 	bl	8001498 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e03d      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x46a>
 800544c:	e035      	b.n	80054ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCC_OscConfig+0x4cc>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fc f820 	bl	8001498 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc f81c 	bl	8001498 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e026      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCC_OscConfig+0x4c4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x498>
 800547a:	e01e      	b.n	80054ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e019      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
 8005488:	40021000 	.word	0x40021000
 800548c:	40007000 	.word	0x40007000
 8005490:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_RCC_OscConfig+0x500>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d106      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000

080054c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0d0      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054dc:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d910      	bls.n	800550c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b67      	ldr	r3, [pc, #412]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 0207 	bic.w	r2, r3, #7
 80054f2:	4965      	ldr	r1, [pc, #404]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0b8      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005524:	4b59      	ldr	r3, [pc, #356]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a58      	ldr	r2, [pc, #352]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800552e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a52      	ldr	r2, [pc, #328]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b50      	ldr	r3, [pc, #320]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	494d      	ldr	r1, [pc, #308]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d040      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d115      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07f      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d107      	bne.n	8005596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e073      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005596:	4b3d      	ldr	r3, [pc, #244]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e06b      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a6:	4b39      	ldr	r3, [pc, #228]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f023 0203 	bic.w	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4936      	ldr	r1, [pc, #216]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b8:	f7fb ff6e 	bl	8001498 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c0:	f7fb ff6a 	bl	8001498 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e053      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	4b2d      	ldr	r3, [pc, #180]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 020c 	and.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1eb      	bne.n	80055c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d210      	bcs.n	8005618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b24      	ldr	r3, [pc, #144]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4922      	ldr	r1, [pc, #136]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e032      	b.n	800567e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4916      	ldr	r1, [pc, #88]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	490e      	ldr	r1, [pc, #56]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005652:	4313      	orrs	r3, r2
 8005654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005656:	f000 f821 	bl	800569c <HAL_RCC_GetSysClockFreq>
 800565a:	4602      	mov	r2, r0
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	490a      	ldr	r1, [pc, #40]	; (8005690 <HAL_RCC_ClockConfig+0x1c8>)
 8005668:	5ccb      	ldrb	r3, [r1, r3]
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <HAL_RCC_ClockConfig+0x1cc>)
 8005670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1d0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fecc 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40022000 	.word	0x40022000
 800568c:	40021000 	.word	0x40021000
 8005690:	0800f07c 	.word	0x0800f07c
 8005694:	20000044 	.word	0x20000044
 8005698:	20000048 	.word	0x20000048

0800569c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056b6:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <HAL_RCC_GetSysClockFreq+0x94>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d002      	beq.n	80056cc <HAL_RCC_GetSysClockFreq+0x30>
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d003      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0x36>
 80056ca:	e027      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056cc:	4b19      	ldr	r3, [pc, #100]	; (8005734 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ce:	613b      	str	r3, [r7, #16]
      break;
 80056d0:	e027      	b.n	8005722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	0c9b      	lsrs	r3, r3, #18
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	4a17      	ldr	r2, [pc, #92]	; (8005738 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056ea:	4b11      	ldr	r3, [pc, #68]	; (8005730 <HAL_RCC_GetSysClockFreq+0x94>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	0c5b      	lsrs	r3, r3, #17
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	4a11      	ldr	r2, [pc, #68]	; (800573c <HAL_RCC_GetSysClockFreq+0xa0>)
 80056f6:	5cd3      	ldrb	r3, [r2, r3]
 80056f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <HAL_RCC_GetSysClockFreq+0x98>)
 80056fe:	fb03 f202 	mul.w	r2, r3, r2
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e004      	b.n	8005716 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	613b      	str	r3, [r7, #16]
      break;
 800571a:	e002      	b.n	8005722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCC_GetSysClockFreq+0x98>)
 800571e:	613b      	str	r3, [r7, #16]
      break;
 8005720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005722:	693b      	ldr	r3, [r7, #16]
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	007a1200 	.word	0x007a1200
 8005738:	0800f094 	.word	0x0800f094
 800573c:	0800f0a4 	.word	0x0800f0a4
 8005740:	003d0900 	.word	0x003d0900

08005744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005748:	4b02      	ldr	r3, [pc, #8]	; (8005754 <HAL_RCC_GetHCLKFreq+0x10>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000044 	.word	0x20000044

08005758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800575c:	f7ff fff2 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005760:	4602      	mov	r2, r0
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4903      	ldr	r1, [pc, #12]	; (800577c <HAL_RCC_GetPCLK1Freq+0x24>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	0800f08c 	.word	0x0800f08c

08005780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005784:	f7ff ffde 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005788:	4602      	mov	r2, r0
 800578a:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	0adb      	lsrs	r3, r3, #11
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	4903      	ldr	r1, [pc, #12]	; (80057a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005796:	5ccb      	ldrb	r3, [r1, r3]
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800579c:	4618      	mov	r0, r3
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000
 80057a4:	0800f08c 	.word	0x0800f08c

080057a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <RCC_Delay+0x34>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0a      	ldr	r2, [pc, #40]	; (80057e0 <RCC_Delay+0x38>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	0a5b      	lsrs	r3, r3, #9
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057c4:	bf00      	nop
  }
  while (Delay --);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1e5a      	subs	r2, r3, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f9      	bne.n	80057c4 <RCC_Delay+0x1c>
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	20000044 	.word	0x20000044
 80057e0:	10624dd3 	.word	0x10624dd3

080057e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e042      	b.n	800587c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fb fb66 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 f81b 	bl	8006864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800583c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800584c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d16d      	bne.n	8005980 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_UART_Transmit+0x2c>
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e066      	b.n	8005982 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2221      	movs	r2, #33	; 0x21
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058c2:	f7fb fde9 	bl	8001498 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058dc:	d108      	bne.n	80058f0 <HAL_UART_Transmit+0x6c>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d104      	bne.n	80058f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	e003      	b.n	80058f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058f8:	e02a      	b.n	8005950 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fce3 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e036      	b.n	8005982 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	3302      	adds	r3, #2
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e007      	b.n	8005942 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	781a      	ldrb	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	3301      	adds	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1cf      	bne.n	80058fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	2140      	movs	r1, #64	; 0x40
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fcb3 	bl	80062d0 <UART_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e006      	b.n	8005982 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b08c      	sub	sp, #48	; 0x30
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d14a      	bne.n	8005a3a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e043      	b.n	8005a3c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fcf0 	bl	80063ac <UART_Start_Receive_DMA>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80059d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d12c      	bne.n	8005a34 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d125      	bne.n	8005a2e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	617b      	str	r3, [r7, #20]
   return(result);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f043 0310 	orr.w	r3, r3, #16
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	627a      	str	r2, [r7, #36]	; 0x24
 8005a1a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6a39      	ldr	r1, [r7, #32]
 8005a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005a2c:	e002      	b.n	8005a34 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a38:	e000      	b.n	8005a3c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3730      	adds	r7, #48	; 0x30
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b09a      	sub	sp, #104	; 0x68
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a62:	667b      	str	r3, [r7, #100]	; 0x64
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a6c:	657a      	str	r2, [r7, #84]	; 0x54
 8005a6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	663b      	str	r3, [r7, #96]	; 0x60
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3314      	adds	r3, #20
 8005a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aa0:	643a      	str	r2, [r7, #64]	; 0x40
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e5      	bne.n	8005a80 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d119      	bne.n	8005af0 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d036      	beq.n	8005b6c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3314      	adds	r3, #20
 8005b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b1e:	61ba      	str	r2, [r7, #24]
 8005b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6979      	ldr	r1, [r7, #20]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	2200      	movs	r2, #0
 8005b40:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fc fe90 	bl	800286c <HAL_DMA_Abort>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd f84f 	bl	8002bfa <HAL_DMA_GetError>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d104      	bne.n	8005b6c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2210      	movs	r2, #16
 8005b66:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e00a      	b.n	8005b82 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3768      	adds	r7, #104	; 0x68
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b0ba      	sub	sp, #232	; 0xe8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d009      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x66>
 8005bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fd7c 	bl	80066e8 <UART_Receive_IT>
      return;
 8005bf0:	e25b      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80de 	beq.w	8005db8 <HAL_UART_IRQHandler+0x22c>
 8005bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80d1 	beq.w	8005db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_UART_IRQHandler+0xae>
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <HAL_UART_IRQHandler+0xd2>
 8005c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	f043 0202 	orr.w	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <HAL_UART_IRQHandler+0xf6>
 8005c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	f043 0204 	orr.w	r2, r3, #4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d011      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x126>
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f043 0208 	orr.w	r2, r3, #8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 81f2 	beq.w	80060a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d008      	beq.n	8005cda <HAL_UART_IRQHandler+0x14e>
 8005cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fd07 	bl	80066e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_UART_IRQHandler+0x17a>
 8005cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04f      	beq.n	8005da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fc11 	bl	800652e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d041      	beq.n	8005d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3314      	adds	r3, #20
 8005d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1d9      	bne.n	8005d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d013      	beq.n	8005d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	4a7e      	ldr	r2, [pc, #504]	; (8005f6c <HAL_UART_IRQHandler+0x3e0>)
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fc fdb2 	bl	80028e4 <HAL_DMA_Abort_IT>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d016      	beq.n	8005db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e00e      	b.n	8005db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f993 	bl	80060c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e00a      	b.n	8005db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f98f 	bl	80060c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	e006      	b.n	8005db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f98b 	bl	80060c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005db2:	e175      	b.n	80060a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	bf00      	nop
    return;
 8005db6:	e173      	b.n	80060a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	f040 814f 	bne.w	8006060 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8148 	beq.w	8006060 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8141 	beq.w	8006060 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80b6 	beq.w	8005f70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8145 	beq.w	80060a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e22:	429a      	cmp	r2, r3
 8005e24:	f080 813e 	bcs.w	80060a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	f000 8088 	beq.w	8005f4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1d9      	bne.n	8005e3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3314      	adds	r3, #20
 8005e8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e1      	bne.n	8005e88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ee8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005eee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ef0:	e841 2300 	strex	r3, r2, [r1]
 8005ef4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e3      	bne.n	8005ec4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1c:	f023 0310 	bic.w	r3, r3, #16
 8005f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e3      	bne.n	8005f0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fc fc90 	bl	800286c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fa fde2 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f68:	e09c      	b.n	80060a4 <HAL_UART_IRQHandler+0x518>
 8005f6a:	bf00      	nop
 8005f6c:	080065f3 	.word	0x080065f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 808e 	beq.w	80060a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8089 	beq.w	80060a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fba:	647a      	str	r2, [r7, #68]	; 0x44
 8005fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	617b      	str	r3, [r7, #20]
   return(result);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fa fd67 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800605e:	e023      	b.n	80060a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d009      	beq.n	8006080 <HAL_UART_IRQHandler+0x4f4>
 800606c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 face 	bl	800661a <UART_Transmit_IT>
    return;
 800607e:	e014      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <HAL_UART_IRQHandler+0x51e>
 800608c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fb0d 	bl	80066b8 <UART_EndTransmit_IT>
    return;
 800609e:	e004      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
    return;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
      return;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <HAL_UART_IRQHandler+0x51e>
      return;
 80060a8:	bf00      	nop
  }
}
 80060aa:	37e8      	adds	r7, #232	; 0xe8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b09c      	sub	sp, #112	; 0x70
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d172      	bne.n	80061d6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80060f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f2:	2200      	movs	r2, #0
 80060f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800610c:	66bb      	str	r3, [r7, #104]	; 0x68
 800610e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	330c      	adds	r3, #12
 8006114:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006116:	65ba      	str	r2, [r7, #88]	; 0x58
 8006118:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800611c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	667b      	str	r3, [r7, #100]	; 0x64
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800614a:	647a      	str	r2, [r7, #68]	; 0x44
 800614c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	623b      	str	r3, [r7, #32]
   return(result);
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	663b      	str	r3, [r7, #96]	; 0x60
 8006176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3314      	adds	r3, #20
 800617c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800617e:	633a      	str	r2, [r7, #48]	; 0x30
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006194:	2220      	movs	r2, #32
 8006196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d119      	bne.n	80061d6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	330c      	adds	r3, #12
 80061a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 0310 	bic.w	r3, r3, #16
 80061b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061c2:	61fa      	str	r2, [r7, #28]
 80061c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	69b9      	ldr	r1, [r7, #24]
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	617b      	str	r3, [r7, #20]
   return(result);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d8:	2200      	movs	r2, #0
 80061da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d106      	bne.n	80061f2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061e8:	4619      	mov	r1, r3
 80061ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061ec:	f7fa fc9e 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061f0:	e002      	b.n	80061f8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80061f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061f4:	f7fa fc76 	bl	8000ae4 <HAL_UART_RxCpltCallback>
}
 80061f8:	bf00      	nop
 80061fa:	3770      	adds	r7, #112	; 0x70
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	2b01      	cmp	r3, #1
 800621a:	d108      	bne.n	800622e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	b29b      	uxth	r3, r3
 8006224:	4619      	mov	r1, r3
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7fa fc80 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800622c:	e002      	b.n	8006234 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff ff3e 	bl	80060b0 <HAL_UART_RxHalfCpltCallback>
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b21      	cmp	r3, #33	; 0x21
 800626e:	d108      	bne.n	8006282 <UART_DMAError+0x46>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800627c:	68b8      	ldr	r0, [r7, #8]
 800627e:	f000 f92f 	bl	80064e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b22      	cmp	r3, #34	; 0x22
 80062a2:	d108      	bne.n	80062b6 <UART_DMAError+0x7a>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062b0:	68b8      	ldr	r0, [r7, #8]
 80062b2:	f000 f93c 	bl	800652e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f043 0210 	orr.w	r2, r3, #16
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c2:	68b8      	ldr	r0, [r7, #8]
 80062c4:	f7ff fefd 	bl	80060c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b090      	sub	sp, #64	; 0x40
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e0:	e050      	b.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d04c      	beq.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
 80062f0:	f7fb f8d2 	bl	8001498 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d241      	bcs.n	8006384 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006320:	637a      	str	r2, [r7, #52]	; 0x34
 8006322:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e5      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3314      	adds	r3, #20
 800633a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	613b      	str	r3, [r7, #16]
   return(result);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006354:	623a      	str	r2, [r7, #32]
 8006356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	6a3a      	ldr	r2, [r7, #32]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	61bb      	str	r3, [r7, #24]
   return(result);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e00f      	b.n	80063a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4013      	ands	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d09f      	beq.n	80062e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3740      	adds	r7, #64	; 0x40
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b098      	sub	sp, #96	; 0x60
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2222      	movs	r2, #34	; 0x22
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	4a3e      	ldr	r2, [pc, #248]	; (80064d4 <UART_Start_Receive_DMA+0x128>)
 80063da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e0:	4a3d      	ldr	r2, [pc, #244]	; (80064d8 <UART_Start_Receive_DMA+0x12c>)
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	4a3c      	ldr	r2, [pc, #240]	; (80064dc <UART_Start_Receive_DMA+0x130>)
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	2200      	movs	r2, #0
 80063f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	f7fc f9ce 	bl	80027ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d019      	beq.n	8006462 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006444:	65bb      	str	r3, [r7, #88]	; 0x58
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800644e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006450:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800645c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e5      	bne.n	800642e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	657b      	str	r3, [r7, #84]	; 0x54
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3314      	adds	r3, #20
 8006480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006482:	63ba      	str	r2, [r7, #56]	; 0x38
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	617b      	str	r3, [r7, #20]
   return(result);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064b6:	627a      	str	r2, [r7, #36]	; 0x24
 80064b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6a39      	ldr	r1, [r7, #32]
 80064bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3760      	adds	r7, #96	; 0x60
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	080060d5 	.word	0x080060d5
 80064d8:	08006201 	.word	0x08006201
 80064dc:	0800623d 	.word	0x0800623d

080064e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b089      	sub	sp, #36	; 0x24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	61ba      	str	r2, [r7, #24]
 800650a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6979      	ldr	r1, [r7, #20]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	613b      	str	r3, [r7, #16]
   return(result);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e5      	bne.n	80064e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006524:	bf00      	nop
 8006526:	3724      	adds	r7, #36	; 0x24
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800652e:	b480      	push	{r7}
 8006530:	b095      	sub	sp, #84	; 0x54
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006556:	643a      	str	r2, [r7, #64]	; 0x40
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800655c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e5      	bne.n	8006536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	61fb      	str	r3, [r7, #28]
   return(result);
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	64bb      	str	r3, [r7, #72]	; 0x48
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800658a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800658c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d119      	bne.n	80065da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f023 0310 	bic.w	r3, r3, #16
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065c6:	61ba      	str	r2, [r7, #24]
 80065c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6979      	ldr	r1, [r7, #20]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	613b      	str	r3, [r7, #16]
   return(result);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065e8:	bf00      	nop
 80065ea:	3754      	adds	r7, #84	; 0x54
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fd58 	bl	80060c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b21      	cmp	r3, #33	; 0x21
 800662c:	d13e      	bne.n	80066ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	d114      	bne.n	8006662 <UART_Transmit_IT+0x48>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d110      	bne.n	8006662 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006654:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	1c9a      	adds	r2, r3, #2
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	621a      	str	r2, [r3, #32]
 8006660:	e008      	b.n	8006674 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6211      	str	r1, [r2, #32]
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4619      	mov	r1, r3
 8006682:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10f      	bne.n	80066a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006696:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	e000      	b.n	80066ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066ac:	2302      	movs	r3, #2
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fa fa15 	bl	8000b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b22      	cmp	r3, #34	; 0x22
 80066fa:	f040 80ae 	bne.w	800685a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006706:	d117      	bne.n	8006738 <UART_Receive_IT+0x50>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d113      	bne.n	8006738 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	b29a      	uxth	r2, r3
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	1c9a      	adds	r2, r3, #2
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
 8006736:	e026      	b.n	8006786 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d007      	beq.n	800675c <UART_Receive_IT+0x74>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <UART_Receive_IT+0x82>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e008      	b.n	800677c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006776:	b2da      	uxtb	r2, r3
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29b      	uxth	r3, r3
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4619      	mov	r1, r3
 8006794:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006796:	2b00      	cmp	r3, #0
 8006798:	d15d      	bne.n	8006856 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0220 	bic.w	r2, r2, #32
 80067a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d135      	bne.n	800684c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f023 0310 	bic.w	r3, r3, #16
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	330c      	adds	r3, #12
 8006804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006806:	623a      	str	r2, [r7, #32]
 8006808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	69f9      	ldr	r1, [r7, #28]
 800680c:	6a3a      	ldr	r2, [r7, #32]
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	61bb      	str	r3, [r7, #24]
   return(result);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b10      	cmp	r3, #16
 8006826:	d10a      	bne.n	800683e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fa f971 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
 800684a:	e002      	b.n	8006852 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fa f949 	bl	8000ae4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e002      	b.n	800685c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800685a:	2302      	movs	r3, #2
  }
}
 800685c:	4618      	mov	r0, r3
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800689e:	f023 030c 	bic.w	r3, r3, #12
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	430b      	orrs	r3, r1
 80068aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2c      	ldr	r2, [pc, #176]	; (8006978 <UART_SetConfig+0x114>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80068cc:	f7fe ff58 	bl	8005780 <HAL_RCC_GetPCLK2Freq>
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	e002      	b.n	80068da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80068d4:	f7fe ff40 	bl	8005758 <HAL_RCC_GetPCLK1Freq>
 80068d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009a      	lsls	r2, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	4a22      	ldr	r2, [pc, #136]	; (800697c <UART_SetConfig+0x118>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	0119      	lsls	r1, r3, #4
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009a      	lsls	r2, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006910:	4b1a      	ldr	r3, [pc, #104]	; (800697c <UART_SetConfig+0x118>)
 8006912:	fba3 0302 	umull	r0, r3, r3, r2
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2064      	movs	r0, #100	; 0x64
 800691a:	fb00 f303 	mul.w	r3, r0, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	3332      	adds	r3, #50	; 0x32
 8006924:	4a15      	ldr	r2, [pc, #84]	; (800697c <UART_SetConfig+0x118>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006930:	4419      	add	r1, r3
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009a      	lsls	r2, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	fbb2 f2f3 	udiv	r2, r2, r3
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <UART_SetConfig+0x118>)
 800694a:	fba3 0302 	umull	r0, r3, r3, r2
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2064      	movs	r0, #100	; 0x64
 8006952:	fb00 f303 	mul.w	r3, r0, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	3332      	adds	r3, #50	; 0x32
 800695c:	4a07      	ldr	r2, [pc, #28]	; (800697c <UART_SetConfig+0x118>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	f003 020f 	and.w	r2, r3, #15
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	440a      	add	r2, r1
 800696e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40013800 	.word	0x40013800
 800697c:	51eb851f 	.word	0x51eb851f

08006980 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006986:	f3ef 8305 	mrs	r3, IPSR
 800698a:	60bb      	str	r3, [r7, #8]
  return(result);
 800698c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10f      	bne.n	80069b2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006992:	f3ef 8310 	mrs	r3, PRIMASK
 8006996:	607b      	str	r3, [r7, #4]
  return(result);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <osKernelInitialize+0x32>
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <osKernelInitialize+0x60>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d109      	bne.n	80069ba <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069a6:	f3ef 8311 	mrs	r3, BASEPRI
 80069aa:	603b      	str	r3, [r7, #0]
  return(result);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80069b2:	f06f 0305 	mvn.w	r3, #5
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e00c      	b.n	80069d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <osKernelInitialize+0x60>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d105      	bne.n	80069ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <osKernelInitialize+0x60>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	e002      	b.n	80069d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295
 80069d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	20000798 	.word	0x20000798

080069e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ea:	f3ef 8305 	mrs	r3, IPSR
 80069ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80069f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10f      	bne.n	8006a16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f6:	f3ef 8310 	mrs	r3, PRIMASK
 80069fa:	607b      	str	r3, [r7, #4]
  return(result);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <osKernelStart+0x32>
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <osKernelStart+0x64>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d109      	bne.n	8006a1e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a16:	f06f 0305 	mvn.w	r3, #5
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e00e      	b.n	8006a3c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <osKernelStart+0x64>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006a26:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <osKernelStart+0x64>)
 8006a28:	2202      	movs	r2, #2
 8006a2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006a2c:	f002 fdc4 	bl	80095b8 <vTaskStartScheduler>
      stat = osOK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
 8006a34:	e002      	b.n	8006a3c <osKernelStart+0x58>
    } else {
      stat = osError;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20000798 	.word	0x20000798

08006a4c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a52:	f3ef 8305 	mrs	r3, IPSR
 8006a56:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a58:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10f      	bne.n	8006a7e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a62:	607b      	str	r3, [r7, #4]
  return(result);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <osKernelGetTickCount+0x32>
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <osKernelGetTickCount+0x4c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d109      	bne.n	8006a86 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a72:	f3ef 8311 	mrs	r3, BASEPRI
 8006a76:	603b      	str	r3, [r7, #0]
  return(result);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006a7e:	f002 fec5 	bl	800980c <xTaskGetTickCountFromISR>
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	e002      	b.n	8006a8c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006a86:	f002 feb3 	bl	80097f0 <xTaskGetTickCount>
 8006a8a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000798 	.word	0x20000798

08006a9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b092      	sub	sp, #72	; 0x48
 8006aa0:	af04      	add	r7, sp, #16
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aac:	f3ef 8305 	mrs	r3, IPSR
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f040 8094 	bne.w	8006be2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aba:	f3ef 8310 	mrs	r3, PRIMASK
 8006abe:	623b      	str	r3, [r7, #32]
  return(result);
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f040 808d 	bne.w	8006be2 <osThreadNew+0x146>
 8006ac8:	4b48      	ldr	r3, [pc, #288]	; (8006bec <osThreadNew+0x150>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d106      	bne.n	8006ade <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 8082 	bne.w	8006be2 <osThreadNew+0x146>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d07e      	beq.n	8006be2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006ae8:	2318      	movs	r3, #24
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006aec:	2300      	movs	r3, #0
 8006aee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006af0:	f107 031b 	add.w	r3, r7, #27
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006af6:	f04f 33ff 	mov.w	r3, #4294967295
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d045      	beq.n	8006b8e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <osThreadNew+0x74>
        name = attr->name;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <osThreadNew+0x9a>
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	2b38      	cmp	r3, #56	; 0x38
 8006b28:	d805      	bhi.n	8006b36 <osThreadNew+0x9a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <osThreadNew+0x9e>
        return (NULL);
 8006b36:	2300      	movs	r3, #0
 8006b38:	e054      	b.n	8006be4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	089b      	lsrs	r3, r3, #2
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <osThreadNew+0xd4>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2ba7      	cmp	r3, #167	; 0xa7
 8006b58:	d90a      	bls.n	8006b70 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <osThreadNew+0xd4>
        mem = 1;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b6e:	e010      	b.n	8006b92 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10c      	bne.n	8006b92 <osThreadNew+0xf6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d108      	bne.n	8006b92 <osThreadNew+0xf6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d104      	bne.n	8006b92 <osThreadNew+0xf6>
          mem = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8c:	e001      	b.n	8006b92 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d110      	bne.n	8006bba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ba0:	9202      	str	r2, [sp, #8]
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f002 f96e 	bl	8008e90 <xTaskCreateStatic>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e013      	b.n	8006be2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d110      	bne.n	8006be2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f002 f9b8 	bl	8008f48 <xTaskCreate>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d001      	beq.n	8006be2 <osThreadNew+0x146>
          hTask = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006be2:	697b      	ldr	r3, [r7, #20]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3738      	adds	r7, #56	; 0x38
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20000798 	.word	0x20000798

08006bf0 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bfe:	f3ef 8305 	mrs	r3, IPSR
 8006c02:	617b      	str	r3, [r7, #20]
  return(result);
 8006c04:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10f      	bne.n	8006c2a <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0e:	613b      	str	r3, [r7, #16]
  return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <osThreadSetPriority+0x3a>
 8006c16:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <osThreadSetPriority+0x74>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d109      	bne.n	8006c32 <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c22:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8006c2a:	f06f 0305 	mvn.w	r3, #5
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	e013      	b.n	8006c5a <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <osThreadSetPriority+0x54>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	dd02      	ble.n	8006c44 <osThreadSetPriority+0x54>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b38      	cmp	r3, #56	; 0x38
 8006c42:	dd03      	ble.n	8006c4c <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8006c44:	f06f 0303 	mvn.w	r3, #3
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	e006      	b.n	8006c5a <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	69b8      	ldr	r0, [r7, #24]
 8006c56:	f002 faff 	bl	8009258 <vTaskPrioritySet>
  }

  return (stat);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000798 	.word	0x20000798

08006c68 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b088      	sub	sp, #32
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c74:	f3ef 8305 	mrs	r3, IPSR
 8006c78:	617b      	str	r3, [r7, #20]
  return(result);
 8006c7a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10f      	bne.n	8006ca0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c80:	f3ef 8310 	mrs	r3, PRIMASK
 8006c84:	613b      	str	r3, [r7, #16]
  return(result);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <osThreadSuspend+0x38>
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <osThreadSuspend+0x64>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d109      	bne.n	8006ca8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c94:	f3ef 8311 	mrs	r3, BASEPRI
 8006c98:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8006ca0:	f06f 0305 	mvn.w	r3, #5
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e00b      	b.n	8006cc0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8006cae:	f06f 0303 	mvn.w	r3, #3
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	e004      	b.n	8006cc0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8006cba:	69b8      	ldr	r0, [r7, #24]
 8006cbc:	f002 fb6e 	bl	800939c <vTaskSuspend>
  }

  return (stat);
 8006cc0:	69fb      	ldr	r3, [r7, #28]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000798 	.word	0x20000798

08006cd0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cdc:	f3ef 8305 	mrs	r3, IPSR
 8006ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10f      	bne.n	8006d08 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	613b      	str	r3, [r7, #16]
  return(result);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d109      	bne.n	8006d08 <osThreadResume+0x38>
 8006cf4:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <osThreadResume+0x64>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d109      	bne.n	8006d10 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8006d00:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <osThreadResume+0x40>
    stat = osErrorISR;
 8006d08:	f06f 0305 	mvn.w	r3, #5
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e00b      	b.n	8006d28 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8006d16:	f06f 0303 	mvn.w	r3, #3
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e004      	b.n	8006d28 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8006d22:	69b8      	ldr	r0, [r7, #24]
 8006d24:	f002 fbea 	bl	80094fc <vTaskResume>
  }

  return (stat);
 8006d28:	69fb      	ldr	r3, [r7, #28]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000798 	.word	0x20000798

08006d38 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d40:	f3ef 8305 	mrs	r3, IPSR
 8006d44:	613b      	str	r3, [r7, #16]
  return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10f      	bne.n	8006d6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <osDelay+0x34>
 8006d58:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <osDelay+0x58>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d109      	bne.n	8006d74 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d60:	f3ef 8311 	mrs	r3, BASEPRI
 8006d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <osDelay+0x3c>
    stat = osErrorISR;
 8006d6c:	f06f 0305 	mvn.w	r3, #5
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e007      	b.n	8006d84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f002 fa36 	bl	80091f0 <vTaskDelay>
    }
  }

  return (stat);
 8006d84:	697b      	ldr	r3, [r7, #20]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000798 	.word	0x20000798

08006d94 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da0:	f3ef 8305 	mrs	r3, IPSR
 8006da4:	617b      	str	r3, [r7, #20]
  return(result);
 8006da6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d13d      	bne.n	8006e28 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dac:	f3ef 8310 	mrs	r3, PRIMASK
 8006db0:	613b      	str	r3, [r7, #16]
  return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d137      	bne.n	8006e28 <osEventFlagsNew+0x94>
 8006db8:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <osEventFlagsNew+0xa0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d105      	bne.n	8006dcc <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d12d      	bne.n	8006e28 <osEventFlagsNew+0x94>
    mem = -1;
 8006dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d015      	beq.n	8006e04 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <osEventFlagsNew+0x5a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	2b1f      	cmp	r3, #31
 8006de6:	d902      	bls.n	8006dee <osEventFlagsNew+0x5a>
        mem = 1;
 8006de8:	2301      	movs	r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	e00c      	b.n	8006e08 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d108      	bne.n	8006e08 <osEventFlagsNew+0x74>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <osEventFlagsNew+0x74>
          mem = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	e001      	b.n	8006e08 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d106      	bne.n	8006e1c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fc26 	bl	8007664 <xEventGroupCreateStatic>
 8006e18:	61f8      	str	r0, [r7, #28]
 8006e1a:	e005      	b.n	8006e28 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006e22:	f000 fc56 	bl	80076d2 <xEventGroupCreate>
 8006e26:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006e28:	69fb      	ldr	r3, [r7, #28]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3720      	adds	r7, #32
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000798 	.word	0x20000798

08006e38 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <osEventFlagsSet+0x1e>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006e56:	f06f 0303 	mvn.w	r3, #3
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	e03a      	b.n	8006ed4 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e5e:	f3ef 8305 	mrs	r3, IPSR
 8006e62:	617b      	str	r3, [r7, #20]
  return(result);
 8006e64:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10f      	bne.n	8006e8a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6e:	613b      	str	r3, [r7, #16]
  return(result);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <osEventFlagsSet+0x52>
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <osEventFlagsSet+0xa8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d123      	bne.n	8006ec6 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01d      	beq.n	8006ec6 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	461a      	mov	r2, r3
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	69b8      	ldr	r0, [r7, #24]
 8006e98:	f000 fe3a 	bl	8007b10 <xEventGroupSetBitsFromISR>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006ea2:	f06f 0302 	mvn.w	r3, #2
 8006ea6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ea8:	e013      	b.n	8006ed2 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00e      	beq.n	8006ed2 <osEventFlagsSet+0x9a>
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <osEventFlagsSet+0xac>)
 8006eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ec4:	e005      	b.n	8006ed2 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	69b8      	ldr	r0, [r7, #24]
 8006eca:	f000 fd5a 	bl	8007982 <xEventGroupSetBits>
 8006ece:	61f8      	str	r0, [r7, #28]
 8006ed0:	e000      	b.n	8006ed4 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ed2:	bf00      	nop
  }

  return (rflags);
 8006ed4:	69fb      	ldr	r3, [r7, #28]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000798 	.word	0x20000798
 8006ee4:	e000ed04 	.word	0xe000ed04

08006ee8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <osEventFlagsClear+0x1e>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006f06:	f06f 0303 	mvn.w	r3, #3
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e029      	b.n	8006f62 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f0e:	f3ef 8305 	mrs	r3, IPSR
 8006f12:	617b      	str	r3, [r7, #20]
  return(result);
 8006f14:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10f      	bne.n	8006f3a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1e:	613b      	str	r3, [r7, #16]
  return(result);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <osEventFlagsClear+0x52>
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <osEventFlagsClear+0x84>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d114      	bne.n	8006f58 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00e      	beq.n	8006f58 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006f3a:	69b8      	ldr	r0, [r7, #24]
 8006f3c:	f000 fcfe 	bl	800793c <xEventGroupGetBitsFromISR>
 8006f40:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	69b8      	ldr	r0, [r7, #24]
 8006f46:	f000 fce5 	bl	8007914 <xEventGroupClearBitsFromISR>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8006f50:	f06f 0302 	mvn.w	r3, #2
 8006f54:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006f56:	e004      	b.n	8006f62 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	69b8      	ldr	r0, [r7, #24]
 8006f5c:	f000 fca2 	bl	80078a4 <xEventGroupClearBits>
 8006f60:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8006f62:	69fb      	ldr	r3, [r7, #28]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	20000798 	.word	0x20000798

08006f70 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08e      	sub	sp, #56	; 0x38
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <osEventFlagsWait+0x22>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006f92:	f06f 0303 	mvn.w	r3, #3
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
 8006f98:	e059      	b.n	800704e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f9a:	f3ef 8305 	mrs	r3, IPSR
 8006f9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006fa0:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10f      	bne.n	8006fc6 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8006faa:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <osEventFlagsWait+0x56>
 8006fb2:	4b29      	ldr	r3, [pc, #164]	; (8007058 <osEventFlagsWait+0xe8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d109      	bne.n	8006fce <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fba:	f3ef 8311 	mrs	r3, BASEPRI
 8006fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8006fc6:	f06f 0305 	mvn.w	r3, #5
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
 8006fcc:	e03f      	b.n	800704e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fdc:	e001      	b.n	8006fe2 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff0:	e001      	b.n	8006ff6 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	6a38      	ldr	r0, [r7, #32]
 8007002:	f000 fb81 	bl	8007708 <xEventGroupWaitBits>
 8007006:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00e      	beq.n	8007030 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	429a      	cmp	r2, r3
 8007018:	d019      	beq.n	800704e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8007020:	f06f 0301 	mvn.w	r3, #1
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
 8007026:	e012      	b.n	800704e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007028:	f06f 0302 	mvn.w	r3, #2
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	e00e      	b.n	800704e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	4013      	ands	r3, r2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8007040:	f06f 0301 	mvn.w	r3, #1
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
 8007046:	e002      	b.n	800704e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007048:	f06f 0302 	mvn.w	r3, #2
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007050:	4618      	mov	r0, r3
 8007052:	3730      	adds	r7, #48	; 0x30
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000798 	.word	0x20000798

0800705c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	; 0x28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007068:	f3ef 8305 	mrs	r3, IPSR
 800706c:	613b      	str	r3, [r7, #16]
  return(result);
 800706e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 8085 	bne.w	8007180 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007076:	f3ef 8310 	mrs	r3, PRIMASK
 800707a:	60fb      	str	r3, [r7, #12]
  return(result);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d17e      	bne.n	8007180 <osMutexNew+0x124>
 8007082:	4b42      	ldr	r3, [pc, #264]	; (800718c <osMutexNew+0x130>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d105      	bne.n	8007096 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800708a:	f3ef 8311 	mrs	r3, BASEPRI
 800708e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d174      	bne.n	8007180 <osMutexNew+0x124>
    if (attr != NULL) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	e001      	b.n	80070a8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <osMutexNew+0x5c>
      rmtx = 1U;
 80070b2:	2301      	movs	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	e001      	b.n	80070bc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d15c      	bne.n	8007180 <osMutexNew+0x124>
      mem = -1;
 80070c6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ca:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d015      	beq.n	80070fe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d006      	beq.n	80070e8 <osMutexNew+0x8c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2b4f      	cmp	r3, #79	; 0x4f
 80070e0:	d902      	bls.n	80070e8 <osMutexNew+0x8c>
          mem = 1;
 80070e2:	2301      	movs	r3, #1
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	e00c      	b.n	8007102 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d108      	bne.n	8007102 <osMutexNew+0xa6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <osMutexNew+0xa6>
            mem = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e001      	b.n	8007102 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d112      	bne.n	800712e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4619      	mov	r1, r3
 8007114:	2004      	movs	r0, #4
 8007116:	f000 ff31 	bl	8007f7c <xQueueCreateMutexStatic>
 800711a:	6278      	str	r0, [r7, #36]	; 0x24
 800711c:	e016      	b.n	800714c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	4619      	mov	r1, r3
 8007124:	2001      	movs	r0, #1
 8007126:	f000 ff29 	bl	8007f7c <xQueueCreateMutexStatic>
 800712a:	6278      	str	r0, [r7, #36]	; 0x24
 800712c:	e00e      	b.n	800714c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800713a:	2004      	movs	r0, #4
 800713c:	f000 ff06 	bl	8007f4c <xQueueCreateMutex>
 8007140:	6278      	str	r0, [r7, #36]	; 0x24
 8007142:	e003      	b.n	800714c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007144:	2001      	movs	r0, #1
 8007146:	f000 ff01 	bl	8007f4c <xQueueCreateMutex>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00c      	beq.n	800716c <osMutexNew+0x110>
        if (attr != NULL) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <osMutexNew+0x104>
          name = attr->name;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	e001      	b.n	8007164 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007164:	6979      	ldr	r1, [r7, #20]
 8007166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007168:	f001 fe0c 	bl	8008d84 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d006      	beq.n	8007180 <osMutexNew+0x124>
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000798 	.word	0x20000798

08007190 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ae:	f3ef 8305 	mrs	r3, IPSR
 80071b2:	613b      	str	r3, [r7, #16]
  return(result);
 80071b4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10f      	bne.n	80071da <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ba:	f3ef 8310 	mrs	r3, PRIMASK
 80071be:	60fb      	str	r3, [r7, #12]
  return(result);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <osMutexAcquire+0x4a>
 80071c6:	4b20      	ldr	r3, [pc, #128]	; (8007248 <osMutexAcquire+0xb8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d109      	bne.n	80071e2 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071ce:	f3ef 8311 	mrs	r3, BASEPRI
 80071d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80071da:	f06f 0305 	mvn.w	r3, #5
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	e02c      	b.n	800723c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d103      	bne.n	80071f0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80071e8:	f06f 0303 	mvn.w	r3, #3
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e025      	b.n	800723c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d011      	beq.n	800721a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	69b8      	ldr	r0, [r7, #24]
 80071fa:	f000 ff0e 	bl	800801a <xQueueTakeMutexRecursive>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b01      	cmp	r3, #1
 8007202:	d01b      	beq.n	800723c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800720a:	f06f 0301 	mvn.w	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e014      	b.n	800723c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007212:	f06f 0302 	mvn.w	r3, #2
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	e010      	b.n	800723c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	69b8      	ldr	r0, [r7, #24]
 800721e:	f001 faa1 	bl	8008764 <xQueueSemaphoreTake>
 8007222:	4603      	mov	r3, r0
 8007224:	2b01      	cmp	r3, #1
 8007226:	d009      	beq.n	800723c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800722e:	f06f 0301 	mvn.w	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	e002      	b.n	800723c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007236:	f06f 0302 	mvn.w	r3, #2
 800723a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800723c:	69fb      	ldr	r3, [r7, #28]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000798 	.word	0x20000798

0800724c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007268:	f3ef 8305 	mrs	r3, IPSR
 800726c:	613b      	str	r3, [r7, #16]
  return(result);
 800726e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007274:	f3ef 8310 	mrs	r3, PRIMASK
 8007278:	60fb      	str	r3, [r7, #12]
  return(result);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <osMutexRelease+0x48>
 8007280:	4b19      	ldr	r3, [pc, #100]	; (80072e8 <osMutexRelease+0x9c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b02      	cmp	r3, #2
 8007286:	d109      	bne.n	800729c <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007288:	f3ef 8311 	mrs	r3, BASEPRI
 800728c:	60bb      	str	r3, [r7, #8]
  return(result);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <osMutexRelease+0x50>
    stat = osErrorISR;
 8007294:	f06f 0305 	mvn.w	r3, #5
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	e01f      	b.n	80072dc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d103      	bne.n	80072aa <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80072a2:	f06f 0303 	mvn.w	r3, #3
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	e018      	b.n	80072dc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80072b0:	69b8      	ldr	r0, [r7, #24]
 80072b2:	f000 fe7e 	bl	8007fb2 <xQueueGiveMutexRecursive>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d00f      	beq.n	80072dc <osMutexRelease+0x90>
        stat = osErrorResource;
 80072bc:	f06f 0302 	mvn.w	r3, #2
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e00b      	b.n	80072dc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80072c4:	2300      	movs	r3, #0
 80072c6:	2200      	movs	r2, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	69b8      	ldr	r0, [r7, #24]
 80072cc:	f000 ff46 	bl	800815c <xQueueGenericSend>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d002      	beq.n	80072dc <osMutexRelease+0x90>
        stat = osErrorResource;
 80072d6:	f06f 0302 	mvn.w	r3, #2
 80072da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80072dc:	69fb      	ldr	r3, [r7, #28]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000798 	.word	0x20000798

080072ec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08c      	sub	sp, #48	; 0x30
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fc:	f3ef 8305 	mrs	r3, IPSR
 8007300:	61bb      	str	r3, [r7, #24]
  return(result);
 8007302:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007304:	2b00      	cmp	r3, #0
 8007306:	f040 8086 	bne.w	8007416 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730a:	f3ef 8310 	mrs	r3, PRIMASK
 800730e:	617b      	str	r3, [r7, #20]
  return(result);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d17f      	bne.n	8007416 <osSemaphoreNew+0x12a>
 8007316:	4b42      	ldr	r3, [pc, #264]	; (8007420 <osSemaphoreNew+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d105      	bne.n	800732a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800731e:	f3ef 8311 	mrs	r3, BASEPRI
 8007322:	613b      	str	r3, [r7, #16]
  return(result);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d175      	bne.n	8007416 <osSemaphoreNew+0x12a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d072      	beq.n	8007416 <osSemaphoreNew+0x12a>
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d86e      	bhi.n	8007416 <osSemaphoreNew+0x12a>
    mem = -1;
 8007338:	f04f 33ff 	mov.w	r3, #4294967295
 800733c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d015      	beq.n	8007370 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d006      	beq.n	800735a <osSemaphoreNew+0x6e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b4f      	cmp	r3, #79	; 0x4f
 8007352:	d902      	bls.n	800735a <osSemaphoreNew+0x6e>
        mem = 1;
 8007354:	2301      	movs	r3, #1
 8007356:	623b      	str	r3, [r7, #32]
 8007358:	e00c      	b.n	8007374 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d108      	bne.n	8007374 <osSemaphoreNew+0x88>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <osSemaphoreNew+0x88>
          mem = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	e001      	b.n	8007374 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d04c      	beq.n	8007416 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d128      	bne.n	80073d4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10a      	bne.n	800739e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2203      	movs	r2, #3
 800738e:	9200      	str	r2, [sp, #0]
 8007390:	2200      	movs	r2, #0
 8007392:	2100      	movs	r1, #0
 8007394:	2001      	movs	r0, #1
 8007396:	f000 fce7 	bl	8007d68 <xQueueGenericCreateStatic>
 800739a:	6278      	str	r0, [r7, #36]	; 0x24
 800739c:	e005      	b.n	80073aa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800739e:	2203      	movs	r2, #3
 80073a0:	2100      	movs	r1, #0
 80073a2:	2001      	movs	r0, #1
 80073a4:	f000 fd57 	bl	8007e56 <xQueueGenericCreate>
 80073a8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d022      	beq.n	80073f6 <osSemaphoreNew+0x10a>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01f      	beq.n	80073f6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80073b6:	2300      	movs	r3, #0
 80073b8:	2200      	movs	r2, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073be:	f000 fecd 	bl	800815c <xQueueGenericSend>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d016      	beq.n	80073f6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80073c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ca:	f001 fb90 	bl	8008aee <vQueueDelete>
            hSemaphore = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
 80073d2:	e010      	b.n	80073f6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d108      	bne.n	80073ec <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	461a      	mov	r2, r3
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fe4f 	bl	8008086 <xQueueCreateCountingSemaphoreStatic>
 80073e8:	6278      	str	r0, [r7, #36]	; 0x24
 80073ea:	e004      	b.n	80073f6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fe80 	bl	80080f4 <xQueueCreateCountingSemaphore>
 80073f4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00c      	beq.n	8007416 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <osSemaphoreNew+0x11e>
          name = attr->name;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e001      	b.n	800740e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800740e:	69f9      	ldr	r1, [r7, #28]
 8007410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007412:	f001 fcb7 	bl	8008d84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007418:	4618      	mov	r0, r3
 800741a:	3728      	adds	r7, #40	; 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000798 	.word	0x20000798

08007424 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007432:	2300      	movs	r3, #0
 8007434:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800743c:	f06f 0303 	mvn.w	r3, #3
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	e04b      	b.n	80074dc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007444:	f3ef 8305 	mrs	r3, IPSR
 8007448:	617b      	str	r3, [r7, #20]
  return(result);
 800744a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10f      	bne.n	8007470 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007450:	f3ef 8310 	mrs	r3, PRIMASK
 8007454:	613b      	str	r3, [r7, #16]
  return(result);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <osSemaphoreAcquire+0x4c>
 800745c:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <osSemaphoreAcquire+0xc4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d128      	bne.n	80074b6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007464:	f3ef 8311 	mrs	r3, BASEPRI
 8007468:	60fb      	str	r3, [r7, #12]
  return(result);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d022      	beq.n	80074b6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007476:	f06f 0303 	mvn.w	r3, #3
 800747a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800747c:	e02d      	b.n	80074da <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007482:	f107 0308 	add.w	r3, r7, #8
 8007486:	461a      	mov	r2, r3
 8007488:	2100      	movs	r1, #0
 800748a:	69b8      	ldr	r0, [r7, #24]
 800748c:	f001 fa76 	bl	800897c <xQueueReceiveFromISR>
 8007490:	4603      	mov	r3, r0
 8007492:	2b01      	cmp	r3, #1
 8007494:	d003      	beq.n	800749e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007496:	f06f 0302 	mvn.w	r3, #2
 800749a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800749c:	e01d      	b.n	80074da <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01a      	beq.n	80074da <osSemaphoreAcquire+0xb6>
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <osSemaphoreAcquire+0xc8>)
 80074a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80074b4:	e011      	b.n	80074da <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	69b8      	ldr	r0, [r7, #24]
 80074ba:	f001 f953 	bl	8008764 <xQueueSemaphoreTake>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d00b      	beq.n	80074dc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80074ca:	f06f 0301 	mvn.w	r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e004      	b.n	80074dc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80074d2:	f06f 0302 	mvn.w	r3, #2
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e000      	b.n	80074dc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80074da:	bf00      	nop
      }
    }
  }

  return (stat);
 80074dc:	69fb      	ldr	r3, [r7, #28]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000798 	.word	0x20000798
 80074ec:	e000ed04 	.word	0xe000ed04

080074f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007506:	f06f 0303 	mvn.w	r3, #3
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	e03e      	b.n	800758c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800750e:	f3ef 8305 	mrs	r3, IPSR
 8007512:	617b      	str	r3, [r7, #20]
  return(result);
 8007514:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10f      	bne.n	800753a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751a:	f3ef 8310 	mrs	r3, PRIMASK
 800751e:	613b      	str	r3, [r7, #16]
  return(result);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <osSemaphoreRelease+0x4a>
 8007526:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <osSemaphoreRelease+0xa8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d120      	bne.n	8007570 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800752e:	f3ef 8311 	mrs	r3, BASEPRI
 8007532:	60fb      	str	r3, [r7, #12]
  return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d01a      	beq.n	8007570 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800753e:	f107 0308 	add.w	r3, r7, #8
 8007542:	4619      	mov	r1, r3
 8007544:	69b8      	ldr	r0, [r7, #24]
 8007546:	f000 ff9f 	bl	8008488 <xQueueGiveFromISR>
 800754a:	4603      	mov	r3, r0
 800754c:	2b01      	cmp	r3, #1
 800754e:	d003      	beq.n	8007558 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007550:	f06f 0302 	mvn.w	r3, #2
 8007554:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007556:	e018      	b.n	800758a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <osSemaphoreRelease+0x9a>
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <osSemaphoreRelease+0xac>)
 8007560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800756e:	e00c      	b.n	800758a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007570:	2300      	movs	r3, #0
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	69b8      	ldr	r0, [r7, #24]
 8007578:	f000 fdf0 	bl	800815c <xQueueGenericSend>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d004      	beq.n	800758c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007582:	f06f 0302 	mvn.w	r3, #2
 8007586:	61fb      	str	r3, [r7, #28]
 8007588:	e000      	b.n	800758c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800758a:	bf00      	nop
    }
  }

  return (stat);
 800758c:	69fb      	ldr	r3, [r7, #28]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000798 	.word	0x20000798
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <osSemaphoreGetCount+0x18>
    count = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e01e      	b.n	80075f6 <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b8:	f3ef 8305 	mrs	r3, IPSR
 80075bc:	617b      	str	r3, [r7, #20]
  return(result);
 80075be:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10f      	bne.n	80075e4 <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c4:	f3ef 8310 	mrs	r3, PRIMASK
 80075c8:	613b      	str	r3, [r7, #16]
  return(result);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <osSemaphoreGetCount+0x44>
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <osSemaphoreGetCount+0x60>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d10a      	bne.n	80075ee <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d8:	f3ef 8311 	mrs	r3, BASEPRI
 80075dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80075e4:	69b8      	ldr	r0, [r7, #24]
 80075e6:	f001 fa67 	bl	8008ab8 <uxQueueMessagesWaitingFromISR>
 80075ea:	61f8      	str	r0, [r7, #28]
 80075ec:	e003      	b.n	80075f6 <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80075ee:	69b8      	ldr	r0, [r7, #24]
 80075f0:	f001 fa44 	bl	8008a7c <uxQueueMessagesWaiting>
 80075f4:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 80075f6:	69fb      	ldr	r3, [r7, #28]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000798 	.word	0x20000798

08007604 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a06      	ldr	r2, [pc, #24]	; (800762c <vApplicationGetIdleTaskMemory+0x28>)
 8007614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4a05      	ldr	r2, [pc, #20]	; (8007630 <vApplicationGetIdleTaskMemory+0x2c>)
 800761a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2240      	movs	r2, #64	; 0x40
 8007620:	601a      	str	r2, [r3, #0]
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr
 800762c:	2000079c 	.word	0x2000079c
 8007630:	20000844 	.word	0x20000844

08007634 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a06      	ldr	r2, [pc, #24]	; (800765c <vApplicationGetTimerTaskMemory+0x28>)
 8007644:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4a05      	ldr	r2, [pc, #20]	; (8007660 <vApplicationGetTimerTaskMemory+0x2c>)
 800764a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2240      	movs	r2, #64	; 0x40
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr
 800765c:	20000944 	.word	0x20000944
 8007660:	200009ec 	.word	0x200009ec

08007664 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007688:	2320      	movs	r3, #32
 800768a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b20      	cmp	r3, #32
 8007690:	d00a      	beq.n	80076a8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60fb      	str	r3, [r7, #12]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fa3b 	bl	8007b38 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2201      	movs	r2, #1
 80076c6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80076c8:	697b      	ldr	r3, [r7, #20]
	}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80076d8:	2020      	movs	r0, #32
 80076da:	f003 fbaf 	bl	800ae3c <pvPortMalloc>
 80076de:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fa21 	bl	8007b38 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80076fc:	687b      	ldr	r3, [r7, #4]
	}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b090      	sub	sp, #64	; 0x40
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <xEventGroupWaitBits+0x36>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	623b      	str	r3, [r7, #32]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00a      	beq.n	800775e <xEventGroupWaitBits+0x56>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	61fb      	str	r3, [r7, #28]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xEventGroupWaitBits+0x72>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	61bb      	str	r3, [r7, #24]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800777a:	f002 fc3d 	bl	8009ff8 <xTaskGetSchedulerState>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d102      	bne.n	800778a <xEventGroupWaitBits+0x82>
 8007784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <xEventGroupWaitBits+0x86>
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <xEventGroupWaitBits+0x88>
 800778e:	2300      	movs	r3, #0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	617b      	str	r3, [r7, #20]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80077aa:	f001 ff75 	bl	8009698 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077ba:	f000 f987 	bl	8007acc <prvTestWaitCondition>
 80077be:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00e      	beq.n	80077e4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d028      	beq.n	8007826 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	43db      	mvns	r3, r3
 80077dc:	401a      	ands	r2, r3
 80077de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e020      	b.n	8007826 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80077e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	633b      	str	r3, [r7, #48]	; 0x30
 80077f2:	e018      	b.n	8007826 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007800:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800780e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007812:	1d18      	adds	r0, r3, #4
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	4313      	orrs	r3, r2
 800781a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800781c:	4619      	mov	r1, r3
 800781e:	f002 f94d 	bl	8009abc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007826:	f001 ff45 	bl	80096b4 <xTaskResumeAll>
 800782a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800782c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782e:	2b00      	cmp	r3, #0
 8007830:	d031      	beq.n	8007896 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007838:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <xEventGroupWaitBits+0x198>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007848:	f002 fd56 	bl	800a2f8 <uxTaskResetEventItemValue>
 800784c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11a      	bne.n	800788e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007858:	f003 f9f0 	bl	800ac3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007868:	f000 f930 	bl	8007acc <prvTestWaitCondition>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d006      	beq.n	8007886 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	43db      	mvns	r3, r3
 8007880:	401a      	ands	r2, r3
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800788a:	f003 fa07 	bl	800ac9c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800788e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007890:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007898:	4618      	mov	r0, r3
 800789a:	3740      	adds	r7, #64	; 0x40
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <xEventGroupClearBits+0x2a>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	60fb      	str	r3, [r7, #12]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <xEventGroupClearBits+0x4a>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	60bb      	str	r3, [r7, #8]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80078ee:	f003 f9a5 	bl	800ac3c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	43db      	mvns	r3, r3
 8007900:	401a      	ands	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007906:	f003 f9c9 	bl	800ac9c <vPortExitCritical>

	return uxReturn;
 800790a:	693b      	ldr	r3, [r7, #16]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 800791e:	2300      	movs	r3, #0
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	4804      	ldr	r0, [pc, #16]	; (8007938 <xEventGroupClearBitsFromISR+0x24>)
 8007926:	f003 f879 	bl	800aa1c <xTimerPendFunctionCallFromISR>
 800792a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800792c:	68fb      	ldr	r3, [r7, #12]
	}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	08007ab3 	.word	0x08007ab3

0800793c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800793c:	b480      	push	{r7}
 800793e:	b089      	sub	sp, #36	; 0x24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007948:	f3ef 8211 	mrs	r2, BASEPRI
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60fa      	str	r2, [r7, #12]
 800795e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007960:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007962:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007974:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007976:	697b      	ldr	r3, [r7, #20]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3724      	adds	r7, #36	; 0x24
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b08e      	sub	sp, #56	; 0x38
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800798c:	2300      	movs	r3, #0
 800798e:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <xEventGroupSetBits+0x32>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	613b      	str	r3, [r7, #16]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <xEventGroupSetBits+0x52>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
}
 80079d0:	bf00      	nop
 80079d2:	e7fe      	b.n	80079d2 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	3304      	adds	r3, #4
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	3308      	adds	r3, #8
 80079de:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80079e0:	f001 fe5a 	bl	8009698 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	431a      	orrs	r2, r3
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80079f6:	e03c      	b.n	8007a72 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a0e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a16:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d108      	bne.n	8007a34 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a32:	e008      	b.n	8007a46 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d101      	bne.n	8007a46 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007a42:	2301      	movs	r3, #1
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d010      	beq.n	8007a6e <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a66:	4619      	mov	r1, r3
 8007a68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007a6a:	f002 f8f3 	bl	8009c54 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d1be      	bne.n	80079f8 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	43db      	mvns	r3, r3
 8007a82:	401a      	ands	r2, r3
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007a88:	f001 fe14 	bl	80096b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	681b      	ldr	r3, [r3, #0]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3738      	adds	r7, #56	; 0x38
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff ff6c 	bl	8007982 <xEventGroupSetBits>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff fef0 	bl	80078a4 <xEventGroupClearBits>
}
 8007ac4:	bf00      	nop
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d107      	bne.n	8007af2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e007      	b.n	8007b02 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4013      	ands	r3, r2
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d101      	bne.n	8007b02 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007afe:	2301      	movs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007b02:	697b      	ldr	r3, [r7, #20]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
	...

08007b10 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	68f9      	ldr	r1, [r7, #12]
 8007b22:	4804      	ldr	r0, [pc, #16]	; (8007b34 <xEventGroupSetBitsFromISR+0x24>)
 8007b24:	f002 ff7a 	bl	800aa1c <xTimerPendFunctionCallFromISR>
 8007b28:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007b2a:	697b      	ldr	r3, [r7, #20]
	}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	08007a99 	.word	0x08007a99

08007b38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f103 0208 	add.w	r2, r3, #8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f103 0208 	add.w	r2, r3, #8
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f103 0208 	add.w	r2, r3, #8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	601a      	str	r2, [r3, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d103      	bne.n	8007bf4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e00c      	b.n	8007c0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e002      	b.n	8007c02 <vListInsert+0x2e>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d2f6      	bcs.n	8007bfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	6892      	ldr	r2, [r2, #8]
 8007c5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	6852      	ldr	r2, [r2, #4]
 8007c64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d103      	bne.n	8007c78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	1e5a      	subs	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr
	...

08007c98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	60bb      	str	r3, [r7, #8]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cc2:	f002 ffbb 	bl	800ac3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cd2:	fb01 f303 	mul.w	r3, r1, r3
 8007cd6:	441a      	add	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cf8:	fb01 f303 	mul.w	r3, r1, r3
 8007cfc:	441a      	add	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	22ff      	movs	r2, #255	; 0xff
 8007d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	22ff      	movs	r2, #255	; 0xff
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d114      	bne.n	8007d42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01a      	beq.n	8007d56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3310      	adds	r3, #16
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 ff31 	bl	8009b8c <xTaskRemoveFromEventList>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d012      	beq.n	8007d56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d30:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <xQueueGenericReset+0xcc>)
 8007d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	e009      	b.n	8007d56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3310      	adds	r3, #16
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff fef6 	bl	8007b38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3324      	adds	r3, #36	; 0x24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7ff fef1 	bl	8007b38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d56:	f002 ffa1 	bl	800ac9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d5a:	2301      	movs	r3, #1
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	; 0x38
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <xQueueGenericCreateStatic+0x52>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <xQueueGenericCreateStatic+0x56>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <xQueueGenericCreateStatic+0x58>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10a      	bne.n	8007dda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <xQueueGenericCreateStatic+0x7e>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <xQueueGenericCreateStatic+0x82>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <xQueueGenericCreateStatic+0x84>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	61fb      	str	r3, [r7, #28]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e06:	2350      	movs	r3, #80	; 0x50
 8007e08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b50      	cmp	r3, #80	; 0x50
 8007e0e:	d00a      	beq.n	8007e26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61bb      	str	r3, [r7, #24]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00d      	beq.n	8007e4c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e38:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	4613      	mov	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f843 	bl	8007ed2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3730      	adds	r7, #48	; 0x30
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b08a      	sub	sp, #40	; 0x28
 8007e5a:	af02      	add	r7, sp, #8
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	4613      	mov	r3, r2
 8007e62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10a      	bne.n	8007e80 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	613b      	str	r3, [r7, #16]
}
 8007e7c:	bf00      	nop
 8007e7e:	e7fe      	b.n	8007e7e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	e004      	b.n	8007e96 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	fb02 f303 	mul.w	r3, r2, r3
 8007e94:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	3350      	adds	r3, #80	; 0x50
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f002 ffce 	bl	800ae3c <pvPortMalloc>
 8007ea0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00f      	beq.n	8007ec8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	3350      	adds	r3, #80	; 0x50
 8007eac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007eb6:	79fa      	ldrb	r2, [r7, #7]
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f805 	bl	8007ed2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e002      	b.n	8007ef4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f00:	2101      	movs	r1, #1
 8007f02:	69b8      	ldr	r0, [r7, #24]
 8007f04:	f7ff fec8 	bl	8007c98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00e      	beq.n	8007f44 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f90c 	bl	800815c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f56:	2301      	movs	r3, #1
 8007f58:	617b      	str	r3, [r7, #20]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6939      	ldr	r1, [r7, #16]
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	f7ff ff76 	bl	8007e56 <xQueueGenericCreate>
 8007f6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff ffd3 	bl	8007f18 <prvInitialiseMutex>

		return pxNewQueue;
 8007f72:	68fb      	ldr	r3, [r7, #12]
	}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	6939      	ldr	r1, [r7, #16]
 8007f9a:	6978      	ldr	r0, [r7, #20]
 8007f9c:	f7ff fee4 	bl	8007d68 <xQueueGenericCreateStatic>
 8007fa0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff ffb8 	bl	8007f18 <prvInitialiseMutex>

		return pxNewQueue;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
	}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007fb2:	b590      	push	{r4, r7, lr}
 8007fb4:	b087      	sub	sp, #28
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	685c      	ldr	r4, [r3, #4]
 8007fde:	f001 fffd 	bl	8009fdc <xTaskGetCurrentTaskHandle>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	d111      	bne.n	800800c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	1e5a      	subs	r2, r3, #1
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2100      	movs	r1, #0
 8008000:	6938      	ldr	r0, [r7, #16]
 8008002:	f000 f8ab 	bl	800815c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008006:	2301      	movs	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	e001      	b.n	8008010 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008010:	697b      	ldr	r3, [r7, #20]
	}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd90      	pop	{r4, r7, pc}

0800801a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800801a:	b590      	push	{r4, r7, lr}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60fb      	str	r3, [r7, #12]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	685c      	ldr	r4, [r3, #4]
 8008048:	f001 ffc8 	bl	8009fdc <xTaskGetCurrentTaskHandle>
 800804c:	4603      	mov	r3, r0
 800804e:	429c      	cmp	r4, r3
 8008050:	d107      	bne.n	8008062 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e00c      	b.n	800807c <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6938      	ldr	r0, [r7, #16]
 8008066:	f000 fb7d 	bl	8008764 <xQueueSemaphoreTake>
 800806a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800807c:	697b      	ldr	r3, [r7, #20]
	}
 800807e:	4618      	mov	r0, r3
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd90      	pop	{r4, r7, pc}

08008086 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008086:	b580      	push	{r7, lr}
 8008088:	b08a      	sub	sp, #40	; 0x28
 800808a:	af02      	add	r7, sp, #8
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	61bb      	str	r3, [r7, #24]
}
 80080aa:	bf00      	nop
 80080ac:	e7fe      	b.n	80080ac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d90a      	bls.n	80080cc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	617b      	str	r3, [r7, #20]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080cc:	2302      	movs	r3, #2
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff fe46 	bl	8007d68 <xQueueGenericCreateStatic>
 80080dc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80080ea:	69fb      	ldr	r3, [r7, #28]
	}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3720      	adds	r7, #32
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	613b      	str	r3, [r7, #16]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d90a      	bls.n	8008138 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60fb      	str	r3, [r7, #12]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008138:	2202      	movs	r2, #2
 800813a:	2100      	movs	r1, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fe8a 	bl	8007e56 <xQueueGenericCreate>
 8008142:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008150:	697b      	ldr	r3, [r7, #20]
	}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08e      	sub	sp, #56	; 0x38
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800816a:	2300      	movs	r3, #0
 800816c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueGenericSend+0x32>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <xQueueGenericSend+0x40>
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <xQueueGenericSend+0x44>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <xQueueGenericSend+0x46>
 80081a0:	2300      	movs	r3, #0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <xQueueGenericSend+0x60>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d103      	bne.n	80081ca <xQueueGenericSend+0x6e>
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <xQueueGenericSend+0x72>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <xQueueGenericSend+0x74>
 80081ce:	2300      	movs	r3, #0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <xQueueGenericSend+0x8e>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	623b      	str	r3, [r7, #32]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ea:	f001 ff05 	bl	8009ff8 <xTaskGetSchedulerState>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <xQueueGenericSend+0x9e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <xQueueGenericSend+0xa2>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueGenericSend+0xa4>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericSend+0xbe>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61fb      	str	r3, [r7, #28]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800821a:	f002 fd0f 	bl	800ac3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <xQueueGenericSend+0xd4>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d129      	bne.n	8008284 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008236:	f000 fc94 	bl	8008b62 <prvCopyDataToQueue>
 800823a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	3324      	adds	r3, #36	; 0x24
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fc9f 	bl	8009b8c <xTaskRemoveFromEventList>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d013      	beq.n	800827c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008254:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <xQueueGenericSend+0x1f8>)
 8008256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	e00a      	b.n	800827c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800826c:	4b39      	ldr	r3, [pc, #228]	; (8008354 <xQueueGenericSend+0x1f8>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800827c:	f002 fd0e 	bl	800ac9c <vPortExitCritical>
				return pdPASS;
 8008280:	2301      	movs	r3, #1
 8008282:	e063      	b.n	800834c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800828a:	f002 fd07 	bl	800ac9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800828e:	2300      	movs	r3, #0
 8008290:	e05c      	b.n	800834c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4618      	mov	r0, r3
 800829e:	f001 fd3b 	bl	8009d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082a2:	2301      	movs	r3, #1
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082a6:	f002 fcf9 	bl	800ac9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082aa:	f001 f9f5 	bl	8009698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ae:	f002 fcc5 	bl	800ac3c <vPortEnterCritical>
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082b8:	b25b      	sxtb	r3, r3
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d103      	bne.n	80082c8 <xQueueGenericSend+0x16c>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d103      	bne.n	80082de <xQueueGenericSend+0x182>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082de:	f002 fcdd 	bl	800ac9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082e2:	1d3a      	adds	r2, r7, #4
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	4611      	mov	r1, r2
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fd2a 	bl	8009d44 <xTaskCheckForTimeOut>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d124      	bne.n	8008340 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082f8:	f000 fd2b 	bl	8008d52 <prvIsQueueFull>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d018      	beq.n	8008334 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	3310      	adds	r3, #16
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f001 fbb2 	bl	8009a74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008312:	f000 fcb6 	bl	8008c82 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008316:	f001 f9cd 	bl	80096b4 <xTaskResumeAll>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f47f af7c 	bne.w	800821a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008322:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <xQueueGenericSend+0x1f8>)
 8008324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	e772      	b.n	800821a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008336:	f000 fca4 	bl	8008c82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800833a:	f001 f9bb 	bl	80096b4 <xTaskResumeAll>
 800833e:	e76c      	b.n	800821a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008342:	f000 fc9e 	bl	8008c82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008346:	f001 f9b5 	bl	80096b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800834a:	2300      	movs	r3, #0
		}
	}
}
 800834c:	4618      	mov	r0, r3
 800834e:	3738      	adds	r7, #56	; 0x38
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <xQueueGenericSendFromISR+0x3c>
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <xQueueGenericSendFromISR+0x40>
 8008394:	2301      	movs	r3, #1
 8008396:	e000      	b.n	800839a <xQueueGenericSendFromISR+0x42>
 8008398:	2300      	movs	r3, #0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	623b      	str	r3, [r7, #32]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d103      	bne.n	80083c2 <xQueueGenericSendFromISR+0x6a>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <xQueueGenericSendFromISR+0x6e>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <xQueueGenericSendFromISR+0x70>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	61fb      	str	r3, [r7, #28]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083e2:	f002 fced 	bl	800adc0 <vPortValidateInterruptPriority>
	__asm volatile
 80083e6:	f3ef 8211 	mrs	r2, BASEPRI
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	61ba      	str	r2, [r7, #24]
 80083fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80083fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	429a      	cmp	r2, r3
 800840c:	d302      	bcc.n	8008414 <xQueueGenericSendFromISR+0xbc>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d12c      	bne.n	800846e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800841a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008424:	f000 fb9d 	bl	8008b62 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008428:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d112      	bne.n	8008458 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	2b00      	cmp	r3, #0
 8008438:	d016      	beq.n	8008468 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	3324      	adds	r3, #36	; 0x24
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fba4 	bl	8009b8c <xTaskRemoveFromEventList>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00e      	beq.n	8008468 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e007      	b.n	8008468 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008458:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800845c:	3301      	adds	r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	b25a      	sxtb	r2, r3
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008468:	2301      	movs	r3, #1
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800846c:	e001      	b.n	8008472 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800846e:	2300      	movs	r3, #0
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f383 8811 	msr	BASEPRI, r3
}
 800847c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800847e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008480:	4618      	mov	r0, r3
 8008482:	3738      	adds	r7, #56	; 0x38
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08e      	sub	sp, #56	; 0x38
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	623b      	str	r3, [r7, #32]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	61fb      	str	r3, [r7, #28]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <xQueueGiveFromISR+0x58>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <xQueueGiveFromISR+0x5c>
 80084e0:	2301      	movs	r3, #1
 80084e2:	e000      	b.n	80084e6 <xQueueGiveFromISR+0x5e>
 80084e4:	2300      	movs	r3, #0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <xQueueGiveFromISR+0x78>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	61bb      	str	r3, [r7, #24]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008500:	f002 fc5e 	bl	800adc0 <vPortValidateInterruptPriority>
	__asm volatile
 8008504:	f3ef 8211 	mrs	r2, BASEPRI
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	617a      	str	r2, [r7, #20]
 800851a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800851c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800852c:	429a      	cmp	r2, r3
 800852e:	d22b      	bcs.n	8008588 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008542:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d112      	bne.n	8008572 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d016      	beq.n	8008582 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	3324      	adds	r3, #36	; 0x24
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fb17 	bl	8009b8c <xTaskRemoveFromEventList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	e007      	b.n	8008582 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008576:	3301      	adds	r3, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	b25a      	sxtb	r2, r3
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008582:	2301      	movs	r3, #1
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
 8008586:	e001      	b.n	800858c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008588:	2300      	movs	r3, #0
 800858a:	637b      	str	r3, [r7, #52]	; 0x34
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f383 8811 	msr	BASEPRI, r3
}
 8008596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800859a:	4618      	mov	r0, r3
 800859c:	3738      	adds	r7, #56	; 0x38
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08c      	sub	sp, #48	; 0x30
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <xQueueReceive+0x30>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	623b      	str	r3, [r7, #32]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <xQueueReceive+0x3e>
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <xQueueReceive+0x42>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <xQueueReceive+0x44>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xQueueReceive+0x5e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	61fb      	str	r3, [r7, #28]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008602:	f001 fcf9 	bl	8009ff8 <xTaskGetSchedulerState>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <xQueueReceive+0x6e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueReceive+0x72>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueReceive+0x74>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueReceive+0x8e>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61bb      	str	r3, [r7, #24]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008632:	f002 fb03 	bl	800ac3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01f      	beq.n	8008682 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008646:	f000 faf6 	bl	8008c36 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	1e5a      	subs	r2, r3, #1
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00f      	beq.n	800867a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	3310      	adds	r3, #16
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fa94 	bl	8009b8c <xTaskRemoveFromEventList>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800866a:	4b3d      	ldr	r3, [pc, #244]	; (8008760 <xQueueReceive+0x1bc>)
 800866c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800867a:	f002 fb0f 	bl	800ac9c <vPortExitCritical>
				return pdPASS;
 800867e:	2301      	movs	r3, #1
 8008680:	e069      	b.n	8008756 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008688:	f002 fb08 	bl	800ac9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800868c:	2300      	movs	r3, #0
 800868e:	e062      	b.n	8008756 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fb3c 	bl	8009d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086a4:	f002 fafa 	bl	800ac9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086a8:	f000 fff6 	bl	8009698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ac:	f002 fac6 	bl	800ac3c <vPortEnterCritical>
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b6:	b25b      	sxtb	r3, r3
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d103      	bne.n	80086c6 <xQueueReceive+0x122>
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086cc:	b25b      	sxtb	r3, r3
 80086ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d2:	d103      	bne.n	80086dc <xQueueReceive+0x138>
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086dc:	f002 fade 	bl	800ac9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086e0:	1d3a      	adds	r2, r7, #4
 80086e2:	f107 0310 	add.w	r3, r7, #16
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fb2b 	bl	8009d44 <xTaskCheckForTimeOut>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d123      	bne.n	800873c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f6:	f000 fb16 	bl	8008d26 <prvIsQueueEmpty>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d017      	beq.n	8008730 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f9b3 	bl	8009a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800870e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008710:	f000 fab7 	bl	8008c82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008714:	f000 ffce 	bl	80096b4 <xTaskResumeAll>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d189      	bne.n	8008632 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800871e:	4b10      	ldr	r3, [pc, #64]	; (8008760 <xQueueReceive+0x1bc>)
 8008720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	e780      	b.n	8008632 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008732:	f000 faa6 	bl	8008c82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008736:	f000 ffbd 	bl	80096b4 <xTaskResumeAll>
 800873a:	e77a      	b.n	8008632 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873e:	f000 faa0 	bl	8008c82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008742:	f000 ffb7 	bl	80096b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008748:	f000 faed 	bl	8008d26 <prvIsQueueEmpty>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	f43f af6f 	beq.w	8008632 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008756:	4618      	mov	r0, r3
 8008758:	3730      	adds	r7, #48	; 0x30
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08e      	sub	sp, #56	; 0x38
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800876e:	2300      	movs	r3, #0
 8008770:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	61fb      	str	r3, [r7, #28]
}
 80087b0:	bf00      	nop
 80087b2:	e7fe      	b.n	80087b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087b4:	f001 fc20 	bl	8009ff8 <xTaskGetSchedulerState>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d102      	bne.n	80087c4 <xQueueSemaphoreTake+0x60>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <xQueueSemaphoreTake+0x64>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <xQueueSemaphoreTake+0x66>
 80087c8:	2300      	movs	r3, #0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10a      	bne.n	80087e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	61bb      	str	r3, [r7, #24]
}
 80087e0:	bf00      	nop
 80087e2:	e7fe      	b.n	80087e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087e4:	f002 fa2a 	bl	800ac3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d024      	beq.n	800883e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008804:	f001 fd90 	bl	800a328 <pvTaskIncrementMutexHeldCount>
 8008808:	4602      	mov	r2, r0
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00f      	beq.n	8008836 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	3310      	adds	r3, #16
 800881a:	4618      	mov	r0, r3
 800881c:	f001 f9b6 	bl	8009b8c <xTaskRemoveFromEventList>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008826:	4b54      	ldr	r3, [pc, #336]	; (8008978 <xQueueSemaphoreTake+0x214>)
 8008828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008836:	f002 fa31 	bl	800ac9c <vPortExitCritical>
				return pdPASS;
 800883a:	2301      	movs	r3, #1
 800883c:	e097      	b.n	800896e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d111      	bne.n	8008868 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	617b      	str	r3, [r7, #20]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008860:	f002 fa1c 	bl	800ac9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008864:	2300      	movs	r3, #0
 8008866:	e082      	b.n	800896e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fa50 	bl	8009d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008878:	2301      	movs	r3, #1
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800887c:	f002 fa0e 	bl	800ac9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008880:	f000 ff0a 	bl	8009698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008884:	f002 f9da 	bl	800ac3c <vPortEnterCritical>
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888e:	b25b      	sxtb	r3, r3
 8008890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008894:	d103      	bne.n	800889e <xQueueSemaphoreTake+0x13a>
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d103      	bne.n	80088b4 <xQueueSemaphoreTake+0x150>
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b4:	f002 f9f2 	bl	800ac9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088b8:	463a      	mov	r2, r7
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	4611      	mov	r1, r2
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fa3f 	bl	8009d44 <xTaskCheckForTimeOut>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d132      	bne.n	8008932 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ce:	f000 fa2a 	bl	8008d26 <prvIsQueueEmpty>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d026      	beq.n	8008926 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80088e0:	f002 f9ac 	bl	800ac3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fba3 	bl	800a034 <xTaskPriorityInherit>
 80088ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80088f0:	f002 f9d4 	bl	800ac9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 f8b9 	bl	8009a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008904:	f000 f9bd 	bl	8008c82 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008908:	f000 fed4 	bl	80096b4 <xTaskResumeAll>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	f47f af68 	bne.w	80087e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008914:	4b18      	ldr	r3, [pc, #96]	; (8008978 <xQueueSemaphoreTake+0x214>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	e75e      	b.n	80087e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008928:	f000 f9ab 	bl	8008c82 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800892c:	f000 fec2 	bl	80096b4 <xTaskResumeAll>
 8008930:	e758      	b.n	80087e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008934:	f000 f9a5 	bl	8008c82 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008938:	f000 febc 	bl	80096b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800893c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800893e:	f000 f9f2 	bl	8008d26 <prvIsQueueEmpty>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	f43f af4d 	beq.w	80087e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00d      	beq.n	800896c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008950:	f002 f974 	bl	800ac3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008956:	f000 f8ed 	bl	8008b34 <prvGetDisinheritPriorityAfterTimeout>
 800895a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008962:	4618      	mov	r0, r3
 8008964:	f001 fc42 	bl	800a1ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008968:	f002 f998 	bl	800ac9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800896c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800896e:	4618      	mov	r0, r3
 8008970:	3738      	adds	r7, #56	; 0x38
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	; 0x38
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	623b      	str	r3, [r7, #32]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <xQueueReceiveFromISR+0x3a>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <xQueueReceiveFromISR+0x3e>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <xQueueReceiveFromISR+0x40>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10a      	bne.n	80089d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	61fb      	str	r3, [r7, #28]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089d6:	f002 f9f3 	bl	800adc0 <vPortValidateInterruptPriority>
	__asm volatile
 80089da:	f3ef 8211 	mrs	r2, BASEPRI
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	61ba      	str	r2, [r7, #24]
 80089f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80089f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d02f      	beq.n	8008a62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a10:	f000 f911 	bl	8008c36 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	1e5a      	subs	r2, r3, #1
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a24:	d112      	bne.n	8008a4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d016      	beq.n	8008a5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	3310      	adds	r3, #16
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 f8aa 	bl	8009b8c <xTaskRemoveFromEventList>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e007      	b.n	8008a5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a50:	3301      	adds	r3, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	b25a      	sxtb	r2, r3
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a60:	e001      	b.n	8008a66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f383 8811 	msr	BASEPRI, r3
}
 8008a70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3738      	adds	r7, #56	; 0x38
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	60bb      	str	r3, [r7, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008aa0:	f002 f8cc 	bl	800ac3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008aaa:	f002 f8f7 	bl	800ac9c <vPortExitCritical>

	return uxReturn;
 8008aae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr

08008aee <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <vQueueDelete+0x28>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60bb      	str	r3, [r7, #8]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 f95c 	bl	8008dd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d102      	bne.n	8008b2c <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f002 fa4c 	bl	800afc4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008b2c:	bf00      	nop
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d006      	beq.n	8008b52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e001      	b.n	8008b56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b56:	68fb      	ldr	r3, [r7, #12]
	}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr

08008b62 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10d      	bne.n	8008b9c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d14d      	bne.n	8008c24 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f001 fabf 	bl	800a110 <xTaskPriorityDisinherit>
 8008b92:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	e043      	b.n	8008c24 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d119      	bne.n	8008bd6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6898      	ldr	r0, [r3, #8]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	461a      	mov	r2, r3
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	f005 f8c1 	bl	800dd34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	441a      	add	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d32b      	bcc.n	8008c24 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	609a      	str	r2, [r3, #8]
 8008bd4:	e026      	b.n	8008c24 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68d8      	ldr	r0, [r3, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	461a      	mov	r2, r3
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	f005 f8a7 	bl	800dd34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	425b      	negs	r3, r3
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d207      	bcs.n	8008c12 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	425b      	negs	r3, r3
 8008c0c:	441a      	add	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d105      	bne.n	8008c24 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c2c:	697b      	ldr	r3, [r7, #20]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d018      	beq.n	8008c7a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	441a      	add	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d303      	bcc.n	8008c6a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68d9      	ldr	r1, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	461a      	mov	r2, r3
 8008c74:	6838      	ldr	r0, [r7, #0]
 8008c76:	f005 f85d 	bl	800dd34 <memcpy>
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c8a:	f001 ffd7 	bl	800ac3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c94:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c96:	e011      	b.n	8008cbc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d012      	beq.n	8008cc6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 ff71 	bl	8009b8c <xTaskRemoveFromEventList>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cb0:	f001 f8aa 	bl	8009e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	dce9      	bgt.n	8008c98 <prvUnlockQueue+0x16>
 8008cc4:	e000      	b.n	8008cc8 <prvUnlockQueue+0x46>
					break;
 8008cc6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	22ff      	movs	r2, #255	; 0xff
 8008ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cd0:	f001 ffe4 	bl	800ac9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cd4:	f001 ffb2 	bl	800ac3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cde:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ce0:	e011      	b.n	8008d06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d012      	beq.n	8008d10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3310      	adds	r3, #16
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 ff4c 	bl	8009b8c <xTaskRemoveFromEventList>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cfa:	f001 f885 	bl	8009e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dce9      	bgt.n	8008ce2 <prvUnlockQueue+0x60>
 8008d0e:	e000      	b.n	8008d12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	22ff      	movs	r2, #255	; 0xff
 8008d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d1a:	f001 ffbf 	bl	800ac9c <vPortExitCritical>
}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d2e:	f001 ff85 	bl	800ac3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d102      	bne.n	8008d40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	e001      	b.n	8008d44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d44:	f001 ffaa 	bl	800ac9c <vPortExitCritical>

	return xReturn;
 8008d48:	68fb      	ldr	r3, [r7, #12]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d5a:	f001 ff6f 	bl	800ac3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d102      	bne.n	8008d70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	e001      	b.n	8008d74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d74:	f001 ff92 	bl	800ac9c <vPortExitCritical>

	return xReturn;
 8008d78:	68fb      	ldr	r3, [r7, #12]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	e014      	b.n	8008dbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d94:	4a0e      	ldr	r2, [pc, #56]	; (8008dd0 <vQueueAddToRegistry+0x4c>)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10b      	bne.n	8008db8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008da0:	490b      	ldr	r1, [pc, #44]	; (8008dd0 <vQueueAddToRegistry+0x4c>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008daa:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <vQueueAddToRegistry+0x4c>)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	4413      	add	r3, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008db6:	e006      	b.n	8008dc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b07      	cmp	r3, #7
 8008dc2:	d9e7      	bls.n	8008d94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc80      	pop	{r7}
 8008dce:	4770      	bx	lr
 8008dd0:	20000aec 	.word	0x20000aec

08008dd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e016      	b.n	8008e10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008de2:	4a10      	ldr	r2, [pc, #64]	; (8008e24 <vQueueUnregisterQueue+0x50>)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d10b      	bne.n	8008e0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008df2:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <vQueueUnregisterQueue+0x50>)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2100      	movs	r1, #0
 8008df8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008dfc:	4a09      	ldr	r2, [pc, #36]	; (8008e24 <vQueueUnregisterQueue+0x50>)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	4413      	add	r3, r2
 8008e04:	2200      	movs	r2, #0
 8008e06:	605a      	str	r2, [r3, #4]
				break;
 8008e08:	e006      	b.n	8008e18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b07      	cmp	r3, #7
 8008e14:	d9e5      	bls.n	8008de2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000aec 	.word	0x20000aec

08008e28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e38:	f001 ff00 	bl	800ac3c <vPortEnterCritical>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e48:	d103      	bne.n	8008e52 <vQueueWaitForMessageRestricted+0x2a>
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e58:	b25b      	sxtb	r3, r3
 8008e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5e:	d103      	bne.n	8008e68 <vQueueWaitForMessageRestricted+0x40>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e68:	f001 ff18 	bl	800ac9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	3324      	adds	r3, #36	; 0x24
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fe59 	bl	8009b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e82:	6978      	ldr	r0, [r7, #20]
 8008e84:	f7ff fefd 	bl	8008c82 <prvUnlockQueue>
	}
 8008e88:	bf00      	nop
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	; 0x38
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <xTaskCreateStatic+0x2a>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	623b      	str	r3, [r7, #32]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	61fb      	str	r3, [r7, #28]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ed6:	23a8      	movs	r3, #168	; 0xa8
 8008ed8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2ba8      	cmp	r3, #168	; 0xa8
 8008ede:	d00a      	beq.n	8008ef6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	61bb      	str	r3, [r7, #24]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01e      	beq.n	8008f3a <xTaskCreateStatic+0xaa>
 8008efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01b      	beq.n	8008f3a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f14:	2300      	movs	r3, #0
 8008f16:	9303      	str	r3, [sp, #12]
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	9302      	str	r3, [sp, #8]
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f851 	bl	8008fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f34:	f000 f8ec 	bl	8009110 <prvAddNewTaskToReadyList>
 8008f38:	e001      	b.n	8008f3e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f3e:	697b      	ldr	r3, [r7, #20]
	}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3728      	adds	r7, #40	; 0x28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08c      	sub	sp, #48	; 0x30
 8008f4c:	af04      	add	r7, sp, #16
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 ff6d 	bl	800ae3c <pvPortMalloc>
 8008f62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00e      	beq.n	8008f88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008f6a:	20a8      	movs	r0, #168	; 0xa8
 8008f6c:	f001 ff66 	bl	800ae3c <pvPortMalloc>
 8008f70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8008f7e:	e005      	b.n	8008f8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f80:	6978      	ldr	r0, [r7, #20]
 8008f82:	f002 f81f 	bl	800afc4 <vPortFree>
 8008f86:	e001      	b.n	8008f8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d017      	beq.n	8008fc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f9a:	88fa      	ldrh	r2, [r7, #6]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9303      	str	r3, [sp, #12]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	9302      	str	r3, [sp, #8]
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f80f 	bl	8008fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fb6:	69f8      	ldr	r0, [r7, #28]
 8008fb8:	f000 f8aa 	bl	8009110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	61bb      	str	r3, [r7, #24]
 8008fc0:	e002      	b.n	8008fc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
	}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b088      	sub	sp, #32
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	461a      	mov	r2, r3
 8008fec:	21a5      	movs	r1, #165	; 0xa5
 8008fee:	f004 fd5b 	bl	800daa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	f023 0307 	bic.w	r3, r3, #7
 800900a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	617b      	str	r3, [r7, #20]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800902c:	2300      	movs	r3, #0
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	e012      	b.n	8009058 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	4413      	add	r3, r2
 8009038:	7819      	ldrb	r1, [r3, #0]
 800903a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	3334      	adds	r3, #52	; 0x34
 8009042:	460a      	mov	r2, r1
 8009044:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	4413      	add	r3, r2
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d006      	beq.n	8009060 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3301      	adds	r3, #1
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	2b0f      	cmp	r3, #15
 800905c:	d9e9      	bls.n	8009032 <prvInitialiseNewTask+0x5e>
 800905e:	e000      	b.n	8009062 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009060:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	2b37      	cmp	r3, #55	; 0x37
 800906e:	d901      	bls.n	8009074 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009070:	2337      	movs	r3, #55	; 0x37
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009078:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800907e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	2200      	movs	r2, #0
 8009084:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	3304      	adds	r3, #4
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fd73 	bl	8007b76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	3318      	adds	r3, #24
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fd6e 	bl	8007b76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	3354      	adds	r3, #84	; 0x54
 80090c4:	224c      	movs	r2, #76	; 0x4c
 80090c6:	2100      	movs	r1, #0
 80090c8:	4618      	mov	r0, r3
 80090ca:	f004 fced 	bl	800daa8 <memset>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <prvInitialiseNewTask+0x130>)
 80090d2:	659a      	str	r2, [r3, #88]	; 0x58
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <prvInitialiseNewTask+0x134>)
 80090d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	4a0b      	ldr	r2, [pc, #44]	; (800910c <prvInitialiseNewTask+0x138>)
 80090de:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	69b8      	ldr	r0, [r7, #24]
 80090e6:	f001 fcb9 	bl	800aa5c <pxPortInitialiseStack>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090fc:	bf00      	nop
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	200036a8 	.word	0x200036a8
 8009108:	20003710 	.word	0x20003710
 800910c:	20003778 	.word	0x20003778

08009110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009118:	f001 fd90 	bl	800ac3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800911c:	4b2d      	ldr	r3, [pc, #180]	; (80091d4 <prvAddNewTaskToReadyList+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3301      	adds	r3, #1
 8009122:	4a2c      	ldr	r2, [pc, #176]	; (80091d4 <prvAddNewTaskToReadyList+0xc4>)
 8009124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009126:	4b2c      	ldr	r3, [pc, #176]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800912e:	4a2a      	ldr	r2, [pc, #168]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <prvAddNewTaskToReadyList+0xc4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d110      	bne.n	800915e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800913c:	f000 fe88 	bl	8009e50 <prvInitialiseTaskLists>
 8009140:	e00d      	b.n	800915e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009142:	4b26      	ldr	r3, [pc, #152]	; (80091dc <prvAddNewTaskToReadyList+0xcc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800914a:	4b23      	ldr	r3, [pc, #140]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	429a      	cmp	r2, r3
 8009156:	d802      	bhi.n	800915e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009158:	4a1f      	ldr	r2, [pc, #124]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800915e:	4b20      	ldr	r3, [pc, #128]	; (80091e0 <prvAddNewTaskToReadyList+0xd0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <prvAddNewTaskToReadyList+0xd0>)
 8009166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009168:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <prvAddNewTaskToReadyList+0xd0>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <prvAddNewTaskToReadyList+0xd4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d903      	bls.n	8009184 <prvAddNewTaskToReadyList+0x74>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	4a18      	ldr	r2, [pc, #96]	; (80091e4 <prvAddNewTaskToReadyList+0xd4>)
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <prvAddNewTaskToReadyList+0xd8>)
 8009192:	441a      	add	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7fe fcf7 	bl	8007b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091a0:	f001 fd7c 	bl	800ac9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091a4:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <prvAddNewTaskToReadyList+0xcc>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00e      	beq.n	80091ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <prvAddNewTaskToReadyList+0xc8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d207      	bcs.n	80091ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ba:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <prvAddNewTaskToReadyList+0xdc>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20001000 	.word	0x20001000
 80091d8:	20000b2c 	.word	0x20000b2c
 80091dc:	2000100c 	.word	0x2000100c
 80091e0:	2000101c 	.word	0x2000101c
 80091e4:	20001008 	.word	0x20001008
 80091e8:	20000b30 	.word	0x20000b30
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d017      	beq.n	8009232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009202:	4b13      	ldr	r3, [pc, #76]	; (8009250 <vTaskDelay+0x60>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <vTaskDelay+0x30>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	60bb      	str	r3, [r7, #8]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009220:	f000 fa3a 	bl	8009698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009224:	2100      	movs	r1, #0
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 f892 	bl	800a350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800922c:	f000 fa42 	bl	80096b4 <xTaskResumeAll>
 8009230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d107      	bne.n	8009248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009238:	4b06      	ldr	r3, [pc, #24]	; (8009254 <vTaskDelay+0x64>)
 800923a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001028 	.word	0x20001028
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8009262:	2300      	movs	r3, #0
 8009264:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b37      	cmp	r3, #55	; 0x37
 800926a:	d90a      	bls.n	8009282 <vTaskPrioritySet+0x2a>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	60fb      	str	r3, [r7, #12]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b37      	cmp	r3, #55	; 0x37
 8009286:	d901      	bls.n	800928c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009288:	2337      	movs	r3, #55	; 0x37
 800928a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800928c:	f001 fcd6 	bl	800ac3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <vTaskPrioritySet+0x44>
 8009296:	4b3d      	ldr	r3, [pc, #244]	; (800938c <vTaskPrioritySet+0x134>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	e000      	b.n	800929e <vTaskPrioritySet+0x46>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a4:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d068      	beq.n	8009380 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d90d      	bls.n	80092d2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80092b6:	4b35      	ldr	r3, [pc, #212]	; (800938c <vTaskPrioritySet+0x134>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d00f      	beq.n	80092e0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80092c0:	4b32      	ldr	r3, [pc, #200]	; (800938c <vTaskPrioritySet+0x134>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d309      	bcc.n	80092e0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	61fb      	str	r3, [r7, #28]
 80092d0:	e006      	b.n	80092e0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80092d2:	4b2e      	ldr	r3, [pc, #184]	; (800938c <vTaskPrioritySet+0x134>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d101      	bne.n	80092e0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80092dc:	2301      	movs	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d102      	bne.n	80092f8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	db04      	blt.n	8009310 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	6959      	ldr	r1, [r3, #20]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4a1c      	ldr	r2, [pc, #112]	; (8009390 <vTaskPrioritySet+0x138>)
 8009320:	4413      	add	r3, r2
 8009322:	4299      	cmp	r1, r3
 8009324:	d101      	bne.n	800932a <vTaskPrioritySet+0xd2>
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <vTaskPrioritySet+0xd4>
 800932a:	2300      	movs	r3, #0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d01c      	beq.n	800936a <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	3304      	adds	r3, #4
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fc85 	bl	8007c44 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	4b15      	ldr	r3, [pc, #84]	; (8009394 <vTaskPrioritySet+0x13c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	429a      	cmp	r2, r3
 8009344:	d903      	bls.n	800934e <vTaskPrioritySet+0xf6>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	4a12      	ldr	r2, [pc, #72]	; (8009394 <vTaskPrioritySet+0x13c>)
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4a0d      	ldr	r2, [pc, #52]	; (8009390 <vTaskPrioritySet+0x138>)
 800935c:	441a      	add	r2, r3
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	3304      	adds	r3, #4
 8009362:	4619      	mov	r1, r3
 8009364:	4610      	mov	r0, r2
 8009366:	f7fe fc12 	bl	8007b8e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8009370:	4b09      	ldr	r3, [pc, #36]	; (8009398 <vTaskPrioritySet+0x140>)
 8009372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8009380:	f001 fc8c 	bl	800ac9c <vPortExitCritical>
	}
 8009384:	bf00      	nop
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000b2c 	.word	0x20000b2c
 8009390:	20000b30 	.word	0x20000b30
 8009394:	20001008 	.word	0x20001008
 8009398:	e000ed04 	.word	0xe000ed04

0800939c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80093a4:	f001 fc4a 	bl	800ac3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <vTaskSuspend+0x18>
 80093ae:	4b30      	ldr	r3, [pc, #192]	; (8009470 <vTaskSuspend+0xd4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	e000      	b.n	80093b6 <vTaskSuspend+0x1a>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fc41 	bl	8007c44 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3318      	adds	r3, #24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fc38 	bl	8007c44 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3304      	adds	r3, #4
 80093d8:	4619      	mov	r1, r3
 80093da:	4826      	ldr	r0, [pc, #152]	; (8009474 <vTaskSuspend+0xd8>)
 80093dc:	f7fe fbd7 	bl	8007b8e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d103      	bne.n	80093f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80093f4:	f001 fc52 	bl	800ac9c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80093f8:	4b1f      	ldr	r3, [pc, #124]	; (8009478 <vTaskSuspend+0xdc>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009400:	f001 fc1c 	bl	800ac3c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009404:	f000 fdc6 	bl	8009f94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009408:	f001 fc48 	bl	800ac9c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800940c:	4b18      	ldr	r3, [pc, #96]	; (8009470 <vTaskSuspend+0xd4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d127      	bne.n	8009466 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009416:	4b18      	ldr	r3, [pc, #96]	; (8009478 <vTaskSuspend+0xdc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d017      	beq.n	800944e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800941e:	4b17      	ldr	r3, [pc, #92]	; (800947c <vTaskSuspend+0xe0>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <vTaskSuspend+0xa0>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	60bb      	str	r3, [r7, #8]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <vTaskSuspend+0xe4>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800944c:	e00b      	b.n	8009466 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <vTaskSuspend+0xd8>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <vTaskSuspend+0xe8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d103      	bne.n	8009462 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <vTaskSuspend+0xd4>)
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
	}
 8009460:	e001      	b.n	8009466 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009462:	f000 faa3 	bl	80099ac <vTaskSwitchContext>
	}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000b2c 	.word	0x20000b2c
 8009474:	20000fec 	.word	0x20000fec
 8009478:	2000100c 	.word	0x2000100c
 800947c:	20001028 	.word	0x20001028
 8009480:	e000ed04 	.word	0xe000ed04
 8009484:	20001000 	.word	0x20001000

08009488 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60fb      	str	r3, [r7, #12]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	4a0e      	ldr	r2, [pc, #56]	; (80094f4 <prvTaskIsTaskSuspended+0x6c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d101      	bne.n	80094c2 <prvTaskIsTaskSuspended+0x3a>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <prvTaskIsTaskSuspended+0x3c>
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00f      	beq.n	80094e8 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	4a0a      	ldr	r2, [pc, #40]	; (80094f8 <prvTaskIsTaskSuspended+0x70>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00a      	beq.n	80094e8 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <prvTaskIsTaskSuspended+0x56>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <prvTaskIsTaskSuspended+0x58>
 80094de:	2300      	movs	r3, #0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094e8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80094ea:	4618      	mov	r0, r3
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr
 80094f4:	20000fec 	.word	0x20000fec
 80094f8:	20000fc0 	.word	0x20000fc0

080094fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <vTaskResume+0x28>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60bb      	str	r3, [r7, #8]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d03a      	beq.n	80095a0 <vTaskResume+0xa4>
 800952a:	4b1f      	ldr	r3, [pc, #124]	; (80095a8 <vTaskResume+0xac>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	429a      	cmp	r2, r3
 8009532:	d035      	beq.n	80095a0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009534:	f001 fb82 	bl	800ac3c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff ffa5 	bl	8009488 <prvTaskIsTaskSuspended>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d02b      	beq.n	800959c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3304      	adds	r3, #4
 8009548:	4618      	mov	r0, r3
 800954a:	f7fe fb7b 	bl	8007c44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	4b16      	ldr	r3, [pc, #88]	; (80095ac <vTaskResume+0xb0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d903      	bls.n	8009562 <vTaskResume+0x66>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a13      	ldr	r2, [pc, #76]	; (80095ac <vTaskResume+0xb0>)
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4a10      	ldr	r2, [pc, #64]	; (80095b0 <vTaskResume+0xb4>)
 8009570:	441a      	add	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3304      	adds	r3, #4
 8009576:	4619      	mov	r1, r3
 8009578:	4610      	mov	r0, r2
 800957a:	f7fe fb08 	bl	8007b8e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <vTaskResume+0xac>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	429a      	cmp	r2, r3
 800958a:	d307      	bcc.n	800959c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800958c:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <vTaskResume+0xb8>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800959c:	f001 fb7e 	bl	800ac9c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20000b2c 	.word	0x20000b2c
 80095ac:	20001008 	.word	0x20001008
 80095b0:	20000b30 	.word	0x20000b30
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	; 0x28
 80095bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095c6:	463a      	mov	r2, r7
 80095c8:	1d39      	adds	r1, r7, #4
 80095ca:	f107 0308 	add.w	r3, r7, #8
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe f818 	bl	8007604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	9202      	str	r2, [sp, #8]
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	2300      	movs	r3, #0
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	2300      	movs	r3, #0
 80095e4:	460a      	mov	r2, r1
 80095e6:	4924      	ldr	r1, [pc, #144]	; (8009678 <vTaskStartScheduler+0xc0>)
 80095e8:	4824      	ldr	r0, [pc, #144]	; (800967c <vTaskStartScheduler+0xc4>)
 80095ea:	f7ff fc51 	bl	8008e90 <xTaskCreateStatic>
 80095ee:	4603      	mov	r3, r0
 80095f0:	4a23      	ldr	r2, [pc, #140]	; (8009680 <vTaskStartScheduler+0xc8>)
 80095f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095f4:	4b22      	ldr	r3, [pc, #136]	; (8009680 <vTaskStartScheduler+0xc8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095fc:	2301      	movs	r3, #1
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e001      	b.n	8009606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009602:	2300      	movs	r3, #0
 8009604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d102      	bne.n	8009612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800960c:	f000 fef4 	bl	800a3f8 <xTimerCreateTimerTask>
 8009610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d11b      	bne.n	8009650 <vTaskStartScheduler+0x98>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	613b      	str	r3, [r7, #16]
}
 800962a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800962c:	4b15      	ldr	r3, [pc, #84]	; (8009684 <vTaskStartScheduler+0xcc>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3354      	adds	r3, #84	; 0x54
 8009632:	4a15      	ldr	r2, [pc, #84]	; (8009688 <vTaskStartScheduler+0xd0>)
 8009634:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009636:	4b15      	ldr	r3, [pc, #84]	; (800968c <vTaskStartScheduler+0xd4>)
 8009638:	f04f 32ff 	mov.w	r2, #4294967295
 800963c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800963e:	4b14      	ldr	r3, [pc, #80]	; (8009690 <vTaskStartScheduler+0xd8>)
 8009640:	2201      	movs	r2, #1
 8009642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009644:	4b13      	ldr	r3, [pc, #76]	; (8009694 <vTaskStartScheduler+0xdc>)
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800964a:	f001 fa85 	bl	800ab58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800964e:	e00e      	b.n	800966e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d10a      	bne.n	800966e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	60fb      	str	r3, [r7, #12]
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <vTaskStartScheduler+0xb4>
}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	0800ed30 	.word	0x0800ed30
 800967c:	08009e21 	.word	0x08009e21
 8009680:	20001024 	.word	0x20001024
 8009684:	20000b2c 	.word	0x20000b2c
 8009688:	200000ac 	.word	0x200000ac
 800968c:	20001020 	.word	0x20001020
 8009690:	2000100c 	.word	0x2000100c
 8009694:	20001004 	.word	0x20001004

08009698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009698:	b480      	push	{r7}
 800969a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800969c:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <vTaskSuspendAll+0x18>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3301      	adds	r3, #1
 80096a2:	4a03      	ldr	r2, [pc, #12]	; (80096b0 <vTaskSuspendAll+0x18>)
 80096a4:	6013      	str	r3, [r2, #0]
}
 80096a6:	bf00      	nop
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bc80      	pop	{r7}
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20001028 	.word	0x20001028

080096b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096c2:	4b42      	ldr	r3, [pc, #264]	; (80097cc <xTaskResumeAll+0x118>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	603b      	str	r3, [r7, #0]
}
 80096dc:	bf00      	nop
 80096de:	e7fe      	b.n	80096de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096e0:	f001 faac 	bl	800ac3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096e4:	4b39      	ldr	r3, [pc, #228]	; (80097cc <xTaskResumeAll+0x118>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	4a38      	ldr	r2, [pc, #224]	; (80097cc <xTaskResumeAll+0x118>)
 80096ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ee:	4b37      	ldr	r3, [pc, #220]	; (80097cc <xTaskResumeAll+0x118>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d162      	bne.n	80097bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096f6:	4b36      	ldr	r3, [pc, #216]	; (80097d0 <xTaskResumeAll+0x11c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d05e      	beq.n	80097bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096fe:	e02f      	b.n	8009760 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009700:	4b34      	ldr	r3, [pc, #208]	; (80097d4 <xTaskResumeAll+0x120>)
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3318      	adds	r3, #24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe fa99 	bl	8007c44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3304      	adds	r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fa94 	bl	8007c44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009720:	4b2d      	ldr	r3, [pc, #180]	; (80097d8 <xTaskResumeAll+0x124>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d903      	bls.n	8009730 <xTaskResumeAll+0x7c>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	4a2a      	ldr	r2, [pc, #168]	; (80097d8 <xTaskResumeAll+0x124>)
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4a27      	ldr	r2, [pc, #156]	; (80097dc <xTaskResumeAll+0x128>)
 800973e:	441a      	add	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	3304      	adds	r3, #4
 8009744:	4619      	mov	r1, r3
 8009746:	4610      	mov	r0, r2
 8009748:	f7fe fa21 	bl	8007b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	4b23      	ldr	r3, [pc, #140]	; (80097e0 <xTaskResumeAll+0x12c>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009756:	429a      	cmp	r2, r3
 8009758:	d302      	bcc.n	8009760 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800975a:	4b22      	ldr	r3, [pc, #136]	; (80097e4 <xTaskResumeAll+0x130>)
 800975c:	2201      	movs	r2, #1
 800975e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009760:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <xTaskResumeAll+0x120>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1cb      	bne.n	8009700 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800976e:	f000 fc11 	bl	8009f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009772:	4b1d      	ldr	r3, [pc, #116]	; (80097e8 <xTaskResumeAll+0x134>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d010      	beq.n	80097a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800977e:	f000 f857 	bl	8009830 <xTaskIncrementTick>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009788:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <xTaskResumeAll+0x130>)
 800978a:	2201      	movs	r2, #1
 800978c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	3b01      	subs	r3, #1
 8009792:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1f1      	bne.n	800977e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <xTaskResumeAll+0x134>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097a0:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <xTaskResumeAll+0x130>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d009      	beq.n	80097bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097ac:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <xTaskResumeAll+0x138>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097bc:	f001 fa6e 	bl	800ac9c <vPortExitCritical>

	return xAlreadyYielded;
 80097c0:	68bb      	ldr	r3, [r7, #8]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20001028 	.word	0x20001028
 80097d0:	20001000 	.word	0x20001000
 80097d4:	20000fc0 	.word	0x20000fc0
 80097d8:	20001008 	.word	0x20001008
 80097dc:	20000b30 	.word	0x20000b30
 80097e0:	20000b2c 	.word	0x20000b2c
 80097e4:	20001014 	.word	0x20001014
 80097e8:	20001010 	.word	0x20001010
 80097ec:	e000ed04 	.word	0xe000ed04

080097f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097f6:	4b04      	ldr	r3, [pc, #16]	; (8009808 <xTaskGetTickCount+0x18>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097fc:	687b      	ldr	r3, [r7, #4]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	bc80      	pop	{r7}
 8009806:	4770      	bx	lr
 8009808:	20001004 	.word	0x20001004

0800980c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009812:	f001 fad5 	bl	800adc0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009816:	2300      	movs	r3, #0
 8009818:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800981a:	4b04      	ldr	r3, [pc, #16]	; (800982c <xTaskGetTickCountFromISR+0x20>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009820:	683b      	ldr	r3, [r7, #0]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20001004 	.word	0x20001004

08009830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800983a:	4b51      	ldr	r3, [pc, #324]	; (8009980 <xTaskIncrementTick+0x150>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f040 808e 	bne.w	8009960 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009844:	4b4f      	ldr	r3, [pc, #316]	; (8009984 <xTaskIncrementTick+0x154>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3301      	adds	r3, #1
 800984a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800984c:	4a4d      	ldr	r2, [pc, #308]	; (8009984 <xTaskIncrementTick+0x154>)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d120      	bne.n	800989a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009858:	4b4b      	ldr	r3, [pc, #300]	; (8009988 <xTaskIncrementTick+0x158>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00a      	beq.n	8009878 <xTaskIncrementTick+0x48>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	603b      	str	r3, [r7, #0]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <xTaskIncrementTick+0x46>
 8009878:	4b43      	ldr	r3, [pc, #268]	; (8009988 <xTaskIncrementTick+0x158>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	4b43      	ldr	r3, [pc, #268]	; (800998c <xTaskIncrementTick+0x15c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a41      	ldr	r2, [pc, #260]	; (8009988 <xTaskIncrementTick+0x158>)
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	4a41      	ldr	r2, [pc, #260]	; (800998c <xTaskIncrementTick+0x15c>)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	4b40      	ldr	r3, [pc, #256]	; (8009990 <xTaskIncrementTick+0x160>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3301      	adds	r3, #1
 8009892:	4a3f      	ldr	r2, [pc, #252]	; (8009990 <xTaskIncrementTick+0x160>)
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	f000 fb7d 	bl	8009f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800989a:	4b3e      	ldr	r3, [pc, #248]	; (8009994 <xTaskIncrementTick+0x164>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d34e      	bcc.n	8009942 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098a4:	4b38      	ldr	r3, [pc, #224]	; (8009988 <xTaskIncrementTick+0x158>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <xTaskIncrementTick+0x82>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <xTaskIncrementTick+0x84>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d004      	beq.n	80098c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b8:	4b36      	ldr	r3, [pc, #216]	; (8009994 <xTaskIncrementTick+0x164>)
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295
 80098be:	601a      	str	r2, [r3, #0]
					break;
 80098c0:	e03f      	b.n	8009942 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80098c2:	4b31      	ldr	r3, [pc, #196]	; (8009988 <xTaskIncrementTick+0x158>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d203      	bcs.n	80098e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098da:	4a2e      	ldr	r2, [pc, #184]	; (8009994 <xTaskIncrementTick+0x164>)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6013      	str	r3, [r2, #0]
						break;
 80098e0:	e02f      	b.n	8009942 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe f9ac 	bl	8007c44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d004      	beq.n	80098fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	3318      	adds	r3, #24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe f9a3 	bl	8007c44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	4b25      	ldr	r3, [pc, #148]	; (8009998 <xTaskIncrementTick+0x168>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <xTaskIncrementTick+0xe2>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	4a22      	ldr	r2, [pc, #136]	; (8009998 <xTaskIncrementTick+0x168>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4a1f      	ldr	r2, [pc, #124]	; (800999c <xTaskIncrementTick+0x16c>)
 8009920:	441a      	add	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	3304      	adds	r3, #4
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f7fe f930 	bl	8007b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	4b1b      	ldr	r3, [pc, #108]	; (80099a0 <xTaskIncrementTick+0x170>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	429a      	cmp	r2, r3
 800993a:	d3b3      	bcc.n	80098a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009940:	e7b0      	b.n	80098a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009942:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <xTaskIncrementTick+0x170>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009948:	4914      	ldr	r1, [pc, #80]	; (800999c <xTaskIncrementTick+0x16c>)
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d907      	bls.n	800996a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800995a:	2301      	movs	r3, #1
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e004      	b.n	800996a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <xTaskIncrementTick+0x174>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	4a0f      	ldr	r2, [pc, #60]	; (80099a4 <xTaskIncrementTick+0x174>)
 8009968:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800996a:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <xTaskIncrementTick+0x178>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009972:	2301      	movs	r3, #1
 8009974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009976:	697b      	ldr	r3, [r7, #20]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20001028 	.word	0x20001028
 8009984:	20001004 	.word	0x20001004
 8009988:	20000fb8 	.word	0x20000fb8
 800998c:	20000fbc 	.word	0x20000fbc
 8009990:	20001018 	.word	0x20001018
 8009994:	20001020 	.word	0x20001020
 8009998:	20001008 	.word	0x20001008
 800999c:	20000b30 	.word	0x20000b30
 80099a0:	20000b2c 	.word	0x20000b2c
 80099a4:	20001010 	.word	0x20001010
 80099a8:	20001014 	.word	0x20001014

080099ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099b2:	4b2a      	ldr	r3, [pc, #168]	; (8009a5c <vTaskSwitchContext+0xb0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80099ba:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <vTaskSwitchContext+0xb4>)
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80099c0:	e046      	b.n	8009a50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80099c2:	4b27      	ldr	r3, [pc, #156]	; (8009a60 <vTaskSwitchContext+0xb4>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80099c8:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <vTaskSwitchContext+0xb8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	e010      	b.n	80099f2 <vTaskSwitchContext+0x46>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <vTaskSwitchContext+0x40>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	607b      	str	r3, [r7, #4]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <vTaskSwitchContext+0x3e>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	491d      	ldr	r1, [pc, #116]	; (8009a68 <vTaskSwitchContext+0xbc>)
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	440b      	add	r3, r1
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0e4      	beq.n	80099d0 <vTaskSwitchContext+0x24>
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4a15      	ldr	r2, [pc, #84]	; (8009a68 <vTaskSwitchContext+0xbc>)
 8009a12:	4413      	add	r3, r2
 8009a14:	60bb      	str	r3, [r7, #8]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	605a      	str	r2, [r3, #4]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	3308      	adds	r3, #8
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d104      	bne.n	8009a36 <vTaskSwitchContext+0x8a>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	4a0b      	ldr	r2, [pc, #44]	; (8009a6c <vTaskSwitchContext+0xc0>)
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	4a08      	ldr	r2, [pc, #32]	; (8009a64 <vTaskSwitchContext+0xb8>)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <vTaskSwitchContext+0xc0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3354      	adds	r3, #84	; 0x54
 8009a4c:	4a08      	ldr	r2, [pc, #32]	; (8009a70 <vTaskSwitchContext+0xc4>)
 8009a4e:	6013      	str	r3, [r2, #0]
}
 8009a50:	bf00      	nop
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bc80      	pop	{r7}
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20001028 	.word	0x20001028
 8009a60:	20001014 	.word	0x20001014
 8009a64:	20001008 	.word	0x20001008
 8009a68:	20000b30 	.word	0x20000b30
 8009a6c:	20000b2c 	.word	0x20000b2c
 8009a70:	200000ac 	.word	0x200000ac

08009a74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	60fb      	str	r3, [r7, #12]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a9a:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <vTaskPlaceOnEventList+0x44>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3318      	adds	r3, #24
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7fe f896 	bl	8007bd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	6838      	ldr	r0, [r7, #0]
 8009aac:	f000 fc50 	bl	800a350 <prvAddCurrentTaskToDelayedList>
}
 8009ab0:	bf00      	nop
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20000b2c 	.word	0x20000b2c

08009abc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	617b      	str	r3, [r7, #20]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009ae4:	4b11      	ldr	r3, [pc, #68]	; (8009b2c <vTaskPlaceOnUnorderedEventList+0x70>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10a      	bne.n	8009b02 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	613b      	str	r3, [r7, #16]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009b02:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009b0c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b0e:	4b08      	ldr	r3, [pc, #32]	; (8009b30 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3318      	adds	r3, #24
 8009b14:	4619      	mov	r1, r3
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7fe f839 	bl	8007b8e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc16 	bl	800a350 <prvAddCurrentTaskToDelayedList>
}
 8009b24:	bf00      	nop
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20001028 	.word	0x20001028
 8009b30:	20000b2c 	.word	0x20000b2c

08009b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	617b      	str	r3, [r7, #20]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3318      	adds	r3, #24
 8009b62:	4619      	mov	r1, r3
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7fe f812 	bl	8007b8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	68b8      	ldr	r0, [r7, #8]
 8009b7a:	f000 fbe9 	bl	800a350 <prvAddCurrentTaskToDelayedList>
	}
 8009b7e:	bf00      	nop
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000b2c 	.word	0x20000b2c

08009b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10a      	bne.n	8009bb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	3318      	adds	r3, #24
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fe f841 	bl	8007c44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bc2:	4b1e      	ldr	r3, [pc, #120]	; (8009c3c <xTaskRemoveFromEventList+0xb0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d11d      	bne.n	8009c06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe f838 	bl	8007c44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd8:	4b19      	ldr	r3, [pc, #100]	; (8009c40 <xTaskRemoveFromEventList+0xb4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d903      	bls.n	8009be8 <xTaskRemoveFromEventList+0x5c>
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	4a16      	ldr	r2, [pc, #88]	; (8009c40 <xTaskRemoveFromEventList+0xb4>)
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bec:	4613      	mov	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4a13      	ldr	r2, [pc, #76]	; (8009c44 <xTaskRemoveFromEventList+0xb8>)
 8009bf6:	441a      	add	r2, r3
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7fd ffc5 	bl	8007b8e <vListInsertEnd>
 8009c04:	e005      	b.n	8009c12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	3318      	adds	r3, #24
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	480e      	ldr	r0, [pc, #56]	; (8009c48 <xTaskRemoveFromEventList+0xbc>)
 8009c0e:	f7fd ffbe 	bl	8007b8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c16:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <xTaskRemoveFromEventList+0xc0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d905      	bls.n	8009c2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c20:	2301      	movs	r3, #1
 8009c22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c24:	4b0a      	ldr	r3, [pc, #40]	; (8009c50 <xTaskRemoveFromEventList+0xc4>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	e001      	b.n	8009c30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009c30:	697b      	ldr	r3, [r7, #20]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20001028 	.word	0x20001028
 8009c40:	20001008 	.word	0x20001008
 8009c44:	20000b30 	.word	0x20000b30
 8009c48:	20000fc0 	.word	0x20000fc0
 8009c4c:	20000b2c 	.word	0x20000b2c
 8009c50:	20001014 	.word	0x20001014

08009c54 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009c5e:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10a      	bne.n	8009c7c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	613b      	str	r3, [r7, #16]
}
 8009c78:	bf00      	nop
 8009c7a:	e7fe      	b.n	8009c7a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60fb      	str	r3, [r7, #12]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7fd ffcb 	bl	8007c44 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fd ffc6 	bl	8007c44 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d903      	bls.n	8009ccc <vTaskRemoveFromUnorderedEventList+0x78>
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	4a0f      	ldr	r2, [pc, #60]	; (8009d08 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4a0c      	ldr	r2, [pc, #48]	; (8009d0c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009cda:	441a      	add	r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7fd ff53 	bl	8007b8e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4b08      	ldr	r3, [pc, #32]	; (8009d10 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d902      	bls.n	8009cfc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009cf6:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
	}
}
 8009cfc:	bf00      	nop
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20001028 	.word	0x20001028
 8009d08:	20001008 	.word	0x20001008
 8009d0c:	20000b30 	.word	0x20000b30
 8009d10:	20000b2c 	.word	0x20000b2c
 8009d14:	20001014 	.word	0x20001014

08009d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d20:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <vTaskInternalSetTimeOutState+0x24>)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <vTaskInternalSetTimeOutState+0x28>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	605a      	str	r2, [r3, #4]
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bc80      	pop	{r7}
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	20001018 	.word	0x20001018
 8009d40:	20001004 	.word	0x20001004

08009d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	613b      	str	r3, [r7, #16]
}
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009d86:	f000 ff59 	bl	800ac3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d8a:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <xTaskCheckForTimeOut+0xbc>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da2:	d102      	bne.n	8009daa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	e023      	b.n	8009df2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <xTaskCheckForTimeOut+0xc0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d007      	beq.n	8009dc6 <xTaskCheckForTimeOut+0x82>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d302      	bcc.n	8009dc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	e015      	b.n	8009df2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d20b      	bcs.n	8009de8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	1ad2      	subs	r2, r2, r3
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff ff9b 	bl	8009d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	e004      	b.n	8009df2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dee:	2301      	movs	r3, #1
 8009df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009df2:	f000 ff53 	bl	800ac9c <vPortExitCritical>

	return xReturn;
 8009df6:	69fb      	ldr	r3, [r7, #28]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20001004 	.word	0x20001004
 8009e04:	20001018 	.word	0x20001018

08009e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e0c:	4b03      	ldr	r3, [pc, #12]	; (8009e1c <vTaskMissedYield+0x14>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
}
 8009e12:	bf00      	nop
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	20001014 	.word	0x20001014

08009e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e28:	f000 f852 	bl	8009ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e2c:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <prvIdleTask+0x28>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d9f9      	bls.n	8009e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e34:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <prvIdleTask+0x2c>)
 8009e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e44:	e7f0      	b.n	8009e28 <prvIdleTask+0x8>
 8009e46:	bf00      	nop
 8009e48:	20000b30 	.word	0x20000b30
 8009e4c:	e000ed04 	.word	0xe000ed04

08009e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e56:	2300      	movs	r3, #0
 8009e58:	607b      	str	r3, [r7, #4]
 8009e5a:	e00c      	b.n	8009e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4a12      	ldr	r2, [pc, #72]	; (8009eb0 <prvInitialiseTaskLists+0x60>)
 8009e68:	4413      	add	r3, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fd fe64 	bl	8007b38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3301      	adds	r3, #1
 8009e74:	607b      	str	r3, [r7, #4]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b37      	cmp	r3, #55	; 0x37
 8009e7a:	d9ef      	bls.n	8009e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e7c:	480d      	ldr	r0, [pc, #52]	; (8009eb4 <prvInitialiseTaskLists+0x64>)
 8009e7e:	f7fd fe5b 	bl	8007b38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e82:	480d      	ldr	r0, [pc, #52]	; (8009eb8 <prvInitialiseTaskLists+0x68>)
 8009e84:	f7fd fe58 	bl	8007b38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e88:	480c      	ldr	r0, [pc, #48]	; (8009ebc <prvInitialiseTaskLists+0x6c>)
 8009e8a:	f7fd fe55 	bl	8007b38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e8e:	480c      	ldr	r0, [pc, #48]	; (8009ec0 <prvInitialiseTaskLists+0x70>)
 8009e90:	f7fd fe52 	bl	8007b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e94:	480b      	ldr	r0, [pc, #44]	; (8009ec4 <prvInitialiseTaskLists+0x74>)
 8009e96:	f7fd fe4f 	bl	8007b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ec8 <prvInitialiseTaskLists+0x78>)
 8009e9c:	4a05      	ldr	r2, [pc, #20]	; (8009eb4 <prvInitialiseTaskLists+0x64>)
 8009e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <prvInitialiseTaskLists+0x7c>)
 8009ea2:	4a05      	ldr	r2, [pc, #20]	; (8009eb8 <prvInitialiseTaskLists+0x68>)
 8009ea4:	601a      	str	r2, [r3, #0]
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000b30 	.word	0x20000b30
 8009eb4:	20000f90 	.word	0x20000f90
 8009eb8:	20000fa4 	.word	0x20000fa4
 8009ebc:	20000fc0 	.word	0x20000fc0
 8009ec0:	20000fd4 	.word	0x20000fd4
 8009ec4:	20000fec 	.word	0x20000fec
 8009ec8:	20000fb8 	.word	0x20000fb8
 8009ecc:	20000fbc 	.word	0x20000fbc

08009ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed6:	e019      	b.n	8009f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ed8:	f000 feb0 	bl	800ac3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009edc:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <prvCheckTasksWaitingTermination+0x50>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fd feab 	bl	8007c44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eee:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <prvCheckTasksWaitingTermination+0x54>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	4a0b      	ldr	r2, [pc, #44]	; (8009f24 <prvCheckTasksWaitingTermination+0x54>)
 8009ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ef8:	4b0b      	ldr	r3, [pc, #44]	; (8009f28 <prvCheckTasksWaitingTermination+0x58>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3b01      	subs	r3, #1
 8009efe:	4a0a      	ldr	r2, [pc, #40]	; (8009f28 <prvCheckTasksWaitingTermination+0x58>)
 8009f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f02:	f000 fecb 	bl	800ac9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f810 	bl	8009f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <prvCheckTasksWaitingTermination+0x58>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e1      	bne.n	8009ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000fd4 	.word	0x20000fd4
 8009f24:	20001000 	.word	0x20001000
 8009f28:	20000fe8 	.word	0x20000fe8

08009f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3354      	adds	r3, #84	; 0x54
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f003 fe3b 	bl	800dbb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d108      	bne.n	8009f5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f839 	bl	800afc4 <vPortFree>
				vPortFree( pxTCB );
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 f836 	bl	800afc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f58:	e018      	b.n	8009f8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d103      	bne.n	8009f6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f82d 	bl	800afc4 <vPortFree>
	}
 8009f6a:	e00f      	b.n	8009f8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d00a      	beq.n	8009f8c <prvDeleteTCB+0x60>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	60fb      	str	r3, [r7, #12]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <prvDeleteTCB+0x5e>
	}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f9a:	4b0e      	ldr	r3, [pc, #56]	; (8009fd4 <prvResetNextTaskUnblockTime+0x40>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <prvResetNextTaskUnblockTime+0x14>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e000      	b.n	8009faa <prvResetNextTaskUnblockTime+0x16>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d004      	beq.n	8009fb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <prvResetNextTaskUnblockTime+0x44>)
 8009fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fb6:	e008      	b.n	8009fca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009fb8:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <prvResetNextTaskUnblockTime+0x40>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	4a04      	ldr	r2, [pc, #16]	; (8009fd8 <prvResetNextTaskUnblockTime+0x44>)
 8009fc8:	6013      	str	r3, [r2, #0]
}
 8009fca:	bf00      	nop
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bc80      	pop	{r7}
 8009fd2:	4770      	bx	lr
 8009fd4:	20000fb8 	.word	0x20000fb8
 8009fd8:	20001020 	.word	0x20001020

08009fdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009fe2:	4b04      	ldr	r3, [pc, #16]	; (8009ff4 <xTaskGetCurrentTaskHandle+0x18>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009fe8:	687b      	ldr	r3, [r7, #4]
	}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bc80      	pop	{r7}
 8009ff2:	4770      	bx	lr
 8009ff4:	20000b2c 	.word	0x20000b2c

08009ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <xTaskGetSchedulerState+0x34>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a006:	2301      	movs	r3, #1
 800a008:	607b      	str	r3, [r7, #4]
 800a00a:	e008      	b.n	800a01e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a00c:	4b08      	ldr	r3, [pc, #32]	; (800a030 <xTaskGetSchedulerState+0x38>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a014:	2302      	movs	r3, #2
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	e001      	b.n	800a01e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a01a:	2300      	movs	r3, #0
 800a01c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a01e:	687b      	ldr	r3, [r7, #4]
	}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	bc80      	pop	{r7}
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	2000100c 	.word	0x2000100c
 800a030:	20001028 	.word	0x20001028

0800a034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a040:	2300      	movs	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d056      	beq.n	800a0f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04e:	4b2d      	ldr	r3, [pc, #180]	; (800a104 <xTaskPriorityInherit+0xd0>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	429a      	cmp	r2, r3
 800a056:	d246      	bcs.n	800a0e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	db06      	blt.n	800a06e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <xTaskPriorityInherit+0xd0>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6959      	ldr	r1, [r3, #20]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4a22      	ldr	r2, [pc, #136]	; (800a108 <xTaskPriorityInherit+0xd4>)
 800a080:	4413      	add	r3, r2
 800a082:	4299      	cmp	r1, r3
 800a084:	d101      	bne.n	800a08a <xTaskPriorityInherit+0x56>
 800a086:	2301      	movs	r3, #1
 800a088:	e000      	b.n	800a08c <xTaskPriorityInherit+0x58>
 800a08a:	2300      	movs	r3, #0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d022      	beq.n	800a0d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	3304      	adds	r3, #4
 800a094:	4618      	mov	r0, r3
 800a096:	f7fd fdd5 	bl	8007c44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a09a:	4b1a      	ldr	r3, [pc, #104]	; (800a104 <xTaskPriorityInherit+0xd0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0a8:	4b18      	ldr	r3, [pc, #96]	; (800a10c <xTaskPriorityInherit+0xd8>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d903      	bls.n	800a0b8 <xTaskPriorityInherit+0x84>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	4a15      	ldr	r2, [pc, #84]	; (800a10c <xTaskPriorityInherit+0xd8>)
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a10      	ldr	r2, [pc, #64]	; (800a108 <xTaskPriorityInherit+0xd4>)
 800a0c6:	441a      	add	r2, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fd fd5d 	bl	8007b8e <vListInsertEnd>
 800a0d4:	e004      	b.n	800a0e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <xTaskPriorityInherit+0xd0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e008      	b.n	800a0f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0ea:	4b06      	ldr	r3, [pc, #24]	; (800a104 <xTaskPriorityInherit+0xd0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d201      	bcs.n	800a0f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
	}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20000b2c 	.word	0x20000b2c
 800a108:	20000b30 	.word	0x20000b30
 800a10c:	20001008 	.word	0x20001008

0800a110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d056      	beq.n	800a1d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a126:	4b2e      	ldr	r3, [pc, #184]	; (800a1e0 <xTaskPriorityDisinherit+0xd0>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d00a      	beq.n	800a146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	60bb      	str	r3, [r7, #8]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a168:	1e5a      	subs	r2, r3, #1
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a176:	429a      	cmp	r2, r3
 800a178:	d02c      	beq.n	800a1d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d128      	bne.n	800a1d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	3304      	adds	r3, #4
 800a186:	4618      	mov	r0, r3
 800a188:	f7fd fd5c 	bl	8007c44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <xTaskPriorityDisinherit+0xd4>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d903      	bls.n	800a1b4 <xTaskPriorityDisinherit+0xa4>
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <xTaskPriorityDisinherit+0xd4>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <xTaskPriorityDisinherit+0xd8>)
 800a1c2:	441a      	add	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fd fcdf 	bl	8007b8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1d4:	697b      	ldr	r3, [r7, #20]
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000b2c 	.word	0x20000b2c
 800a1e4:	20001008 	.word	0x20001008
 800a1e8:	20000b30 	.word	0x20000b30

0800a1ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d06f      	beq.n	800a2e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	60fb      	str	r3, [r7, #12]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d902      	bls.n	800a232 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	61fb      	str	r3, [r7, #28]
 800a230:	e002      	b.n	800a238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a236:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d050      	beq.n	800a2e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d14b      	bne.n	800a2e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a24c:	4b27      	ldr	r3, [pc, #156]	; (800a2ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	429a      	cmp	r2, r3
 800a254:	d10a      	bne.n	800a26c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	60bb      	str	r3, [r7, #8]
}
 800a268:	bf00      	nop
 800a26a:	e7fe      	b.n	800a26a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	69fa      	ldr	r2, [r7, #28]
 800a276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	db04      	blt.n	800a28a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	6959      	ldr	r1, [r3, #20]
 800a28e:	693a      	ldr	r2, [r7, #16]
 800a290:	4613      	mov	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4a15      	ldr	r2, [pc, #84]	; (800a2f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a29a:	4413      	add	r3, r2
 800a29c:	4299      	cmp	r1, r3
 800a29e:	d101      	bne.n	800a2a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d01c      	beq.n	800a2e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fd fcc8 	bl	8007c44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b8:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d903      	bls.n	800a2c8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	4a0b      	ldr	r2, [pc, #44]	; (800a2f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4a06      	ldr	r2, [pc, #24]	; (800a2f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a2d6:	441a      	add	r2, r3
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f7fd fc55 	bl	8007b8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2e4:	bf00      	nop
 800a2e6:	3720      	adds	r7, #32
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20000b2c 	.word	0x20000b2c
 800a2f0:	20000b30 	.word	0x20000b30
 800a2f4:	20001008 	.word	0x20001008

0800a2f8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <uxTaskResetEventItemValue+0x2c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a306:	4b07      	ldr	r3, [pc, #28]	; (800a324 <uxTaskResetEventItemValue+0x2c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4b05      	ldr	r3, [pc, #20]	; (800a324 <uxTaskResetEventItemValue+0x2c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a314:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a316:	687b      	ldr	r3, [r7, #4]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bc80      	pop	{r7}
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	20000b2c 	.word	0x20000b2c

0800a328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <pvTaskIncrementMutexHeldCount+0x24>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <pvTaskIncrementMutexHeldCount+0x24>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a33a:	3201      	adds	r2, #1
 800a33c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a33e:	4b03      	ldr	r3, [pc, #12]	; (800a34c <pvTaskIncrementMutexHeldCount+0x24>)
 800a340:	681b      	ldr	r3, [r3, #0]
	}
 800a342:	4618      	mov	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20000b2c 	.word	0x20000b2c

0800a350 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a35a:	4b21      	ldr	r3, [pc, #132]	; (800a3e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a360:	4b20      	ldr	r3, [pc, #128]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3304      	adds	r3, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fd fc6c 	bl	8007c44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d10a      	bne.n	800a38a <prvAddCurrentTaskToDelayedList+0x3a>
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a37a:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4819      	ldr	r0, [pc, #100]	; (800a3e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a384:	f7fd fc03 	bl	8007b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a388:	e026      	b.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4413      	add	r3, r2
 800a390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a392:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d209      	bcs.n	800a3b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	4610      	mov	r0, r2
 800a3b0:	f7fd fc10 	bl	8007bd4 <vListInsert>
}
 800a3b4:	e010      	b.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3b6:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f7fd fc06 	bl	8007bd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d202      	bcs.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3d2:	4a08      	ldr	r2, [pc, #32]	; (800a3f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	6013      	str	r3, [r2, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20001004 	.word	0x20001004
 800a3e4:	20000b2c 	.word	0x20000b2c
 800a3e8:	20000fec 	.word	0x20000fec
 800a3ec:	20000fbc 	.word	0x20000fbc
 800a3f0:	20000fb8 	.word	0x20000fb8
 800a3f4:	20001020 	.word	0x20001020

0800a3f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a402:	f000 facb 	bl	800a99c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a406:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <xTimerCreateTimerTask+0x80>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d021      	beq.n	800a452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a416:	1d3a      	adds	r2, r7, #4
 800a418:	f107 0108 	add.w	r1, r7, #8
 800a41c:	f107 030c 	add.w	r3, r7, #12
 800a420:	4618      	mov	r0, r3
 800a422:	f7fd f907 	bl	8007634 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	9202      	str	r2, [sp, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	2302      	movs	r3, #2
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2300      	movs	r3, #0
 800a436:	460a      	mov	r2, r1
 800a438:	4910      	ldr	r1, [pc, #64]	; (800a47c <xTimerCreateTimerTask+0x84>)
 800a43a:	4811      	ldr	r0, [pc, #68]	; (800a480 <xTimerCreateTimerTask+0x88>)
 800a43c:	f7fe fd28 	bl	8008e90 <xTaskCreateStatic>
 800a440:	4603      	mov	r3, r0
 800a442:	4a10      	ldr	r2, [pc, #64]	; (800a484 <xTimerCreateTimerTask+0x8c>)
 800a444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <xTimerCreateTimerTask+0x8c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a44e:	2301      	movs	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	613b      	str	r3, [r7, #16]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a46e:	697b      	ldr	r3, [r7, #20]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	2000105c 	.word	0x2000105c
 800a47c:	0800ed38 	.word	0x0800ed38
 800a480:	0800a5a5 	.word	0x0800a5a5
 800a484:	20001060 	.word	0x20001060

0800a488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08a      	sub	sp, #40	; 0x28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a496:	2300      	movs	r3, #0
 800a498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	623b      	str	r3, [r7, #32]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4b6:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <xTimerGenericCommand+0x98>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d02a      	beq.n	800a514 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b05      	cmp	r3, #5
 800a4ce:	dc18      	bgt.n	800a502 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4d0:	f7ff fd92 	bl	8009ff8 <xTaskGetSchedulerState>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d109      	bne.n	800a4ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4da:	4b11      	ldr	r3, [pc, #68]	; (800a520 <xTimerGenericCommand+0x98>)
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	f107 0110 	add.w	r1, r7, #16
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e6:	f7fd fe39 	bl	800815c <xQueueGenericSend>
 800a4ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a4ec:	e012      	b.n	800a514 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	; (800a520 <xTimerGenericCommand+0x98>)
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	f107 0110 	add.w	r1, r7, #16
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f7fd fe2f 	bl	800815c <xQueueGenericSend>
 800a4fe:	6278      	str	r0, [r7, #36]	; 0x24
 800a500:	e008      	b.n	800a514 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <xTimerGenericCommand+0x98>)
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	f107 0110 	add.w	r1, r7, #16
 800a50a:	2300      	movs	r3, #0
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	f7fd ff23 	bl	8008358 <xQueueGenericSendFromISR>
 800a512:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a516:	4618      	mov	r0, r3
 800a518:	3728      	adds	r7, #40	; 0x28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	2000105c 	.word	0x2000105c

0800a524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af02      	add	r7, sp, #8
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a52e:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <prvProcessExpiredTimer+0x7c>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd fb81 	bl	8007c44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d122      	bne.n	800a590 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	699a      	ldr	r2, [r3, #24]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	18d1      	adds	r1, r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f000 f8c8 	bl	800a6ec <prvInsertTimerInActiveList>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d016      	beq.n	800a590 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a562:	2300      	movs	r3, #0
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	2300      	movs	r3, #0
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	2100      	movs	r1, #0
 800a56c:	6978      	ldr	r0, [r7, #20]
 800a56e:	f7ff ff8b 	bl	800a488 <xTimerGenericCommand>
 800a572:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10a      	bne.n	800a590 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	60fb      	str	r3, [r7, #12]
}
 800a58c:	bf00      	nop
 800a58e:	e7fe      	b.n	800a58e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	6978      	ldr	r0, [r7, #20]
 800a596:	4798      	blx	r3
}
 800a598:	bf00      	nop
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20001054 	.word	0x20001054

0800a5a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5ac:	f107 0308 	add.w	r3, r7, #8
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f857 	bl	800a664 <prvGetNextExpireTime>
 800a5b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 f803 	bl	800a5c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5c2:	f000 f8d5 	bl	800a770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5c6:	e7f1      	b.n	800a5ac <prvTimerTask+0x8>

0800a5c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5d2:	f7ff f861 	bl	8009698 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5d6:	f107 0308 	add.w	r3, r7, #8
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 f866 	bl	800a6ac <prvSampleTimeNow>
 800a5e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d130      	bne.n	800a64a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10a      	bne.n	800a604 <prvProcessTimerOrBlockTask+0x3c>
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d806      	bhi.n	800a604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5f6:	f7ff f85d 	bl	80096b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5fa:	68f9      	ldr	r1, [r7, #12]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff ff91 	bl	800a524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a602:	e024      	b.n	800a64e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d008      	beq.n	800a61c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a60a:	4b13      	ldr	r3, [pc, #76]	; (800a658 <prvProcessTimerOrBlockTask+0x90>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	bf0c      	ite	eq
 800a614:	2301      	moveq	r3, #1
 800a616:	2300      	movne	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a61c:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <prvProcessTimerOrBlockTask+0x94>)
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4619      	mov	r1, r3
 800a62a:	f7fe fbfd 	bl	8008e28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a62e:	f7ff f841 	bl	80096b4 <xTaskResumeAll>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a638:	4b09      	ldr	r3, [pc, #36]	; (800a660 <prvProcessTimerOrBlockTask+0x98>)
 800a63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	f3bf 8f6f 	isb	sy
}
 800a648:	e001      	b.n	800a64e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a64a:	f7ff f833 	bl	80096b4 <xTaskResumeAll>
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20001058 	.word	0x20001058
 800a65c:	2000105c 	.word	0x2000105c
 800a660:	e000ed04 	.word	0xe000ed04

0800a664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <prvGetNextExpireTime+0x44>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	bf0c      	ite	eq
 800a676:	2301      	moveq	r3, #1
 800a678:	2300      	movne	r3, #0
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	461a      	mov	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d105      	bne.n	800a696 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a68a:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <prvGetNextExpireTime+0x44>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e001      	b.n	800a69a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a69a:	68fb      	ldr	r3, [r7, #12]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bc80      	pop	{r7}
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	20001054 	.word	0x20001054

0800a6ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6b4:	f7ff f89c 	bl	80097f0 <xTaskGetTickCount>
 800a6b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6ba:	4b0b      	ldr	r3, [pc, #44]	; (800a6e8 <prvSampleTimeNow+0x3c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d205      	bcs.n	800a6d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6c4:	f000 f908 	bl	800a8d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	e002      	b.n	800a6d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6d6:	4a04      	ldr	r2, [pc, #16]	; (800a6e8 <prvSampleTimeNow+0x3c>)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20001064 	.word	0x20001064

0800a6ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d812      	bhi.n	800a738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	1ad2      	subs	r2, r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699b      	ldr	r3, [r3, #24]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d302      	bcc.n	800a726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a720:	2301      	movs	r3, #1
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	e01b      	b.n	800a75e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a726:	4b10      	ldr	r3, [pc, #64]	; (800a768 <prvInsertTimerInActiveList+0x7c>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	3304      	adds	r3, #4
 800a72e:	4619      	mov	r1, r3
 800a730:	4610      	mov	r0, r2
 800a732:	f7fd fa4f 	bl	8007bd4 <vListInsert>
 800a736:	e012      	b.n	800a75e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d206      	bcs.n	800a74e <prvInsertTimerInActiveList+0x62>
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	429a      	cmp	r2, r3
 800a746:	d302      	bcc.n	800a74e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a748:	2301      	movs	r3, #1
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	e007      	b.n	800a75e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a74e:	4b07      	ldr	r3, [pc, #28]	; (800a76c <prvInsertTimerInActiveList+0x80>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3304      	adds	r3, #4
 800a756:	4619      	mov	r1, r3
 800a758:	4610      	mov	r0, r2
 800a75a:	f7fd fa3b 	bl	8007bd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a75e:	697b      	ldr	r3, [r7, #20]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	20001058 	.word	0x20001058
 800a76c:	20001054 	.word	0x20001054

0800a770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b08e      	sub	sp, #56	; 0x38
 800a774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a776:	e09d      	b.n	800a8b4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	da18      	bge.n	800a7b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a77e:	1d3b      	adds	r3, r7, #4
 800a780:	3304      	adds	r3, #4
 800a782:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	61fb      	str	r3, [r7, #28]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a6:	6850      	ldr	r0, [r2, #4]
 800a7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7aa:	6892      	ldr	r2, [r2, #8]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	db7e      	blt.n	800a8b4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d004      	beq.n	800a7cc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fd fa3c 	bl	8007c44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7cc:	463b      	mov	r3, r7
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff ff6c 	bl	800a6ac <prvSampleTimeNow>
 800a7d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b09      	cmp	r3, #9
 800a7da:	d86a      	bhi.n	800a8b2 <prvProcessReceivedCommands+0x142>
 800a7dc:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <prvProcessReceivedCommands+0x74>)
 800a7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e2:	bf00      	nop
 800a7e4:	0800a80d 	.word	0x0800a80d
 800a7e8:	0800a80d 	.word	0x0800a80d
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a8b5 	.word	0x0800a8b5
 800a7f4:	0800a869 	.word	0x0800a869
 800a7f8:	0800a8a1 	.word	0x0800a8a1
 800a7fc:	0800a80d 	.word	0x0800a80d
 800a800:	0800a80d 	.word	0x0800a80d
 800a804:	0800a8b5 	.word	0x0800a8b5
 800a808:	0800a869 	.word	0x0800a869
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	699b      	ldr	r3, [r3, #24]
 800a812:	18d1      	adds	r1, r2, r3
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a81a:	f7ff ff67 	bl	800a6ec <prvInsertTimerInActiveList>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d047      	beq.n	800a8b4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a82a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d13f      	bne.n	800a8b4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	441a      	add	r2, r3
 800a83c:	2300      	movs	r3, #0
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	2100      	movs	r1, #0
 800a844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a846:	f7ff fe1f 	bl	800a488 <xTimerGenericCommand>
 800a84a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d130      	bne.n	800a8b4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	61bb      	str	r3, [r7, #24]
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10a      	bne.n	800a88c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	617b      	str	r3, [r7, #20]
}
 800a888:	bf00      	nop
 800a88a:	e7fe      	b.n	800a88a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	699a      	ldr	r2, [r3, #24]
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	18d1      	adds	r1, r2, r3
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89a:	f7ff ff27 	bl	800a6ec <prvInsertTimerInActiveList>
					break;
 800a89e:	e009      	b.n	800a8b4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d104      	bne.n	800a8b4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ac:	f000 fb8a 	bl	800afc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8b0:	e000      	b.n	800a8b4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a8b2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8b4:	4b07      	ldr	r3, [pc, #28]	; (800a8d4 <prvProcessReceivedCommands+0x164>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	1d39      	adds	r1, r7, #4
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd fe71 	bl	80085a4 <xQueueReceive>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f47f af57 	bne.w	800a778 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	3730      	adds	r7, #48	; 0x30
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	2000105c 	.word	0x2000105c

0800a8d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8de:	e045      	b.n	800a96c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8e0:	4b2c      	ldr	r3, [pc, #176]	; (800a994 <prvSwitchTimerLists+0xbc>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8ea:	4b2a      	ldr	r3, [pc, #168]	; (800a994 <prvSwitchTimerLists+0xbc>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd f9a3 	bl	8007c44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d12e      	bne.n	800a96c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	4413      	add	r3, r2
 800a916:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d90e      	bls.n	800a93e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a92c:	4b19      	ldr	r3, [pc, #100]	; (800a994 <prvSwitchTimerLists+0xbc>)
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3304      	adds	r3, #4
 800a934:	4619      	mov	r1, r3
 800a936:	4610      	mov	r0, r2
 800a938:	f7fd f94c 	bl	8007bd4 <vListInsert>
 800a93c:	e016      	b.n	800a96c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a93e:	2300      	movs	r3, #0
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	2300      	movs	r3, #0
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	2100      	movs	r1, #0
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7ff fd9d 	bl	800a488 <xTimerGenericCommand>
 800a94e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <prvSwitchTimerLists+0x94>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	603b      	str	r3, [r7, #0]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a96c:	4b09      	ldr	r3, [pc, #36]	; (800a994 <prvSwitchTimerLists+0xbc>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1b4      	bne.n	800a8e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <prvSwitchTimerLists+0xbc>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <prvSwitchTimerLists+0xc0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a04      	ldr	r2, [pc, #16]	; (800a994 <prvSwitchTimerLists+0xbc>)
 800a982:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <prvSwitchTimerLists+0xc0>)
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	6013      	str	r3, [r2, #0]
}
 800a98a:	bf00      	nop
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20001054 	.word	0x20001054
 800a998:	20001058 	.word	0x20001058

0800a99c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9a2:	f000 f94b 	bl	800ac3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9a6:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <prvCheckForValidListAndQueue+0x60>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d120      	bne.n	800a9f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9ae:	4814      	ldr	r0, [pc, #80]	; (800aa00 <prvCheckForValidListAndQueue+0x64>)
 800a9b0:	f7fd f8c2 	bl	8007b38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9b4:	4813      	ldr	r0, [pc, #76]	; (800aa04 <prvCheckForValidListAndQueue+0x68>)
 800a9b6:	f7fd f8bf 	bl	8007b38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9ba:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <prvCheckForValidListAndQueue+0x6c>)
 800a9bc:	4a10      	ldr	r2, [pc, #64]	; (800aa00 <prvCheckForValidListAndQueue+0x64>)
 800a9be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9c0:	4b12      	ldr	r3, [pc, #72]	; (800aa0c <prvCheckForValidListAndQueue+0x70>)
 800a9c2:	4a10      	ldr	r2, [pc, #64]	; (800aa04 <prvCheckForValidListAndQueue+0x68>)
 800a9c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <prvCheckForValidListAndQueue+0x74>)
 800a9cc:	4a11      	ldr	r2, [pc, #68]	; (800aa14 <prvCheckForValidListAndQueue+0x78>)
 800a9ce:	2110      	movs	r1, #16
 800a9d0:	200a      	movs	r0, #10
 800a9d2:	f7fd f9c9 	bl	8007d68 <xQueueGenericCreateStatic>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4a08      	ldr	r2, [pc, #32]	; (800a9fc <prvCheckForValidListAndQueue+0x60>)
 800a9da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9dc:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <prvCheckForValidListAndQueue+0x60>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <prvCheckForValidListAndQueue+0x60>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	490b      	ldr	r1, [pc, #44]	; (800aa18 <prvCheckForValidListAndQueue+0x7c>)
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe f9ca 	bl	8008d84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9f0:	f000 f954 	bl	800ac9c <vPortExitCritical>
}
 800a9f4:	bf00      	nop
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	2000105c 	.word	0x2000105c
 800aa00:	2000102c 	.word	0x2000102c
 800aa04:	20001040 	.word	0x20001040
 800aa08:	20001054 	.word	0x20001054
 800aa0c:	20001058 	.word	0x20001058
 800aa10:	20001108 	.word	0x20001108
 800aa14:	20001068 	.word	0x20001068
 800aa18:	0800ed40 	.word	0x0800ed40

0800aa1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800aa2a:	f06f 0301 	mvn.w	r3, #1
 800aa2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa3c:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <xTimerPendFunctionCallFromISR+0x3c>)
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	f107 0114 	add.w	r1, r7, #20
 800aa44:	2300      	movs	r3, #0
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	f7fd fc86 	bl	8008358 <xQueueGenericSendFromISR>
 800aa4c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3728      	adds	r7, #40	; 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	2000105c 	.word	0x2000105c

0800aa5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3b04      	subs	r3, #4
 800aa6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3b04      	subs	r3, #4
 800aa7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f023 0201 	bic.w	r2, r3, #1
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3b04      	subs	r3, #4
 800aa8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa8c:	4a08      	ldr	r2, [pc, #32]	; (800aab0 <pxPortInitialiseStack+0x54>)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	3b14      	subs	r3, #20
 800aa96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3b20      	subs	r3, #32
 800aaa2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr
 800aab0:	0800aab5 	.word	0x0800aab5

0800aab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aabe:	4b12      	ldr	r3, [pc, #72]	; (800ab08 <prvTaskExitError+0x54>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac6:	d00a      	beq.n	800aade <prvTaskExitError+0x2a>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	60fb      	str	r3, [r7, #12]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <prvTaskExitError+0x28>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60bb      	str	r3, [r7, #8]
}
 800aaf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aaf2:	bf00      	nop
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0fc      	beq.n	800aaf4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aafa:	bf00      	nop
 800aafc:	bf00      	nop
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bc80      	pop	{r7}
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	20000050 	.word	0x20000050
 800ab0c:	00000000 	.word	0x00000000

0800ab10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab10:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <pxCurrentTCBConst2>)
 800ab12:	6819      	ldr	r1, [r3, #0]
 800ab14:	6808      	ldr	r0, [r1, #0]
 800ab16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ab1a:	f380 8809 	msr	PSP, r0
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f04f 0000 	mov.w	r0, #0
 800ab26:	f380 8811 	msr	BASEPRI, r0
 800ab2a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ab2e:	4770      	bx	lr

0800ab30 <pxCurrentTCBConst2>:
 800ab30:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop

0800ab38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ab38:	4806      	ldr	r0, [pc, #24]	; (800ab54 <prvPortStartFirstTask+0x1c>)
 800ab3a:	6800      	ldr	r0, [r0, #0]
 800ab3c:	6800      	ldr	r0, [r0, #0]
 800ab3e:	f380 8808 	msr	MSP, r0
 800ab42:	b662      	cpsie	i
 800ab44:	b661      	cpsie	f
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	df00      	svc	0
 800ab50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab52:	bf00      	nop
 800ab54:	e000ed08 	.word	0xe000ed08

0800ab58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab5e:	4b32      	ldr	r3, [pc, #200]	; (800ac28 <xPortStartScheduler+0xd0>)
 800ab60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	22ff      	movs	r2, #255	; 0xff
 800ab6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	4b2a      	ldr	r3, [pc, #168]	; (800ac2c <xPortStartScheduler+0xd4>)
 800ab84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab86:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <xPortStartScheduler+0xd8>)
 800ab88:	2207      	movs	r2, #7
 800ab8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab8c:	e009      	b.n	800aba2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ab8e:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <xPortStartScheduler+0xd8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	4a26      	ldr	r2, [pc, #152]	; (800ac30 <xPortStartScheduler+0xd8>)
 800ab96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aba2:	78fb      	ldrb	r3, [r7, #3]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abaa:	2b80      	cmp	r3, #128	; 0x80
 800abac:	d0ef      	beq.n	800ab8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abae:	4b20      	ldr	r3, [pc, #128]	; (800ac30 <xPortStartScheduler+0xd8>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f1c3 0307 	rsb	r3, r3, #7
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d00a      	beq.n	800abd0 <xPortStartScheduler+0x78>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	60bb      	str	r3, [r7, #8]
}
 800abcc:	bf00      	nop
 800abce:	e7fe      	b.n	800abce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abd0:	4b17      	ldr	r3, [pc, #92]	; (800ac30 <xPortStartScheduler+0xd8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	021b      	lsls	r3, r3, #8
 800abd6:	4a16      	ldr	r2, [pc, #88]	; (800ac30 <xPortStartScheduler+0xd8>)
 800abd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abda:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <xPortStartScheduler+0xd8>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abe2:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <xPortStartScheduler+0xd8>)
 800abe4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abee:	4b11      	ldr	r3, [pc, #68]	; (800ac34 <xPortStartScheduler+0xdc>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a10      	ldr	r2, [pc, #64]	; (800ac34 <xPortStartScheduler+0xdc>)
 800abf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abfa:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <xPortStartScheduler+0xdc>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a0d      	ldr	r2, [pc, #52]	; (800ac34 <xPortStartScheduler+0xdc>)
 800ac00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac06:	f000 f8b9 	bl	800ad7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac0a:	4b0b      	ldr	r3, [pc, #44]	; (800ac38 <xPortStartScheduler+0xe0>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac10:	f7ff ff92 	bl	800ab38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac14:	f7fe feca 	bl	80099ac <vTaskSwitchContext>
	prvTaskExitError();
 800ac18:	f7ff ff4c 	bl	800aab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	e000e400 	.word	0xe000e400
 800ac2c:	20001158 	.word	0x20001158
 800ac30:	2000115c 	.word	0x2000115c
 800ac34:	e000ed20 	.word	0xe000ed20
 800ac38:	20000050 	.word	0x20000050

0800ac3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	607b      	str	r3, [r7, #4]
}
 800ac54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <vPortEnterCritical+0x58>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	4a0d      	ldr	r2, [pc, #52]	; (800ac94 <vPortEnterCritical+0x58>)
 800ac5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac60:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <vPortEnterCritical+0x58>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d10f      	bne.n	800ac88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac68:	4b0b      	ldr	r3, [pc, #44]	; (800ac98 <vPortEnterCritical+0x5c>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00a      	beq.n	800ac88 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	603b      	str	r3, [r7, #0]
}
 800ac84:	bf00      	nop
 800ac86:	e7fe      	b.n	800ac86 <vPortEnterCritical+0x4a>
	}
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bc80      	pop	{r7}
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	20000050 	.word	0x20000050
 800ac98:	e000ed04 	.word	0xe000ed04

0800ac9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aca2:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <vPortExitCritical+0x4c>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10a      	bne.n	800acc0 <vPortExitCritical+0x24>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	607b      	str	r3, [r7, #4]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <vPortExitCritical+0x4c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	4a08      	ldr	r2, [pc, #32]	; (800ace8 <vPortExitCritical+0x4c>)
 800acc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <vPortExitCritical+0x4c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d105      	bne.n	800acde <vPortExitCritical+0x42>
 800acd2:	2300      	movs	r3, #0
 800acd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	f383 8811 	msr	BASEPRI, r3
}
 800acdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr
 800ace8:	20000050 	.word	0x20000050
 800acec:	00000000 	.word	0x00000000

0800acf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800acf0:	f3ef 8009 	mrs	r0, PSP
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <pxCurrentTCBConst>)
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad00:	6010      	str	r0, [r2, #0]
 800ad02:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ad06:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad0a:	f380 8811 	msr	BASEPRI, r0
 800ad0e:	f7fe fe4d 	bl	80099ac <vTaskSwitchContext>
 800ad12:	f04f 0000 	mov.w	r0, #0
 800ad16:	f380 8811 	msr	BASEPRI, r0
 800ad1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad1e:	6819      	ldr	r1, [r3, #0]
 800ad20:	6808      	ldr	r0, [r1, #0]
 800ad22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad26:	f380 8809 	msr	PSP, r0
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	4770      	bx	lr

0800ad30 <pxCurrentTCBConst>:
 800ad30:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop

0800ad38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	607b      	str	r3, [r7, #4]
}
 800ad50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad52:	f7fe fd6d 	bl	8009830 <xTaskIncrementTick>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d003      	beq.n	800ad64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad5c:	4b06      	ldr	r3, [pc, #24]	; (800ad78 <xPortSysTickHandler+0x40>)
 800ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	2300      	movs	r3, #0
 800ad66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	f383 8811 	msr	BASEPRI, r3
}
 800ad6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	e000ed04 	.word	0xe000ed04

0800ad7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad80:	4b0a      	ldr	r3, [pc, #40]	; (800adac <vPortSetupTimerInterrupt+0x30>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad86:	4b0a      	ldr	r3, [pc, #40]	; (800adb0 <vPortSetupTimerInterrupt+0x34>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad8c:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <vPortSetupTimerInterrupt+0x38>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a09      	ldr	r2, [pc, #36]	; (800adb8 <vPortSetupTimerInterrupt+0x3c>)
 800ad92:	fba2 2303 	umull	r2, r3, r2, r3
 800ad96:	099b      	lsrs	r3, r3, #6
 800ad98:	4a08      	ldr	r2, [pc, #32]	; (800adbc <vPortSetupTimerInterrupt+0x40>)
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad9e:	4b03      	ldr	r3, [pc, #12]	; (800adac <vPortSetupTimerInterrupt+0x30>)
 800ada0:	2207      	movs	r2, #7
 800ada2:	601a      	str	r2, [r3, #0]
}
 800ada4:	bf00      	nop
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr
 800adac:	e000e010 	.word	0xe000e010
 800adb0:	e000e018 	.word	0xe000e018
 800adb4:	20000044 	.word	0x20000044
 800adb8:	10624dd3 	.word	0x10624dd3
 800adbc:	e000e014 	.word	0xe000e014

0800adc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800adc6:	f3ef 8305 	mrs	r3, IPSR
 800adca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b0f      	cmp	r3, #15
 800add0:	d914      	bls.n	800adfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800add2:	4a16      	ldr	r2, [pc, #88]	; (800ae2c <vPortValidateInterruptPriority+0x6c>)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800addc:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <vPortValidateInterruptPriority+0x70>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	7afa      	ldrb	r2, [r7, #11]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d20a      	bcs.n	800adfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	607b      	str	r3, [r7, #4]
}
 800adf8:	bf00      	nop
 800adfa:	e7fe      	b.n	800adfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adfc:	4b0d      	ldr	r3, [pc, #52]	; (800ae34 <vPortValidateInterruptPriority+0x74>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae04:	4b0c      	ldr	r3, [pc, #48]	; (800ae38 <vPortValidateInterruptPriority+0x78>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d90a      	bls.n	800ae22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	603b      	str	r3, [r7, #0]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <vPortValidateInterruptPriority+0x60>
	}
 800ae22:	bf00      	nop
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bc80      	pop	{r7}
 800ae2a:	4770      	bx	lr
 800ae2c:	e000e3f0 	.word	0xe000e3f0
 800ae30:	20001158 	.word	0x20001158
 800ae34:	e000ed0c 	.word	0xe000ed0c
 800ae38:	2000115c 	.word	0x2000115c

0800ae3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08a      	sub	sp, #40	; 0x28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae48:	f7fe fc26 	bl	8009698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae4c:	4b58      	ldr	r3, [pc, #352]	; (800afb0 <pvPortMalloc+0x174>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae54:	f000 f910 	bl	800b078 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae58:	4b56      	ldr	r3, [pc, #344]	; (800afb4 <pvPortMalloc+0x178>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f040 808e 	bne.w	800af82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01d      	beq.n	800aea8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae6c:	2208      	movs	r2, #8
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4413      	add	r3, r2
 800ae72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d014      	beq.n	800aea8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f023 0307 	bic.w	r3, r3, #7
 800ae84:	3308      	adds	r3, #8
 800ae86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <pvPortMalloc+0x6c>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	617b      	str	r3, [r7, #20]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d069      	beq.n	800af82 <pvPortMalloc+0x146>
 800aeae:	4b42      	ldr	r3, [pc, #264]	; (800afb8 <pvPortMalloc+0x17c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d864      	bhi.n	800af82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aeb8:	4b40      	ldr	r3, [pc, #256]	; (800afbc <pvPortMalloc+0x180>)
 800aeba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aebc:	4b3f      	ldr	r3, [pc, #252]	; (800afbc <pvPortMalloc+0x180>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aec2:	e004      	b.n	800aece <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d903      	bls.n	800aee0 <pvPortMalloc+0xa4>
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f1      	bne.n	800aec4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aee0:	4b33      	ldr	r3, [pc, #204]	; (800afb0 <pvPortMalloc+0x174>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d04b      	beq.n	800af82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aeea:	6a3b      	ldr	r3, [r7, #32]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2208      	movs	r2, #8
 800aef0:	4413      	add	r3, r2
 800aef2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	1ad2      	subs	r2, r2, r3
 800af04:	2308      	movs	r3, #8
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	429a      	cmp	r2, r3
 800af0a:	d91f      	bls.n	800af4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4413      	add	r3, r2
 800af12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00a      	beq.n	800af34 <pvPortMalloc+0xf8>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	613b      	str	r3, [r7, #16]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	1ad2      	subs	r2, r2, r3
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af46:	69b8      	ldr	r0, [r7, #24]
 800af48:	f000 f8f8 	bl	800b13c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af4c:	4b1a      	ldr	r3, [pc, #104]	; (800afb8 <pvPortMalloc+0x17c>)
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	4a18      	ldr	r2, [pc, #96]	; (800afb8 <pvPortMalloc+0x17c>)
 800af58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af5a:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <pvPortMalloc+0x17c>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	4b18      	ldr	r3, [pc, #96]	; (800afc0 <pvPortMalloc+0x184>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	d203      	bcs.n	800af6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af66:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <pvPortMalloc+0x17c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a15      	ldr	r2, [pc, #84]	; (800afc0 <pvPortMalloc+0x184>)
 800af6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	4b10      	ldr	r3, [pc, #64]	; (800afb4 <pvPortMalloc+0x178>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	431a      	orrs	r2, r3
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af82:	f7fe fb97 	bl	80096b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <pvPortMalloc+0x16a>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60fb      	str	r3, [r7, #12]
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <pvPortMalloc+0x168>
	return pvReturn;
 800afa6:	69fb      	ldr	r3, [r7, #28]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3728      	adds	r7, #40	; 0x28
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20003568 	.word	0x20003568
 800afb4:	20003574 	.word	0x20003574
 800afb8:	2000356c 	.word	0x2000356c
 800afbc:	20003560 	.word	0x20003560
 800afc0:	20003570 	.word	0x20003570

0800afc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d048      	beq.n	800b068 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afd6:	2308      	movs	r3, #8
 800afd8:	425b      	negs	r3, r3
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	4413      	add	r3, r2
 800afde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	4b21      	ldr	r3, [pc, #132]	; (800b070 <vPortFree+0xac>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4013      	ands	r3, r2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10a      	bne.n	800b008 <vPortFree+0x44>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60fb      	str	r3, [r7, #12]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <vPortFree+0x62>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	60bb      	str	r3, [r7, #8]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	4b11      	ldr	r3, [pc, #68]	; (800b070 <vPortFree+0xac>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4013      	ands	r3, r2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d019      	beq.n	800b068 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d115      	bne.n	800b068 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	4b0b      	ldr	r3, [pc, #44]	; (800b070 <vPortFree+0xac>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	43db      	mvns	r3, r3
 800b046:	401a      	ands	r2, r3
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b04c:	f7fe fb24 	bl	8009698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	4b07      	ldr	r3, [pc, #28]	; (800b074 <vPortFree+0xb0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4413      	add	r3, r2
 800b05a:	4a06      	ldr	r2, [pc, #24]	; (800b074 <vPortFree+0xb0>)
 800b05c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b05e:	6938      	ldr	r0, [r7, #16]
 800b060:	f000 f86c 	bl	800b13c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b064:	f7fe fb26 	bl	80096b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b068:	bf00      	nop
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20003574 	.word	0x20003574
 800b074:	2000356c 	.word	0x2000356c

0800b078 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b07e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b082:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b084:	4b27      	ldr	r3, [pc, #156]	; (800b124 <prvHeapInit+0xac>)
 800b086:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00c      	beq.n	800b0ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3307      	adds	r3, #7
 800b096:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	4a1f      	ldr	r2, [pc, #124]	; (800b124 <prvHeapInit+0xac>)
 800b0a8:	4413      	add	r3, r2
 800b0aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b0b0:	4a1d      	ldr	r2, [pc, #116]	; (800b128 <prvHeapInit+0xb0>)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b0b6:	4b1c      	ldr	r3, [pc, #112]	; (800b128 <prvHeapInit+0xb0>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0c4:	2208      	movs	r2, #8
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	1a9b      	subs	r3, r3, r2
 800b0ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f023 0307 	bic.w	r3, r3, #7
 800b0d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4a15      	ldr	r2, [pc, #84]	; (800b12c <prvHeapInit+0xb4>)
 800b0d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <prvHeapInit+0xb4>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0e2:	4b12      	ldr	r3, [pc, #72]	; (800b12c <prvHeapInit+0xb4>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	1ad2      	subs	r2, r2, r3
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <prvHeapInit+0xb4>)
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4a0a      	ldr	r2, [pc, #40]	; (800b130 <prvHeapInit+0xb8>)
 800b106:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	4a09      	ldr	r2, [pc, #36]	; (800b134 <prvHeapInit+0xbc>)
 800b10e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b110:	4b09      	ldr	r3, [pc, #36]	; (800b138 <prvHeapInit+0xc0>)
 800b112:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b116:	601a      	str	r2, [r3, #0]
}
 800b118:	bf00      	nop
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bc80      	pop	{r7}
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20001160 	.word	0x20001160
 800b128:	20003560 	.word	0x20003560
 800b12c:	20003568 	.word	0x20003568
 800b130:	20003570 	.word	0x20003570
 800b134:	2000356c 	.word	0x2000356c
 800b138:	20003574 	.word	0x20003574

0800b13c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b144:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <prvInsertBlockIntoFreeList+0xa8>)
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e002      	b.n	800b150 <prvInsertBlockIntoFreeList+0x14>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	429a      	cmp	r2, r3
 800b158:	d8f7      	bhi.n	800b14a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	4413      	add	r3, r2
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d108      	bne.n	800b17e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	441a      	add	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	441a      	add	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d118      	bne.n	800b1c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <prvInsertBlockIntoFreeList+0xac>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d00d      	beq.n	800b1ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	441a      	add	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	e008      	b.n	800b1cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b1ba:	4b0b      	ldr	r3, [pc, #44]	; (800b1e8 <prvInsertBlockIntoFreeList+0xac>)
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e003      	b.n	800b1cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d002      	beq.n	800b1da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr
 800b1e4:	20003560 	.word	0x20003560
 800b1e8:	20003568 	.word	0x20003568

0800b1ec <PowerPublisher_Task>:
  .stack_size = 200 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

void PowerPublisher_Task(void* arg)
{
 800b1ec:	b590      	push	{r4, r7, lr}
 800b1ee:	b09d      	sub	sp, #116	; 0x74
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	6078      	str	r0, [r7, #4]
	PowerPublisher_HandlerStruct* publisher = (PowerPublisher_HandlerStruct*) arg;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	667b      	str	r3, [r7, #100]	; 0x64
	CANFrame_TxHeaderTypedef txHeader;
	txHeader.MessageType = CANFRAME_MSGTYPE_DATA_FRAME;
 800b1f8:	2304      	movs	r3, #4
 800b1fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	txHeader.TargetNode = CANFRAME_DISTANCE_ID;
 800b1fe:	2305      	movs	r3, #5
 800b200:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	char Name[] = "PWRLGPS";
 800b204:	4a29      	ldr	r2, [pc, #164]	; (800b2ac <PowerPublisher_Task+0xc0>)
 800b206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b20a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b20e:	e883 0003 	stmia.w	r3, {r0, r1}
	char txbuff[55];
	uint32_t startTime;
	int32_t delayTime;
	while(1)
	{
		if(!publisher->isEnable)
 800b212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b214:	7e1b      	ldrb	r3, [r3, #24]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d104      	bne.n	800b224 <PowerPublisher_Task+0x38>
		{
			osThreadSuspend(publisher->Thread);
 800b21a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fb fd22 	bl	8006c68 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800b224:	f7fb fc12 	bl	8006a4c <osKernelGetTickCount>
 800b228:	6638      	str	r0, [r7, #96]	; 0x60
		Power = INA219_ReadPower(publisher->INA219);
 800b22a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fe37 	bl	800bea2 <INA219_ReadPower>
 800b234:	4603      	mov	r3, r0
 800b236:	65fb      	str	r3, [r7, #92]	; 0x5c
		Current = INA219_ReadCurrent(publisher->INA219);
 800b238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 fe11 	bl	800be64 <INA219_ReadCurrent>
 800b242:	4603      	mov	r3, r0
 800b244:	65bb      	str	r3, [r7, #88]	; 0x58
		Voltage = INA219_ReadBusVoltage(publisher->INA219);
 800b246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 fde7 	bl	800be1e <INA219_ReadBusVoltage>
 800b250:	4603      	mov	r3, r0
 800b252:	657b      	str	r3, [r7, #84]	; 0x54
		txHeader.DataLen = sprintf(txbuff, "#12=%s;%d;%d;%d\r\n",Name, Power,Voltage, Current);
 800b254:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b258:	f107 0008 	add.w	r0, r7, #8
 800b25c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b266:	4912      	ldr	r1, [pc, #72]	; (800b2b0 <PowerPublisher_Task+0xc4>)
 800b268:	f002 fb7e 	bl	800d968 <siprintf>
 800b26c:	4603      	mov	r3, r0
 800b26e:	b29b      	uxth	r3, r3
 800b270:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
//		SyncPrintf("Len %d: %s",txHeader.DataLen, txbuff);
		CANFrame_Send(publisher->CANFrame, &txHeader,(uint8_t*) txbuff, 20);
 800b274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	f107 0208 	add.w	r2, r7, #8
 800b27c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b280:	2314      	movs	r3, #20
 800b282:	f000 ffb3 	bl	800c1ec <CANFrame_Send>

		delayTime = publisher->Interval - (osKernelGetTickCount() - startTime);
 800b286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b288:	69dc      	ldr	r4, [r3, #28]
 800b28a:	f7fb fbdf 	bl	8006a4c <osKernelGetTickCount>
 800b28e:	4602      	mov	r2, r0
 800b290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b292:	1a9b      	subs	r3, r3, r2
 800b294:	4423      	add	r3, r4
 800b296:	653b      	str	r3, [r7, #80]	; 0x50
		delayTime = delayTime < 0? 0 : delayTime;
 800b298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b29a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b29e:	653b      	str	r3, [r7, #80]	; 0x50
		osDelay(delayTime);
 800b2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fb fd48 	bl	8006d38 <osDelay>
		if(!publisher->isEnable)
 800b2a8:	e7b3      	b.n	800b212 <PowerPublisher_Task+0x26>
 800b2aa:	bf00      	nop
 800b2ac:	0800ed68 	.word	0x0800ed68
 800b2b0:	0800ed54 	.word	0x0800ed54

0800b2b4 <PowerPublisher_Init>:
	}
}


int PowerPublisher_Init(PowerPublisher_HandlerStruct* Publisher, INA219_t* ina219,CANFrame_HandlerStruct* CANFrame, uint32_t Interval)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
	memset(Publisher, 0, sizeof(PowerPublisher_HandlerStruct));
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f002 fbee 	bl	800daa8 <memset>
	Publisher->INA219 = ina219;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	605a      	str	r2, [r3, #4]
	Publisher->Interval = Interval;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	61da      	str	r2, [r3, #28]
	Publisher->CANFrame = CANFrame;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
	Publisher->Thread = osThreadNew(PowerPublisher_Task, Publisher, &PowerPubTask_attributes);
 800b2de:	4a06      	ldr	r2, [pc, #24]	; (800b2f8 <PowerPublisher_Init+0x44>)
 800b2e0:	68f9      	ldr	r1, [r7, #12]
 800b2e2:	4806      	ldr	r0, [pc, #24]	; (800b2fc <PowerPublisher_Init+0x48>)
 800b2e4:	f7fb fbda 	bl	8006a9c <osThreadNew>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	615a      	str	r2, [r3, #20]
	return 0;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	0800f0a8 	.word	0x0800f0a8
 800b2fc:	0800b1ed 	.word	0x0800b1ed

0800b300 <PowerPublisher_Start>:

int PowerPublisher_Start(PowerPublisher_HandlerStruct* Publisher, uint8_t State)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	70fb      	strb	r3, [r7, #3]
	Publisher->isEnable = State;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	78fa      	ldrb	r2, [r7, #3]
 800b310:	761a      	strb	r2, [r3, #24]
	if(State)
 800b312:	78fb      	ldrb	r3, [r7, #3]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d004      	beq.n	800b322 <PowerPublisher_Start+0x22>
	{
		osThreadResume(Publisher->Thread);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fb fcd7 	bl	8006cd0 <osThreadResume>
	}
	return 0;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <GPS_ReadThread>:
  .stack_size = 200 * 4,
  .priority = (osPriority_t) osPriorityNormal2,
};

void GPS_ReadThread(void* Handler)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b0a4      	sub	sp, #144	; 0x90
 800b330:	af02      	add	r7, sp, #8
 800b332:	6078      	str	r0, [r7, #4]
	GPS_HandlerStruct* gpsHandler = (GPS_HandlerStruct*) Handler;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	lwgps_t lwgps_parser;
	lwgps_init(&lwgps_parser);
 800b33a:	f107 030c 	add.w	r3, r7, #12
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fc70 	bl	800bc24 <lwgps_init>
	static char rcvBuffer[GPS_RcvBufferSize];
	int Status;
	uint16_t rcvLen = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	817b      	strh	r3, [r7, #10]
	while(1)
	{
		if(!gpsHandler->readEnable)
 800b348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b34c:	7e1b      	ldrb	r3, [r3, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d105      	bne.n	800b35e <GPS_ReadThread+0x32>
		{
			osThreadSuspend(gpsHandler->readThread);
 800b352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fb fc85 	bl	8006c68 <osThreadSuspend>
		}
		Status = UART_OS_Receive_ToIdle(gpsHandler->uart,(uint8_t*) rcvBuffer, &rcvLen, GPS_RcvBufferSize, osWaitForever);
 800b35e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b362:	6818      	ldr	r0, [r3, #0]
 800b364:	f107 020a 	add.w	r2, r7, #10
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b372:	490d      	ldr	r1, [pc, #52]	; (800b3a8 <GPS_ReadThread+0x7c>)
 800b374:	f001 fb2e 	bl	800c9d4 <UART_OS_Receive_ToIdle>
 800b378:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		if(Status == osOK)
 800b37c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e1      	bne.n	800b348 <GPS_ReadThread+0x1c>
		{
			lwgps_process(&lwgps_parser, rcvBuffer, rcvLen);
 800b384:	897b      	ldrh	r3, [r7, #10]
 800b386:	461a      	mov	r2, r3
 800b388:	f107 030c 	add.w	r3, r7, #12
 800b38c:	4906      	ldr	r1, [pc, #24]	; (800b3a8 <GPS_ReadThread+0x7c>)
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fc56 	bl	800bc40 <lwgps_process>
			gpsHandler->GPSData.Lat = lwgps_parser.latitude;
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b39a:	609a      	str	r2, [r3, #8]
			gpsHandler->GPSData.Long = lwgps_parser.longitude;
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3a2:	605a      	str	r2, [r3, #4]
		if(!gpsHandler->readEnable)
 800b3a4:	e7d0      	b.n	800b348 <GPS_ReadThread+0x1c>
 800b3a6:	bf00      	nop
 800b3a8:	20003578 	.word	0x20003578

0800b3ac <GPS_Init>:
		}
	}
}

int GPS_Init(GPS_HandlerStruct* gps, UART_OS_HandlerStruct* uart, uint32_t UpdateTime)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
	memset(gps, 0, sizeof(GPS_HandlerStruct));
 800b3b8:	221c      	movs	r2, #28
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f002 fb73 	bl	800daa8 <memset>
	gps->dataLock = osMutexNew(NULL);
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	f7fb fe4a 	bl	800705c <osMutexNew>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	611a      	str	r2, [r3, #16]
	gps->readThread = osThreadNew(GPS_ReadThread, gps, &GPSTask_attributes);
 800b3ce:	4a09      	ldr	r2, [pc, #36]	; (800b3f4 <GPS_Init+0x48>)
 800b3d0:	68f9      	ldr	r1, [r7, #12]
 800b3d2:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <GPS_Init+0x4c>)
 800b3d4:	f7fb fb62 	bl	8006a9c <osThreadNew>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	615a      	str	r2, [r3, #20]

	gps->uart = uart;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	601a      	str	r2, [r3, #0]
	gps->updateTime = UpdateTime;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	60da      	str	r2, [r3, #12]
	return osOK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	0800f0cc 	.word	0x0800f0cc
 800b3f8:	0800b32d 	.word	0x0800b32d

0800b3fc <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d106      	bne.n	800b41e <prv_parse_number+0x22>
        t = gh->p.term_str;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3345      	adds	r3, #69	; 0x45
 800b414:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 800b416:	e002      	b.n	800b41e <prv_parse_number+0x22>
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	603b      	str	r3, [r7, #0]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <prv_parse_number+0x30>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b20      	cmp	r3, #32
 800b42a:	d0f5      	beq.n	800b418 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b2d      	cmp	r3, #45	; 0x2d
 800b432:	d104      	bne.n	800b43e <prv_parse_number+0x42>
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	3301      	adds	r3, #1
 800b438:	603b      	str	r3, [r7, #0]
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <prv_parse_number+0x44>
 800b43e:	2300      	movs	r3, #0
 800b440:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800b442:	e00d      	b.n	800b460 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	4613      	mov	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	461a      	mov	r2, r3
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	3b30      	subs	r3, #48	; 0x30
 800b456:	4413      	add	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	3301      	adds	r3, #1
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d007      	beq.n	800b476 <prv_parse_number+0x7a>
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	2b2f      	cmp	r3, #47	; 0x2f
 800b46c:	d903      	bls.n	800b476 <prv_parse_number+0x7a>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b39      	cmp	r3, #57	; 0x39
 800b474:	d9e6      	bls.n	800b444 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800b476:	7afb      	ldrb	r3, [r7, #11]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <prv_parse_number+0x86>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	425b      	negs	r3, r3
 800b480:	e000      	b.n	800b484 <prv_parse_number+0x88>
 800b482:	68fb      	ldr	r3, [r7, #12]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	bc80      	pop	{r7}
 800b48c:	4770      	bx	lr
	...

0800b490 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 800b490:	b590      	push	{r4, r7, lr}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b4a4:	613b      	str	r3, [r7, #16]
    int sign = 1;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <prv_parse_float_number+0x2e>
        t = gh->p.term_str;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3345      	adds	r3, #69	; 0x45
 800b4b4:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 800b4b6:	e002      	b.n	800b4be <prv_parse_float_number+0x2e>
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	603b      	str	r3, [r7, #0]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <prv_parse_float_number+0x3c>
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b20      	cmp	r3, #32
 800b4ca:	d0f5      	beq.n	800b4b8 <prv_parse_float_number+0x28>

    if (*t == '-') { /* Check sign */
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b2d      	cmp	r3, #45	; 0x2d
 800b4d2:	d11c      	bne.n	800b50e <prv_parse_float_number+0x7e>
        sign = -1;
 800b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d8:	60fb      	str	r3, [r7, #12]
        ++t;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 800b4e0:	e015      	b.n	800b50e <prv_parse_float_number+0x7e>
        value = value * (lwgps_float_t)10 + CTN(*t);
 800b4e2:	492e      	ldr	r1, [pc, #184]	; (800b59c <prv_parse_float_number+0x10c>)
 800b4e4:	6978      	ldr	r0, [r7, #20]
 800b4e6:	f7f4 ff41 	bl	800036c <__aeabi_fmul>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	461c      	mov	r4, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	3b30      	subs	r3, #48	; 0x30
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f4 fee5 	bl	80002c4 <__aeabi_i2f>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4620      	mov	r0, r4
 800b500:	f7f4 fe2c 	bl	800015c <__addsf3>
 800b504:	4603      	mov	r3, r0
 800b506:	617b      	str	r3, [r7, #20]
        ++t;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	2b2f      	cmp	r3, #47	; 0x2f
 800b514:	d903      	bls.n	800b51e <prv_parse_float_number+0x8e>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b39      	cmp	r3, #57	; 0x39
 800b51c:	d9e1      	bls.n	800b4e2 <prv_parse_float_number+0x52>
    }
    if (*t == '.') { /* Skip the dot character */
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	2b2e      	cmp	r3, #46	; 0x2e
 800b524:	d11f      	bne.n	800b566 <prv_parse_float_number+0xd6>
        ++t;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 800b52c:	e01b      	b.n	800b566 <prv_parse_float_number+0xd6>
        value = value * (lwgps_float_t)10 + CTN(*t);
 800b52e:	491b      	ldr	r1, [pc, #108]	; (800b59c <prv_parse_float_number+0x10c>)
 800b530:	6978      	ldr	r0, [r7, #20]
 800b532:	f7f4 ff1b 	bl	800036c <__aeabi_fmul>
 800b536:	4603      	mov	r3, r0
 800b538:	461c      	mov	r4, r3
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	3b30      	subs	r3, #48	; 0x30
 800b540:	4618      	mov	r0, r3
 800b542:	f7f4 febf 	bl	80002c4 <__aeabi_i2f>
 800b546:	4603      	mov	r3, r0
 800b548:	4619      	mov	r1, r3
 800b54a:	4620      	mov	r0, r4
 800b54c:	f7f4 fe06 	bl	800015c <__addsf3>
 800b550:	4603      	mov	r3, r0
 800b552:	617b      	str	r3, [r7, #20]
        power *= (lwgps_float_t)10.0;
 800b554:	4911      	ldr	r1, [pc, #68]	; (800b59c <prv_parse_float_number+0x10c>)
 800b556:	6938      	ldr	r0, [r7, #16]
 800b558:	f7f4 ff08 	bl	800036c <__aeabi_fmul>
 800b55c:	4603      	mov	r3, r0
 800b55e:	613b      	str	r3, [r7, #16]
        ++t;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	2b2f      	cmp	r3, #47	; 0x2f
 800b56c:	d903      	bls.n	800b576 <prv_parse_float_number+0xe6>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b39      	cmp	r3, #57	; 0x39
 800b574:	d9db      	bls.n	800b52e <prv_parse_float_number+0x9e>
    }
    return sign * value / power;
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7f4 fea4 	bl	80002c4 <__aeabi_i2f>
 800b57c:	4603      	mov	r3, r0
 800b57e:	6979      	ldr	r1, [r7, #20]
 800b580:	4618      	mov	r0, r3
 800b582:	f7f4 fef3 	bl	800036c <__aeabi_fmul>
 800b586:	4603      	mov	r3, r0
 800b588:	6939      	ldr	r1, [r7, #16]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7f4 ffa2 	bl	80004d4 <__aeabi_fdiv>
 800b590:	4603      	mov	r3, r0
}
 800b592:	4618      	mov	r0, r3
 800b594:	371c      	adds	r7, #28
 800b596:	46bd      	mov	sp, r7
 800b598:	bd90      	pop	{r4, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	41200000 	.word	0x41200000

0800b5a0 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff ff70 	bl	800b490 <prv_parse_float_number>
 800b5b0:	6178      	str	r0, [r7, #20]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 800b5b2:	6978      	ldr	r0, [r7, #20]
 800b5b4:	f7f5 f82a 	bl	800060c <__aeabi_f2iz>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	4a13      	ldr	r2, [pc, #76]	; (800b608 <prv_parse_lat_long+0x68>)
 800b5bc:	fb82 1203 	smull	r1, r2, r2, r3
 800b5c0:	1152      	asrs	r2, r2, #5
 800b5c2:	17db      	asrs	r3, r3, #31
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 fe7c 	bl	80002c4 <__aeabi_i2f>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	613b      	str	r3, [r7, #16]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 800b5d0:	490e      	ldr	r1, [pc, #56]	; (800b60c <prv_parse_lat_long+0x6c>)
 800b5d2:	6938      	ldr	r0, [r7, #16]
 800b5d4:	f7f4 feca 	bl	800036c <__aeabi_fmul>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	f7f4 fdbb 	bl	8000158 <__aeabi_fsub>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	60fb      	str	r3, [r7, #12]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 800b5e6:	490a      	ldr	r1, [pc, #40]	; (800b610 <prv_parse_lat_long+0x70>)
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7f4 ff73 	bl	80004d4 <__aeabi_fdiv>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6938      	ldr	r0, [r7, #16]
 800b5f4:	f7f4 fdb2 	bl	800015c <__addsf3>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	617b      	str	r3, [r7, #20]

    return ll;
 800b5fc:	697b      	ldr	r3, [r7, #20]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	51eb851f 	.word	0x51eb851f
 800b60c:	42c80000 	.word	0x42c80000
 800b610:	42700000 	.word	0x42700000

0800b614 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b622:	2b00      	cmp	r3, #0
 800b624:	d169      	bne.n	800b6fa <prv_parse_term+0xe6>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3345      	adds	r3, #69	; 0x45
 800b62a:	2206      	movs	r2, #6
 800b62c:	49b7      	ldr	r1, [pc, #732]	; (800b90c <prv_parse_term+0x2f8>)
 800b62e:	4618      	mov	r0, r3
 800b630:	f002 fa42 	bl	800dab8 <strncmp>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d009      	beq.n	800b64e <prv_parse_term+0x3a>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3345      	adds	r3, #69	; 0x45
 800b63e:	2206      	movs	r2, #6
 800b640:	49b3      	ldr	r1, [pc, #716]	; (800b910 <prv_parse_term+0x2fc>)
 800b642:	4618      	mov	r0, r3
 800b644:	f002 fa38 	bl	800dab8 <strncmp>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d104      	bne.n	800b658 <prv_parse_term+0x44>
            gh->p.stat = STAT_GGA;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b656:	e04e      	b.n	800b6f6 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3345      	adds	r3, #69	; 0x45
 800b65c:	2206      	movs	r2, #6
 800b65e:	49ad      	ldr	r1, [pc, #692]	; (800b914 <prv_parse_term+0x300>)
 800b660:	4618      	mov	r0, r3
 800b662:	f002 fa29 	bl	800dab8 <strncmp>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d009      	beq.n	800b680 <prv_parse_term+0x6c>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3345      	adds	r3, #69	; 0x45
 800b670:	2206      	movs	r2, #6
 800b672:	49a9      	ldr	r1, [pc, #676]	; (800b918 <prv_parse_term+0x304>)
 800b674:	4618      	mov	r0, r3
 800b676:	f002 fa1f 	bl	800dab8 <strncmp>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d104      	bne.n	800b68a <prv_parse_term+0x76>
            gh->p.stat = STAT_GSA;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2202      	movs	r2, #2
 800b684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b688:	e035      	b.n	800b6f6 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3345      	adds	r3, #69	; 0x45
 800b68e:	2206      	movs	r2, #6
 800b690:	49a2      	ldr	r1, [pc, #648]	; (800b91c <prv_parse_term+0x308>)
 800b692:	4618      	mov	r0, r3
 800b694:	f002 fa10 	bl	800dab8 <strncmp>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d009      	beq.n	800b6b2 <prv_parse_term+0x9e>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3345      	adds	r3, #69	; 0x45
 800b6a2:	2206      	movs	r2, #6
 800b6a4:	499e      	ldr	r1, [pc, #632]	; (800b920 <prv_parse_term+0x30c>)
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f002 fa06 	bl	800dab8 <strncmp>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d104      	bne.n	800b6bc <prv_parse_term+0xa8>
            gh->p.stat = STAT_GSV;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2203      	movs	r2, #3
 800b6b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ba:	e01c      	b.n	800b6f6 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3345      	adds	r3, #69	; 0x45
 800b6c0:	2206      	movs	r2, #6
 800b6c2:	4998      	ldr	r1, [pc, #608]	; (800b924 <prv_parse_term+0x310>)
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f002 f9f7 	bl	800dab8 <strncmp>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d009      	beq.n	800b6e4 <prv_parse_term+0xd0>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3345      	adds	r3, #69	; 0x45
 800b6d4:	2206      	movs	r2, #6
 800b6d6:	4994      	ldr	r1, [pc, #592]	; (800b928 <prv_parse_term+0x314>)
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f002 f9ed 	bl	800dab8 <strncmp>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <prv_parse_term+0xda>
            gh->p.stat = STAT_RMC;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2204      	movs	r2, #4
 800b6e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ec:	e003      	b.n	800b6f6 <prv_parse_term+0xe2>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        }
        return 1;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e201      	b.n	800bafe <prv_parse_term+0x4ea>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 81fb 	beq.w	800bafc <prv_parse_term+0x4e8>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	f040 80b4 	bne.w	800b87a <prv_parse_term+0x266>
        switch (gh->p.term_num) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b718:	3b01      	subs	r3, #1
 800b71a:	2b0a      	cmp	r3, #10
 800b71c:	f200 81e3 	bhi.w	800bae6 <prv_parse_term+0x4d2>
 800b720:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <prv_parse_term+0x114>)
 800b722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b755 	.word	0x0800b755
 800b72c:	0800b7cf 	.word	0x0800b7cf
 800b730:	0800b7dd 	.word	0x0800b7dd
 800b734:	0800b801 	.word	0x0800b801
 800b738:	0800b80f 	.word	0x0800b80f
 800b73c:	0800b833 	.word	0x0800b833
 800b740:	0800b847 	.word	0x0800b847
 800b744:	0800bae7 	.word	0x0800bae7
 800b748:	0800b85b 	.word	0x0800b85b
 800b74c:	0800bae7 	.word	0x0800bae7
 800b750:	0800b86b 	.word	0x0800b86b
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b75a:	3b30      	subs	r3, #48	; 0x30
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	461a      	mov	r2, r3
 800b760:	0092      	lsls	r2, r2, #2
 800b762:	4413      	add	r3, r2
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	b2da      	uxtb	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b76e:	4413      	add	r3, r2
 800b770:	b2db      	uxtb	r3, r3
 800b772:	3b30      	subs	r3, #48	; 0x30
 800b774:	b2da      	uxtb	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b782:	3b30      	subs	r3, #48	; 0x30
 800b784:	b2db      	uxtb	r3, r3
 800b786:	461a      	mov	r2, r3
 800b788:	0092      	lsls	r2, r2, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b796:	4413      	add	r3, r2
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	3b30      	subs	r3, #48	; 0x30
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800b7aa:	3b30      	subs	r3, #48	; 0x30
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	0092      	lsls	r2, r2, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800b7be:	4413      	add	r3, r2
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	3b30      	subs	r3, #48	; 0x30
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                break;
 800b7cc:	e196      	b.n	800bafc <prv_parse_term+0x4e8>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff fee6 	bl	800b5a0 <prv_parse_lat_long>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	659a      	str	r2, [r3, #88]	; 0x58
                break;
 800b7da:	e18f      	b.n	800bafc <prv_parse_term+0x4e8>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7e2:	2b53      	cmp	r3, #83	; 0x53
 800b7e4:	d005      	beq.n	800b7f2 <prv_parse_term+0x1de>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ec:	2b73      	cmp	r3, #115	; 0x73
 800b7ee:	f040 817c 	bne.w	800baea <prv_parse_term+0x4d6>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	659a      	str	r2, [r3, #88]	; 0x58
                }
                break;
 800b7fe:	e174      	b.n	800baea <prv_parse_term+0x4d6>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fecd 	bl	800b5a0 <prv_parse_lat_long>
 800b806:	4602      	mov	r2, r0
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	65da      	str	r2, [r3, #92]	; 0x5c
                break;
 800b80c:	e176      	b.n	800bafc <prv_parse_term+0x4e8>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b814:	2b57      	cmp	r3, #87	; 0x57
 800b816:	d005      	beq.n	800b824 <prv_parse_term+0x210>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b81e:	2b77      	cmp	r3, #119	; 0x77
 800b820:	f040 8165 	bne.w	800baee <prv_parse_term+0x4da>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b828:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	65da      	str	r2, [r3, #92]	; 0x5c
                }
                break;
 800b830:	e15d      	b.n	800baee <prv_parse_term+0x4da>
            case 6: /* Fix status */ gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL); break;
 800b832:	2100      	movs	r1, #0
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fde1 	bl	800b3fc <prv_parse_number>
 800b83a:	4603      	mov	r3, r0
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800b844:	e15a      	b.n	800bafc <prv_parse_term+0x4e8>
            case 7: /* Satellites in use */ gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL); break;
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff fdd7 	bl	800b3fc <prv_parse_number>
 800b84e:	4603      	mov	r3, r0
 800b850:	b2da      	uxtb	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800b858:	e150      	b.n	800bafc <prv_parse_term+0x4e8>
            case 9: /* Altitude */ gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL); break;
 800b85a:	2100      	movs	r1, #0
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff fe17 	bl	800b490 <prv_parse_float_number>
 800b862:	4602      	mov	r2, r0
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	661a      	str	r2, [r3, #96]	; 0x60
 800b868:	e148      	b.n	800bafc <prv_parse_term+0x4e8>
            case 11: /* Altitude above ellipsoid */ gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL); break;
 800b86a:	2100      	movs	r1, #0
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fe0f 	bl	800b490 <prv_parse_float_number>
 800b872:	4602      	mov	r2, r0
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	665a      	str	r2, [r3, #100]	; 0x64
 800b878:	e140      	b.n	800bafc <prv_parse_term+0x4e8>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b880:	2b02      	cmp	r3, #2
 800b882:	d177      	bne.n	800b974 <prv_parse_term+0x360>
        switch (gh->p.term_num) {
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b88a:	3b02      	subs	r3, #2
 800b88c:	2b0f      	cmp	r3, #15
 800b88e:	d855      	bhi.n	800b93c <prv_parse_term+0x328>
 800b890:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <prv_parse_term+0x284>)
 800b892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b896:	bf00      	nop
 800b898:	0800b8d9 	.word	0x0800b8d9
 800b89c:	0800b93d 	.word	0x0800b93d
 800b8a0:	0800b93d 	.word	0x0800b93d
 800b8a4:	0800b93d 	.word	0x0800b93d
 800b8a8:	0800b93d 	.word	0x0800b93d
 800b8ac:	0800b93d 	.word	0x0800b93d
 800b8b0:	0800b93d 	.word	0x0800b93d
 800b8b4:	0800b93d 	.word	0x0800b93d
 800b8b8:	0800b93d 	.word	0x0800b93d
 800b8bc:	0800b93d 	.word	0x0800b93d
 800b8c0:	0800b93d 	.word	0x0800b93d
 800b8c4:	0800b93d 	.word	0x0800b93d
 800b8c8:	0800b93d 	.word	0x0800b93d
 800b8cc:	0800b8ed 	.word	0x0800b8ed
 800b8d0:	0800b8fd 	.word	0x0800b8fd
 800b8d4:	0800b92d 	.word	0x0800b92d
            case 2: /* Process fix mode */ gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL); break;
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fd8e 	bl	800b3fc <prv_parse_number>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800b8ea:	e107      	b.n	800bafc <prv_parse_term+0x4e8>
            case 15: /* Process PDOP */ gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL); break;
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff fdce 	bl	800b490 <prv_parse_float_number>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	661a      	str	r2, [r3, #96]	; 0x60
 800b8fa:	e0ff      	b.n	800bafc <prv_parse_term+0x4e8>
            case 16: /* Process HDOP */ gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL); break;
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f7ff fdc6 	bl	800b490 <prv_parse_float_number>
 800b904:	4602      	mov	r2, r0
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	659a      	str	r2, [r3, #88]	; 0x58
 800b90a:	e0f7      	b.n	800bafc <prv_parse_term+0x4e8>
 800b90c:	0800ed78 	.word	0x0800ed78
 800b910:	0800ed80 	.word	0x0800ed80
 800b914:	0800ed88 	.word	0x0800ed88
 800b918:	0800ed90 	.word	0x0800ed90
 800b91c:	0800ed98 	.word	0x0800ed98
 800b920:	0800eda0 	.word	0x0800eda0
 800b924:	0800eda8 	.word	0x0800eda8
 800b928:	0800edb0 	.word	0x0800edb0
            case 17: /* Process VDOP */ gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL); break;
 800b92c:	2100      	movs	r1, #0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff fdae 	bl	800b490 <prv_parse_float_number>
 800b934:	4602      	mov	r2, r0
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	65da      	str	r2, [r3, #92]	; 0x5c
 800b93a:	e0df      	b.n	800bafc <prv_parse_term+0x4e8>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b942:	2b02      	cmp	r3, #2
 800b944:	f240 80d5 	bls.w	800baf2 <prv_parse_term+0x4de>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b94e:	2b0e      	cmp	r3, #14
 800b950:	f200 80cf 	bhi.w	800baf2 <prv_parse_term+0x4de>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800b954:	2100      	movs	r1, #0
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff fd50 	bl	800b3fc <prv_parse_number>
 800b95c:	4602      	mov	r2, r0
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b964:	3b03      	subs	r3, #3
 800b966:	b2d1      	uxtb	r1, r2
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	460a      	mov	r2, r1
 800b96e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                }
                break;
 800b972:	e0be      	b.n	800baf2 <prv_parse_term+0x4de>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d11b      	bne.n	800b9b6 <prv_parse_term+0x3a2>
        switch (gh->p.term_num) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b984:	2b02      	cmp	r3, #2
 800b986:	d002      	beq.n	800b98e <prv_parse_term+0x37a>
 800b988:	2b03      	cmp	r3, #3
 800b98a:	d00a      	beq.n	800b9a2 <prv_parse_term+0x38e>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800b98c:	e0b6      	b.n	800bafc <prv_parse_term+0x4e8>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800b98e:	2100      	movs	r1, #0
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f7ff fd33 	bl	800b3fc <prv_parse_number>
 800b996:	4603      	mov	r3, r0
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                break;
 800b9a0:	e0ac      	b.n	800bafc <prv_parse_term+0x4e8>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff fd29 	bl	800b3fc <prv_parse_number>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
                break;
 800b9b4:	e0a2      	b.n	800bafc <prv_parse_term+0x4e8>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9bc:	2b04      	cmp	r3, #4
 800b9be:	f040 809d 	bne.w	800bafc <prv_parse_term+0x4e8>
        switch (gh->p.term_num) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b9c8:	3b02      	subs	r3, #2
 800b9ca:	2b09      	cmp	r3, #9
 800b9cc:	f200 8093 	bhi.w	800baf6 <prv_parse_term+0x4e2>
 800b9d0:	a201      	add	r2, pc, #4	; (adr r2, 800b9d8 <prv_parse_term+0x3c4>)
 800b9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d6:	bf00      	nop
 800b9d8:	0800ba01 	.word	0x0800ba01
 800b9dc:	0800baf7 	.word	0x0800baf7
 800b9e0:	0800baf7 	.word	0x0800baf7
 800b9e4:	0800baf7 	.word	0x0800baf7
 800b9e8:	0800baf7 	.word	0x0800baf7
 800b9ec:	0800ba1b 	.word	0x0800ba1b
 800b9f0:	0800ba2b 	.word	0x0800ba2b
 800b9f4:	0800ba3b 	.word	0x0800ba3b
 800b9f8:	0800bab5 	.word	0x0800bab5
 800b9fc:	0800bac5 	.word	0x0800bac5
            case 2: /* Process valid status */ gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A'); break;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba06:	2b41      	cmp	r3, #65	; 0x41
 800ba08:	bf0c      	ite	eq
 800ba0a:	2301      	moveq	r3, #1
 800ba0c:	2300      	movne	r3, #0
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	461a      	mov	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800ba18:	e070      	b.n	800bafc <prv_parse_term+0x4e8>
            case 7: /* Process ground speed in knots */ gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL); break;
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f7ff fd37 	bl	800b490 <prv_parse_float_number>
 800ba22:	4602      	mov	r2, r0
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	65da      	str	r2, [r3, #92]	; 0x5c
 800ba28:	e068      	b.n	800bafc <prv_parse_term+0x4e8>
            case 8: /* Process true ground coarse */ gh->p.data.rmc.course = prv_parse_float_number(gh, NULL); break;
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff fd2f 	bl	800b490 <prv_parse_float_number>
 800ba32:	4602      	mov	r2, r0
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	661a      	str	r2, [r3, #96]	; 0x60
 800ba38:	e060      	b.n	800bafc <prv_parse_term+0x4e8>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba40:	3b30      	subs	r3, #48	; 0x30
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	0092      	lsls	r2, r2, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ba54:	4413      	add	r3, r2
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	3b30      	subs	r3, #48	; 0x30
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ba68:	3b30      	subs	r3, #48	; 0x30
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	0092      	lsls	r2, r2, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ba7c:	4413      	add	r3, r2
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	3b30      	subs	r3, #48	; 0x30
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ba90:	3b30      	subs	r3, #48	; 0x30
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	461a      	mov	r2, r3
 800ba96:	0092      	lsls	r2, r2, #2
 800ba98:	4413      	add	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800baa4:	4413      	add	r3, r2
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	3b30      	subs	r3, #48	; 0x30
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
                break;
 800bab2:	e023      	b.n	800bafc <prv_parse_term+0x4e8>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fcea 	bl	800b490 <prv_parse_float_number>
 800babc:	4602      	mov	r2, r0
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	665a      	str	r2, [r3, #100]	; 0x64
                break;
 800bac2:	e01b      	b.n	800bafc <prv_parse_term+0x4e8>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baca:	2b57      	cmp	r3, #87	; 0x57
 800bacc:	d004      	beq.n	800bad8 <prv_parse_term+0x4c4>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bad4:	2b77      	cmp	r3, #119	; 0x77
 800bad6:	d110      	bne.n	800bafa <prv_parse_term+0x4e6>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800badc:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	665a      	str	r2, [r3, #100]	; 0x64
                }
                break;
 800bae4:	e009      	b.n	800bafa <prv_parse_term+0x4e6>
            default: break;
 800bae6:	bf00      	nop
 800bae8:	e008      	b.n	800bafc <prv_parse_term+0x4e8>
                break;
 800baea:	bf00      	nop
 800baec:	e006      	b.n	800bafc <prv_parse_term+0x4e8>
                break;
 800baee:	bf00      	nop
 800baf0:	e004      	b.n	800bafc <prv_parse_term+0x4e8>
                break;
 800baf2:	bf00      	nop
 800baf4:	e002      	b.n	800bafc <prv_parse_term+0x4e8>
            default: break;
 800baf6:	bf00      	nop
 800baf8:	e000      	b.n	800bafc <prv_parse_term+0x4e8>
                break;
 800bafa:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 800bafc:	2301      	movs	r3, #1
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop

0800bb08 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d129      	bne.n	800bb6e <prv_copy_from_tmp_memory+0x66>
        gh->latitude = gh->p.data.gga.latitude;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	601a      	str	r2, [r3, #0]
        gh->longitude = gh->p.data.gga.longitude;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	605a      	str	r2, [r3, #4]
        gh->altitude = gh->p.data.gga.altitude;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	609a      	str	r2, [r3, #8]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60da      	str	r2, [r3, #12]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	741a      	strb	r2, [r3, #16]
        gh->fix = gh->p.data.gga.fix;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	745a      	strb	r2, [r3, #17]
        gh->hours = gh->p.data.gga.hours;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	749a      	strb	r2, [r3, #18]
        gh->minutes = gh->p.data.gga.minutes;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	74da      	strb	r2, [r3, #19]
        gh->seconds = gh->p.data.gga.seconds;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	751a      	strb	r2, [r3, #20]
 800bb6c:	e055      	b.n	800bc1a <prv_copy_from_tmp_memory+0x112>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d11b      	bne.n	800bbb0 <prv_copy_from_tmp_memory+0xa8>
        gh->dop_h = gh->p.data.gsa.dop_h;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	619a      	str	r2, [r3, #24]
        gh->dop_p = gh->p.data.gsa.dop_p;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	621a      	str	r2, [r3, #32]
        gh->dop_v = gh->p.data.gsa.dop_v;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	61da      	str	r2, [r3, #28]
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f103 0025 	add.w	r0, r3, #37	; 0x25
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3365      	adds	r3, #101	; 0x65
 800bba6:	220c      	movs	r2, #12
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f002 f8c3 	bl	800dd34 <memcpy>
 800bbae:	e034      	b.n	800bc1a <prv_copy_from_tmp_memory+0x112>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d106      	bne.n	800bbc8 <prv_copy_from_tmp_memory+0xc0>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bbc6:	e028      	b.n	800bc1a <prv_copy_from_tmp_memory+0x112>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d123      	bne.n	800bc1a <prv_copy_from_tmp_memory+0x112>
        gh->course = gh->p.data.rmc.course;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	639a      	str	r2, [r3, #56]	; 0x38
        gh->is_valid = gh->p.data.rmc.is_valid;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        gh->speed = gh->p.data.rmc.speed;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	635a      	str	r2, [r3, #52]	; 0x34
        gh->variation = gh->p.data.rmc.variation;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	63da      	str	r2, [r3, #60]	; 0x3c
        gh->date = gh->p.data.rmc.date;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        gh->month = gh->p.data.rmc.month;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        gh->year = gh->p.data.rmc.year;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800bc1a:	2301      	movs	r3, #1
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 800bc2c:	2274      	movs	r2, #116	; 0x74
 800bc2e:	2100      	movs	r1, #0
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f001 ff39 	bl	800daa8 <memset>
    return 1;
 800bc36:	2301      	movs	r3, #1
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 800bc50:	e08d      	b.n	800bd6e <lwgps_process+0x12e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b24      	cmp	r3, #36	; 0x24
 800bc58:	d127      	bne.n	800bcaa <lwgps_process+0x6a>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3344      	adds	r3, #68	; 0x44
 800bc5e:	2230      	movs	r2, #48	; 0x30
 800bc60:	2100      	movs	r1, #0
 800bc62:	4618      	mov	r0, r3
 800bc64:	f001 ff20 	bl	800daa8 <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc6e:	2b0b      	cmp	r3, #11
 800bc70:	d877      	bhi.n	800bd62 <lwgps_process+0x122>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc78:	4619      	mov	r1, r3
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	781a      	ldrb	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	440b      	add	r3, r1
 800bc82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4413      	add	r3, r2
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bca8:	e05b      	b.n	800bd62 <lwgps_process+0x122>
        } else if (*d == ',') {                  /* Term separator character */
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b2c      	cmp	r3, #44	; 0x2c
 800bcb0:	d113      	bne.n	800bcda <lwgps_process+0x9a>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff fcae 	bl	800b614 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
            TERM_NEXT(gh);                       /* Start with next term */
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bcce:	3301      	adds	r3, #1
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bcd8:	e043      	b.n	800bd62 <lwgps_process+0x122>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b2a      	cmp	r3, #42	; 0x2a
 800bce0:	d117      	bne.n	800bd12 <lwgps_process+0xd2>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f7ff fc96 	bl	800b614 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            TERM_NEXT(gh);                       /* Start with next term */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800bd06:	3301      	adds	r3, #1
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bd10:	e027      	b.n	800bd62 <lwgps_process+0x122>
        } else if (*d == '\r') {
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b0d      	cmp	r3, #13
 800bd18:	d103      	bne.n	800bd22 <lwgps_process+0xe2>
            if (prv_check_crc(gh)) { /* Check for CRC result */
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff fef4 	bl	800bb08 <prv_copy_from_tmp_memory>
 800bd20:	e01f      	b.n	800bd62 <lwgps_process+0x122>
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
                CRC_ADD(gh, *d); /* Add to CRC */
            }
            TERM_ADD(gh, *d); /* Add character to term */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd28:	2b0b      	cmp	r3, #11
 800bd2a:	d81a      	bhi.n	800bd62 <lwgps_process+0x122>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd32:	4619      	mov	r1, r3
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	781a      	ldrb	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	440b      	add	r3, r1
 800bd3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd46:	3301      	adds	r3, #1
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd56:	461a      	mov	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	3301      	adds	r3, #1
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f47f af6e 	bne.w	800bc52 <lwgps_process+0x12>
        }
    }
    return 1;
 800bd76:	2301      	movs	r3, #1
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <Read16>:
#include "INA219.h"
//#include "math.h"


uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af04      	add	r7, sp, #16
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2] = {0};
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	81bb      	strh	r3, [r7, #12]
	INA219_Mem_Read(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, Value, 2, 1000);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	791b      	ldrb	r3, [r3, #4]
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	b299      	uxth	r1, r3
 800bd9e:	78fb      	ldrb	r3, [r7, #3]
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bda6:	9302      	str	r3, [sp, #8]
 800bda8:	2302      	movs	r3, #2
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	f107 030c 	add.w	r3, r7, #12
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f000 fcfe 	bl	800c7b4 <I2C_OS_MEM_Read_IT>
	return ((Value[0] << 8) | Value[1]);
 800bdb8:	7b3b      	ldrb	r3, [r7, #12]
 800bdba:	021b      	lsls	r3, r3, #8
 800bdbc:	b21a      	sxth	r2, r3
 800bdbe:	7b7b      	ldrb	r3, [r7, #13]
 800bdc0:	b21b      	sxth	r3, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	b21b      	sxth	r3, r3
 800bdc6:	b29b      	uxth	r3, r3
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3710      	adds	r7, #16
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af04      	add	r7, sp, #16
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
 800bddc:	4613      	mov	r3, r2
 800bdde:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800bde0:	883b      	ldrh	r3, [r7, #0]
 800bde2:	0a1b      	lsrs	r3, r3, #8
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800bdea:	883b      	ldrh	r3, [r7, #0]
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	737b      	strb	r3, [r7, #13]
	INA219_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, (uint8_t*)addr, 2, 100);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6818      	ldr	r0, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	791b      	ldrb	r3, [r3, #4]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	b299      	uxth	r1, r3
 800bdfe:	78fb      	ldrb	r3, [r7, #3]
 800be00:	b29a      	uxth	r2, r3
 800be02:	2364      	movs	r3, #100	; 0x64
 800be04:	9302      	str	r3, [sp, #8]
 800be06:	2302      	movs	r3, #2
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	2301      	movs	r3, #1
 800be12:	f000 fc7e 	bl	800c712 <I2C_OS_MEM_Write_IT>
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b084      	sub	sp, #16
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);\
 800be26:	2102      	movs	r1, #2
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff ffa9 	bl	800bd80 <Read16>
 800be2e:	4603      	mov	r3, r0
 800be30:	81fb      	strh	r3, [r7, #14]
	return ((result >> 3  ) * 4);
 800be32:	89fb      	ldrh	r3, [r7, #14]
 800be34:	08db      	lsrs	r3, r3, #3
 800be36:	b29b      	uxth	r3, r3
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	b29b      	uxth	r3, r3

}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 800be4c:	2104      	movs	r1, #4
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff ff96 	bl	800bd80 <Read16>
 800be54:	4603      	mov	r3, r0
 800be56:	81fb      	strh	r3, [r7, #14]

	return (result );
 800be58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7ff ffe9 	bl	800be44 <INA219_ReadCurrent_raw>
 800be72:	4603      	mov	r3, r0
 800be74:	81fb      	strh	r3, [r7, #14]

	return result/ ina219->currentDivider_mA;
 800be76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7f4 fa22 	bl	80002c4 <__aeabi_i2f>
 800be80:	4602      	mov	r2, r0
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7f4 fb23 	bl	80004d4 <__aeabi_fdiv>
 800be8e:	4603      	mov	r3, r0
 800be90:	4618      	mov	r0, r3
 800be92:	f7f4 fbbb 	bl	800060c <__aeabi_f2iz>
 800be96:	4603      	mov	r3, r0
 800be98:	b21b      	sxth	r3, r3
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <INA219_ReadPower>:
	return (result * 0.01 );
}


int16_t INA219_ReadPower(INA219_t *ina219)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b084      	sub	sp, #16
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_POWER);
 800beaa:	2103      	movs	r1, #3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7ff ff67 	bl	800bd80 <Read16>
 800beb2:	4603      	mov	r3, r0
 800beb4:	81fb      	strh	r3, [r7, #14]

	return (result * ina219->powerMultiplier_mW );
 800beb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f4 fa02 	bl	80002c4 <__aeabi_i2f>
 800bec0:	4602      	mov	r2, r0
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	4619      	mov	r1, r3
 800bec8:	4610      	mov	r0, r2
 800beca:	f7f4 fa4f 	bl	800036c <__aeabi_fmul>
 800bece:	4603      	mov	r3, r0
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f4 fb9b 	bl	800060c <__aeabi_f2iz>
 800bed6:	4603      	mov	r3, r0
 800bed8:	b21b      	sxth	r3, r3
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <INA219_Reset>:
void INA219_Reset(INA219_t *ina219)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800beea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800beee:	2100      	movs	r1, #0
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff ff6d 	bl	800bdd0 <Write16>
	osDelay(1);
 800bef6:	2001      	movs	r0, #1
 800bef8:	f7fa ff1e 	bl	8006d38 <osDelay>
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800bf10:	887b      	ldrh	r3, [r7, #2]
 800bf12:	461a      	mov	r2, r3
 800bf14:	2105      	movs	r1, #5
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff ff5a 	bl	800bdd0 <Write16>
}
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800bf30:	887b      	ldrh	r3, [r7, #2]
 800bf32:	461a      	mov	r2, r3
 800bf34:	2100      	movs	r1, #0
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff ff4a 	bl	800bdd0 <Write16>
}
 800bf3c:	bf00      	nop
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <INA219_setCalibration_32V_2A>:
/**
 *	Calib for 0.1 Ohm Shunt Resistor
 */
void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800bf4c:	f643 139f 	movw	r3, #14751	; 0x399f
 800bf50:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219->calibrationValue = 4096;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bf58:	80da      	strh	r2, [r3, #6]
//	ina219->calibrationValue = 6710<<1;

	ina219->currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a0a      	ldr	r2, [pc, #40]	; (800bf88 <INA219_setCalibration_32V_2A+0x44>)
 800bf5e:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bf66:	60da      	str	r2, [r3, #12]


	INA219_setCalibration(ina219, ina219->calibrationValue);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	88db      	ldrh	r3, [r3, #6]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff ffc8 	bl	800bf04 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800bf74:	89fb      	ldrh	r3, [r7, #14]
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ffd3 	bl	800bf24 <INA219_setConfig>
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	41200000 	.word	0x41200000

0800bf8c <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, INA219_I2C_Handle *i2c, uint8_t Address)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	4613      	mov	r3, r2
 800bf98:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	79fa      	ldrb	r2, [r7, #7]
 800bfa4:	711a      	strb	r2, [r3, #4]

	ina219->currentDivider_mA = 0;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f04f 0200 	mov.w	r2, #0
 800bfac:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 0;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f04f 0200 	mov.w	r2, #0
 800bfb4:	60da      	str	r2, [r3, #12]

	uint8_t ina219_isReady = INA219_DeviceReady(i2c, (Address << 1), 3, 2);
 800bfb6:	79fb      	ldrb	r3, [r7, #7]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	b299      	uxth	r1, r3
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	2203      	movs	r2, #3
 800bfc2:	68b8      	ldr	r0, [r7, #8]
 800bfc4:	f000 fc47 	bl	800c856 <I2C_OS_IsDeviceReady>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d107      	bne.n	800bfe2 <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff ff85 	bl	800bee2 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f7ff ffb3 	bl	800bf44 <INA219_setCalibration_32V_2A>

		return HAL_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e000      	b.n	800bfe4 <INA219_Init+0x58>
	}

	else
	{
		return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
	}
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <LEDSpeaker_SetLED>:
 */
#include "LEDSpeakerControl.h"

int LEDSpeaker_SetLED(LEDSpeaker_HandleStruct* handler, uint8_t LeftState, uint8_t RightState,
						uint8_t FrontState, uint8_t StopState)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	70fb      	strb	r3, [r7, #3]
 800bffe:	460b      	mov	r3, r1
 800c000:	70bb      	strb	r3, [r7, #2]
 800c002:	4613      	mov	r3, r2
 800c004:	707b      	strb	r3, [r7, #1]
	uint8_t GPIOLevel;
	GPIOLevel = LeftState ? LED_LEFT_ON_GPIOLEVEL : !LED_LEFT_ON_GPIOLEVEL;
 800c006:	78fb      	ldrb	r3, [r7, #3]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bf14      	ite	ne
 800c00c:	2301      	movne	r3, #1
 800c00e:	2300      	moveq	r3, #0
 800c010:	b2db      	uxtb	r3, r3
 800c012:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->LeftPin, GPIOLevel);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	7bfa      	ldrb	r2, [r7, #15]
 800c01a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c01e:	f000 fb4a 	bl	800c6b6 <GPIO_WritePin>

	GPIOLevel = RightState ? LED_RIGHT_ON_GPIOLEVEL : !LED_RIGHT_ON_GPIOLEVEL;
 800c022:	78bb      	ldrb	r3, [r7, #2]
 800c024:	2b00      	cmp	r3, #0
 800c026:	bf14      	ite	ne
 800c028:	2301      	movne	r3, #1
 800c02a:	2300      	moveq	r3, #0
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->RightPin, GPIOLevel);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	7bfa      	ldrb	r2, [r7, #15]
 800c036:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c03a:	f000 fb3c 	bl	800c6b6 <GPIO_WritePin>

	GPIOLevel = FrontState ? LED_FRONT_ON_GPIOLEVEL : !LED_FRONT_ON_GPIOLEVEL;
 800c03e:	787b      	ldrb	r3, [r7, #1]
 800c040:	2b00      	cmp	r3, #0
 800c042:	bf14      	ite	ne
 800c044:	2301      	movne	r3, #1
 800c046:	2300      	moveq	r3, #0
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->FrontPin, GPIOLevel);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	7bfa      	ldrb	r2, [r7, #15]
 800c052:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c056:	f000 fb2e 	bl	800c6b6 <GPIO_WritePin>

	GPIOLevel = StopState ? LED_STOP_ON_GPIOLEVEL : !LED_STOP_ON_GPIOLEVEL;
 800c05a:	7e3b      	ldrb	r3, [r7, #24]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bf14      	ite	ne
 800c060:	2301      	movne	r3, #1
 800c062:	2300      	moveq	r3, #0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->StopPin, GPIOLevel);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	7bfa      	ldrb	r2, [r7, #15]
 800c06e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c072:	f000 fb20 	bl	800c6b6 <GPIO_WritePin>
	return 0;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <LEDSpeaker_setSpeaker>:

int LEDSpeaker_setSpeaker(LEDSpeaker_HandleStruct* handler, uint8_t SpeakerState)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
	uint8_t GPIOLevel = SpeakerState ? SPEAKER_ON_GPIOLEVEL : !SPEAKER_ON_GPIOLEVEL;
 800c08c:	78fb      	ldrb	r3, [r7, #3]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	bf14      	ite	ne
 800c092:	2301      	movne	r3, #1
 800c094:	2300      	moveq	r3, #0
 800c096:	b2db      	uxtb	r3, r3
 800c098:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->SpeakerPin, GPIOLevel);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	7bfa      	ldrb	r2, [r7, #15]
 800c0a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0a4:	f000 fb07 	bl	800c6b6 <GPIO_WritePin>
	return 0;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <CANFrame_RcvTask>:
			return NULL;
		}
	}
}

void CANFrame_RcvTask(void *arg) {
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b090      	sub	sp, #64	; 0x40
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
	int Status = 0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	63fb      	str	r3, [r7, #60]	; 0x3c
	CANFrame_HandlerStruct *CANHandler = (CANFrame_HandlerStruct*) arg;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_RxHeaderTypeDef CAN_RxHeader;
	CANFrame_RxHeaderTypedef CANFrame_RxHeader;
	uint8_t RxData[8];
	uint8_t senderID;
	uint8_t TargetNode;
	uint8_t FifoFillLevel = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	72fb      	strb	r3, [r7, #11]
	while (1) {
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo,
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f107 020b 	add.w	r2, r7, #11
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f000 fa35 	bl	800c544 <CAN_OS_GetRxFifoFillLevel>
				&FifoFillLevel);
		if (FifoFillLevel == 0) {
 800c0da:	7afb      	ldrb	r3, [r7, #11]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10c      	bne.n	800c0fa <CANFrame_RcvTask+0x46>
			Status = CAN_OS_ListenMsg(CANHandler->CAN, CANHandler->RxFifo,
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	6818      	ldr	r0, [r3, #0]
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f000 f9e7 	bl	800c4c0 <CAN_OS_ListenMsg>
 800c0f2:	63f8      	str	r0, [r7, #60]	; 0x3c
			osWaitForever);
			if (Status != osOK) {
 800c0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d133      	bne.n	800c162 <CANFrame_RcvTask+0xae>
				continue;
			}
		}
		Status = CAN_OS_GetRxMessage(CANHandler->CAN, CANHandler->RxFifo,
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	6899      	ldr	r1, [r3, #8]
 800c102:	f107 030c 	add.w	r3, r7, #12
 800c106:	f107 021c 	add.w	r2, r7, #28
 800c10a:	f000 fa30 	bl	800c56e <CAN_OS_GetRxMessage>
 800c10e:	63f8      	str	r0, [r7, #60]	; 0x3c
				&CAN_RxHeader, RxData);
		if (Status != osOK) {
 800c110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d127      	bne.n	800c166 <CANFrame_RcvTask+0xb2>
//		}
//		SyncPrintf("\r\n");

//		isotp_re

		if (CAN_RxHeader.StdId == g_link.receive_arbitration_id) {
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	4b14      	ldr	r3, [pc, #80]	; (800c16c <CANFrame_RcvTask+0xb8>)
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d1d3      	bne.n	800c0c8 <CANFrame_RcvTask+0x14>

			isotp_on_can_message(&g_link, RxData, CAN_RxHeader.DLC);
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	b2da      	uxtb	r2, r3
 800c124:	f107 030c 	add.w	r3, r7, #12
 800c128:	4619      	mov	r1, r3
 800c12a:	4810      	ldr	r0, [pc, #64]	; (800c16c <CANFrame_RcvTask+0xb8>)
 800c12c:	f001 f81a 	bl	800d164 <isotp_on_can_message>

			if (g_link.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 800c130:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <CANFrame_RcvTask+0xb8>)
 800c132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c136:	2b02      	cmp	r3, #2
 800c138:	d107      	bne.n	800c14a <CANFrame_RcvTask+0x96>
				CANHandler->RcvSucessCounter++;
 800c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13c:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 800c148:	e7be      	b.n	800c0c8 <CANFrame_RcvTask+0x14>
//				SyncPrintf("%s\n",(char *)g_link.receive_buffer);
			} else if (g_link.receive_protocol_result != ISOTP_PROTOCOL_RESULT_OK) {
 800c14a:	4b08      	ldr	r3, [pc, #32]	; (800c16c <CANFrame_RcvTask+0xb8>)
 800c14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0ba      	beq.n	800c0c8 <CANFrame_RcvTask+0x14>
				CANHandler->RcvFailedCounter++;
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15c:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
 800c160:	e7b2      	b.n	800c0c8 <CANFrame_RcvTask+0x14>
				continue;
 800c162:	bf00      	nop
 800c164:	e7b0      	b.n	800c0c8 <CANFrame_RcvTask+0x14>
			continue;
 800c166:	bf00      	nop
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo,
 800c168:	e7ae      	b.n	800c0c8 <CANFrame_RcvTask+0x14>
 800c16a:	bf00      	nop
 800c16c:	20000688 	.word	0x20000688

0800c170 <CANFrame_Init>:
//		}
	}
}

int CANFrame_Init(CANFrame_HandlerStruct *canhandler, CAN_OS_HandlerStruct *CAN,
		uint16_t nodeID, uint32_t CAN_RxFifo) {
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	4613      	mov	r3, r2
 800c17e:	80fb      	strh	r3, [r7, #6]
	memset(canhandler, 0, sizeof(CANFrame_HandlerStruct));
 800c180:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c184:	2100      	movs	r1, #0
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f001 fc8e 	bl	800daa8 <memset>
	canhandler->CAN = CAN;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	601a      	str	r2, [r3, #0]
	canhandler->nodeID = nodeID;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	88fa      	ldrh	r2, [r7, #6]
 800c196:	809a      	strh	r2, [r3, #4]
	canhandler->usedFilterBank = 0;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	80da      	strh	r2, [r3, #6]
	canhandler->RxFifo = CAN_RxFifo;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	683a      	ldr	r2, [r7, #0]
 800c1a2:	609a      	str	r2, [r3, #8]

	canhandler->TxSem = osSemaphoreNew(1, 1, NULL);
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	f7fb f89f 	bl	80072ec <osSemaphoreNew>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	60da      	str	r2, [r3, #12]
	canhandler->rcvHandler_Th = osThreadNew(CANFrame_RcvTask, canhandler,
 800c1b4:	4a0b      	ldr	r2, [pc, #44]	; (800c1e4 <CANFrame_Init+0x74>)
 800c1b6:	68f9      	ldr	r1, [r7, #12]
 800c1b8:	480b      	ldr	r0, [pc, #44]	; (800c1e8 <CANFrame_Init+0x78>)
 800c1ba:	f7fa fc6f 	bl	8006a9c <osThreadNew>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	611a      	str	r2, [r3, #16]
			&CANRcvTask_attributes);
	CANFrame_FilterConfig(canhandler, CANFRAME_ALL_NODE, CAN_RxFifo);
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 f879 	bl	800c2c0 <CANFrame_FilterConfig>
	return CANFrame_FilterConfig(canhandler, nodeID, CAN_RxFifo);
 800c1ce:	88fb      	ldrh	r3, [r7, #6]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f000 f873 	bl	800c2c0 <CANFrame_FilterConfig>
 800c1da:	4603      	mov	r3, r0

}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	0800f0f0 	.word	0x0800f0f0
 800c1e8:	0800c0b5 	.word	0x0800c0b5

0800c1ec <CANFrame_Send>:

int CANFrame_Send(CANFrame_HandlerStruct *canhandler,
		CANFrame_TxHeaderTypedef *CANFrame_txHeader, uint8_t *Data,
		uint32_t timeout) {
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b09c      	sub	sp, #112	; 0x70
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
	int Status;

	CAN_TxHeaderTypeDef CAN_TxHeader;
	/*Config Frame----------------------------------------------------------------*/
	CAN_TxHeader.DLC = 8;
 800c1fa:	2308      	movs	r3, #8
 800c1fc:	667b      	str	r3, [r7, #100]	; 0x64
	CAN_TxHeader.RTR = CAN_RTR_DATA;
 800c1fe:	2300      	movs	r3, #0
 800c200:	663b      	str	r3, [r7, #96]	; 0x60
	CAN_TxHeader.IDE = CAN_ID_STD;
 800c202:	2300      	movs	r3, #0
 800c204:	65fb      	str	r3, [r7, #92]	; 0x5c
	/*Config ID-------------------------------------------------------------------*/
	uint32_t Txmailbox;
	uint16_t ID_NUM = (CANFrame_txHeader->MessageType << 7)
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	01db      	lsls	r3, r3, #7
			| CANFrame_txHeader->TargetNode << 3;
 800c20c:	b21a      	sxth	r2, r3
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	885b      	ldrh	r3, [r3, #2]
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	b21b      	sxth	r3, r3
 800c216:	4313      	orrs	r3, r2
 800c218:	b21b      	sxth	r3, r3
	uint16_t ID_NUM = (CANFrame_txHeader->MessageType << 7)
 800c21a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if (CANFrame_txHeader->DataLen > CANFRAME_MAX_BUFFER_SIZE) {
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	889b      	ldrh	r3, [r3, #4]
 800c222:	2b37      	cmp	r3, #55	; 0x37
 800c224:	d902      	bls.n	800c22c <CANFrame_Send+0x40>
		return osErrorParameter;
 800c226:	f06f 0303 	mvn.w	r3, #3
 800c22a:	e02c      	b.n	800c286 <CANFrame_Send+0x9a>
	}
	isotp_send(&g_link, Data, CANFrame_txHeader->DataLen);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	889b      	ldrh	r3, [r3, #4]
 800c230:	461a      	mov	r2, r3
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	4816      	ldr	r0, [pc, #88]	; (800c290 <CANFrame_Send+0xa4>)
 800c236:	f000 ff07 	bl	800d048 <isotp_send>
//	g_link.send_status = ISOTP_SEND_STATUS_IDLE;
	while (g_link.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
 800c23a:	e005      	b.n	800c248 <CANFrame_Send+0x5c>
		isotp_poll(&g_link);
 800c23c:	4814      	ldr	r0, [pc, #80]	; (800c290 <CANFrame_Send+0xa4>)
 800c23e:	f001 f90c 	bl	800d45a <isotp_poll>
		osDelay(5);
 800c242:	2005      	movs	r0, #5
 800c244:	f7fa fd78 	bl	8006d38 <osDelay>
	while (g_link.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
 800c248:	4b11      	ldr	r3, [pc, #68]	; (800c290 <CANFrame_Send+0xa4>)
 800c24a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d0f4      	beq.n	800c23c <CANFrame_Send+0x50>
	}
	if (g_link.send_status == ISOTP_SEND_STATUS_IDLE) {
 800c252:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <CANFrame_Send+0xa4>)
 800c254:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d107      	bne.n	800c26c <CANFrame_Send+0x80>
		canhandler->SendSuccessCounter++;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c262:	1c5a      	adds	r2, r3, #1
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c26a:	e00b      	b.n	800c284 <CANFrame_Send+0x98>
	} else if (g_link.send_status == ISOTP_SEND_STATUS_ERROR) {
 800c26c:	4b08      	ldr	r3, [pc, #32]	; (800c290 <CANFrame_Send+0xa4>)
 800c26e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c272:	2b02      	cmp	r3, #2
 800c274:	d106      	bne.n	800c284 <CANFrame_Send+0x98>
		canhandler->SendFailedCounter++;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}

	return osOK;
 800c284:	2300      	movs	r3, #0
	osSemaphoreRelease(canhandler->TxSem);
#ifdef CANFRAME_ENABLE_COUNTER
	canhandler->SendSuccessCounter++;
#endif
	return osOK;
}
 800c286:	4618      	mov	r0, r3
 800c288:	3770      	adds	r7, #112	; 0x70
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	20000688 	.word	0x20000688

0800c294 <CANFrame_RegCB>:

int CANFrame_RegCB(CANFrame_HandlerStruct *CANHandler, uint8_t CallbackID,
		void (*Func)(CANFrame_RxHeaderTypedef*, uint8_t*)) {
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	460b      	mov	r3, r1
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	72fb      	strb	r3, [r7, #11]
	switch (CallbackID) {
 800c2a2:	7afb      	ldrb	r3, [r7, #11]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d104      	bne.n	800c2b2 <CANFrame_RegCB+0x1e>
	case CANFRAME_RCVCPLT_CB_ID:
		CANHandler->ReceiveDataCB = Func;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	615a      	str	r2, [r3, #20]
		return osOK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e001      	b.n	800c2b6 <CANFrame_RegCB+0x22>
	default:
		return osErrorParameter;
 800c2b2:	f06f 0303 	mvn.w	r3, #3

	}

}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3714      	adds	r7, #20
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bc80      	pop	{r7}
 800c2be:	4770      	bx	lr

0800c2c0 <CANFrame_FilterConfig>:

int CANFrame_FilterConfig(CANFrame_HandlerStruct *Can, uint16_t NodeID,
		uint32_t RxFifo) {
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08e      	sub	sp, #56	; 0x38
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	817b      	strh	r3, [r7, #10]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	633b      	str	r3, [r7, #48]	; 0x30
	Can_filter_init.FilterBank = Can->usedFilterBank++;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	88db      	ldrh	r3, [r3, #6]
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	b291      	uxth	r1, r2
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	80d1      	strh	r1, [r2, #6]
 800c2de:	627b      	str	r3, [r7, #36]	; 0x24
	if (Can->usedFilterBank > 14) {
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	88db      	ldrh	r3, [r3, #6]
 800c2e4:	2b0e      	cmp	r3, #14
 800c2e6:	d901      	bls.n	800c2ec <CANFrame_FilterConfig+0x2c>
		Error_Handler();
 800c2e8:	f7f4 fd08 	bl	8000cfc <Error_Handler>
	}
	Can_filter_init.FilterFIFOAssignment = RxFifo;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterIdHigh = NodeID << 8;
 800c2f0:	897b      	ldrh	r3, [r7, #10]
 800c2f2:	021b      	lsls	r3, r3, #8
 800c2f4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdLow = 0x0000;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMaskIdHigh = 0x0F00;
 800c2fa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c2fe:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800c304:	2300      	movs	r3, #0
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800c308:	2301      	movs	r3, #1
 800c30a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (CAN_OS_ConfigFilter(Can->CAN, &Can_filter_init) != HAL_OK) {
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f107 0210 	add.w	r2, r7, #16
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f000 f830 	bl	800c37c <CAN_OS_ConfigFilter>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <CANFrame_FilterConfig+0x66>
		Error_Handler();
 800c322:	f7f4 fceb 	bl	8000cfc <Error_Handler>
	}
	return osOK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3738      	adds	r7, #56	; 0x38
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <CAN_OS_Init>:

#include "CANHandler.h"

int CAN_OS_Init(CAN_OS_HandlerStruct* CANHandler, CAN_HandleTypeDef* hcan)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
	HAL_CAN_Stop(hcan);
 800c33a:	6838      	ldr	r0, [r7, #0]
 800c33c:	f7f5 fbb7 	bl	8001aae <HAL_CAN_Stop>
	CANHandler->hcan = hcan;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	601a      	str	r2, [r3, #0]
	CANHandler->EventFlag = osEventFlagsNew(NULL);
 800c346:	2000      	movs	r0, #0
 800c348:	f7fa fd24 	bl	8006d94 <osEventFlagsNew>
 800c34c:	4602      	mov	r2, r0
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	60da      	str	r2, [r3, #12]
	CANHandler->TxSemaphore = osSemaphoreNew(CAN_OS_TxMailBox_Max, CAN_OS_TxMailBox_Max, NULL);
 800c352:	2200      	movs	r2, #0
 800c354:	2103      	movs	r1, #3
 800c356:	2003      	movs	r0, #3
 800c358:	f7fa ffc8 	bl	80072ec <osSemaphoreNew>
 800c35c:	4602      	mov	r2, r0
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	605a      	str	r2, [r3, #4]
	CANHandler->RxSemaphore = osSemaphoreNew(1, 1, NULL);
 800c362:	2200      	movs	r2, #0
 800c364:	2101      	movs	r1, #1
 800c366:	2001      	movs	r0, #1
 800c368:	f7fa ffc0 	bl	80072ec <osSemaphoreNew>
 800c36c:	4602      	mov	r2, r0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <CAN_OS_ConfigFilter>:

int CAN_OS_ConfigFilter(CAN_OS_HandlerStruct* CANHandler,const CAN_FilterTypeDef* Filter)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef Status =  HAL_CAN_ConfigFilter(CANHandler->hcan, Filter);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f5 fa81 	bl	8001894 <HAL_CAN_ConfigFilter>
 800c392:	4603      	mov	r3, r0
 800c394:	73fb      	strb	r3, [r7, #15]
	return Status == HAL_OK? osOK: osError;
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <CAN_OS_ConfigFilter+0x24>
 800c39c:	2300      	movs	r3, #0
 800c39e:	e001      	b.n	800c3a4 <CAN_OS_ConfigFilter+0x28>
 800c3a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <CAN_OS_Start>:
{
	 return HAL_CAN_ActivateNotification(CANHandler->hcan,ActiveITs);
}

int CAN_OS_Start(CAN_OS_HandlerStruct* CANHandler)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
//	CAN_OS_ActivateNotification(CANHandler, CAN_IT_TX_MAILBOX_EMPTY);

	return HAL_CAN_Start(CANHandler->hcan);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f5 fb34 	bl	8001a26 <HAL_CAN_Start>
 800c3be:	4603      	mov	r3, r0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <CAN_MailboxSync>:

static inline void CAN_MailboxSync(CAN_OS_HandlerStruct* CANHandler)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
	uint32_t FreeMailbox;
	uint32_t semCount;
	while(1)
	{
		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(CANHandler->hcan);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7f5 fc82 	bl	8001cde <HAL_CAN_GetTxMailboxesFreeLevel>
 800c3da:	60f8      	str	r0, [r7, #12]
		semCount = osSemaphoreGetCount(CANHandler->TxSemaphore);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fb f8dd 	bl	80075a0 <osSemaphoreGetCount>
 800c3e6:	60b8      	str	r0, [r7, #8]
		if(semCount == FreeMailbox)
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d010      	beq.n	800c412 <CAN_MailboxSync+0x4a>
		{
			return;
		}else if( semCount < FreeMailbox)
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d205      	bcs.n	800c404 <CAN_MailboxSync+0x3c>
		{
			osSemaphoreRelease(CANHandler->TxSemaphore);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fb f877 	bl	80074f0 <osSemaphoreRelease>
 800c402:	e7e5      	b.n	800c3d0 <CAN_MailboxSync+0x8>
		}else
		{
			osSemaphoreAcquire(CANHandler->TxSemaphore, 0);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	2100      	movs	r1, #0
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fb f80a 	bl	8007424 <osSemaphoreAcquire>
		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(CANHandler->hcan);
 800c410:	e7de      	b.n	800c3d0 <CAN_MailboxSync+0x8>
			return;
 800c412:	bf00      	nop
		}
	}
}
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <CAN_OS_Transmit>:

int CAN_OS_Transmit(CAN_OS_HandlerStruct* CANHandler, const CAN_TxHeaderTypeDef *txHeader, uint8_t* txData, uint32_t* txMailbox, uint32_t timeout)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b086      	sub	sp, #24
 800c41e:	af00      	add	r7, sp, #0
 800c420:	60f8      	str	r0, [r7, #12]
 800c422:	60b9      	str	r1, [r7, #8]
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	603b      	str	r3, [r7, #0]
	int Status;
	uint32_t StartTime = osKernelGetTickCount();
 800c428:	f7fa fb10 	bl	8006a4c <osKernelGetTickCount>
 800c42c:	6178      	str	r0, [r7, #20]
	CAN_MailboxSync(CANHandler);
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff ffca 	bl	800c3c8 <CAN_MailboxSync>
	Status = osSemaphoreAcquire(CANHandler->TxSemaphore, timeout);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	6a39      	ldr	r1, [r7, #32]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fa fff2 	bl	8007424 <osSemaphoreAcquire>
 800c440:	6138      	str	r0, [r7, #16]
	if(Status == osErrorTimeout) return HAL_TIMEOUT;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f113 0f02 	cmn.w	r3, #2
 800c448:	d101      	bne.n	800c44e <CAN_OS_Transmit+0x34>
 800c44a:	2303      	movs	r3, #3
 800c44c:	e034      	b.n	800c4b8 <CAN_OS_Transmit+0x9e>
	Status = HAL_CAN_AddTxMessage(CANHandler->hcan, txHeader, txData, txMailbox);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	f7f5 fb72 	bl	8001b40 <HAL_CAN_AddTxMessage>
 800c45c:	4603      	mov	r3, r0
 800c45e:	613b      	str	r3, [r7, #16]

	if (Status != HAL_OK){
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d017      	beq.n	800c496 <CAN_OS_Transmit+0x7c>
		osSemaphoreRelease(CANHandler->TxSemaphore);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fb f840 	bl	80074f0 <osSemaphoreRelease>
		return osError;
 800c470:	f04f 33ff 	mov.w	r3, #4294967295
 800c474:	e020      	b.n	800c4b8 <CAN_OS_Transmit+0x9e>
	}
	while(HAL_CAN_IsTxMessagePending(CANHandler->hcan, *txMailbox))
	{
		if (osKernelGetTickCount() - StartTime > timeout)
 800c476:	f7fa fae9 	bl	8006a4c <osKernelGetTickCount>
 800c47a:	4602      	mov	r2, r0
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	6a3a      	ldr	r2, [r7, #32]
 800c482:	429a      	cmp	r2, r3
 800c484:	d207      	bcs.n	800c496 <CAN_OS_Transmit+0x7c>
		{
			osSemaphoreRelease(CANHandler->TxSemaphore);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fb f830 	bl	80074f0 <osSemaphoreRelease>
			return osErrorTimeout;
 800c490:	f06f 0301 	mvn.w	r3, #1
 800c494:	e010      	b.n	800c4b8 <CAN_OS_Transmit+0x9e>
	while(HAL_CAN_IsTxMessagePending(CANHandler->hcan, *txMailbox))
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7f5 fc50 	bl	8001d46 <HAL_CAN_IsTxMessagePending>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e4      	bne.n	800c476 <CAN_OS_Transmit+0x5c>
		}
	}
	osSemaphoreRelease(CANHandler->TxSemaphore);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fb f81d 	bl	80074f0 <osSemaphoreRelease>

	return osOK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <CAN_OS_ListenMsg>:
//	int Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
//	return Status > 0 ? osOK : Status;
//}

int CAN_OS_ListenMsg(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint32_t timeout)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
	int Status;
	uint32_t activateITS;
	uint8_t waitEvent;
	if (rxFifo == CAN_FILTER_FIFO0){
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d104      	bne.n	800c4dc <CAN_OS_ListenMsg+0x1c>
		activateITS = CAN_IT_RX_FIFO0_MSG_PENDING;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo0Cplt_Event;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	76fb      	strb	r3, [r7, #27]
 800c4da:	e00a      	b.n	800c4f2 <CAN_OS_ListenMsg+0x32>
	}
	else if (rxFifo == CAN_FILTER_FIFO1 ) {
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d104      	bne.n	800c4ec <CAN_OS_ListenMsg+0x2c>
		activateITS = CAN_IT_RX_FIFO1_MSG_PENDING;
 800c4e2:	2310      	movs	r3, #16
 800c4e4:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo1Cplt_Event;
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	76fb      	strb	r3, [r7, #27]
 800c4ea:	e002      	b.n	800c4f2 <CAN_OS_ListenMsg+0x32>
	}
	else return osErrorParameter;
 800c4ec:	f06f 0303 	mvn.w	r3, #3
 800c4f0:	e024      	b.n	800c53c <CAN_OS_ListenMsg+0x7c>

	Status = HAL_CAN_ActivateNotification(CANHandler->hcan, activateITS);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	69f9      	ldr	r1, [r7, #28]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f5 fd8f 	bl	800201c <HAL_CAN_ActivateNotification>
 800c4fe:	4603      	mov	r3, r0
 800c500:	617b      	str	r3, [r7, #20]

	Status = osSemaphoreAcquire(CANHandler->RxSemaphore, timeout);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fa ff8b 	bl	8007424 <osSemaphoreAcquire>
 800c50e:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <CAN_OS_ListenMsg+0x5a>
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	e010      	b.n	800c53c <CAN_OS_ListenMsg+0x7c>
	Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	68d8      	ldr	r0, [r3, #12]
 800c51e:	7ef9      	ldrb	r1, [r7, #27]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f7fa fd24 	bl	8006f70 <osEventFlagsWait>
 800c528:	4603      	mov	r3, r0
 800c52a:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(CANHandler->RxSemaphore);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	4618      	mov	r0, r3
 800c532:	f7fa ffdd 	bl	80074f0 <osSemaphoreRelease>
	return Status > 0 ? osOK : Status;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <CAN_OS_GetRxFifoFillLevel>:

int CAN_OS_GetRxFifoFillLevel(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint8_t* FillLevel)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
	*FillLevel = HAL_CAN_GetRxFifoFillLevel(CANHandler->hcan, rxFifo);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	4618      	mov	r0, r3
 800c558:	f7f5 fd39 	bl	8001fce <HAL_CAN_GetRxFifoFillLevel>
 800c55c:	4603      	mov	r3, r0
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	701a      	strb	r2, [r3, #0]
	return osOK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <CAN_OS_GetRxMessage>:

int CAN_OS_GetRxMessage(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, CAN_RxHeaderTypeDef* rxHeader, uint8_t* rxData)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b086      	sub	sp, #24
 800c572:	af00      	add	r7, sp, #0
 800c574:	60f8      	str	r0, [r7, #12]
 800c576:	60b9      	str	r1, [r7, #8]
 800c578:	607a      	str	r2, [r7, #4]
 800c57a:	603b      	str	r3, [r7, #0]
	uint8_t Status = HAL_CAN_GetRxMessage(CANHandler->hcan, rxFifo, rxHeader, rxData);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	f7f5 fc01 	bl	8001d8c <HAL_CAN_GetRxMessage>
 800c58a:	4603      	mov	r3, r0
 800c58c:	75fb      	strb	r3, [r7, #23]
	return Status == HAL_OK? osOK: osError;
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <CAN_OS_GetRxMessage+0x2a>
 800c594:	2300      	movs	r3, #0
 800c596:	e001      	b.n	800c59c <CAN_OS_GetRxMessage+0x2e>
 800c598:	f04f 33ff 	mov.w	r3, #4294967295

}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <CAN_OS_RxFifo0Cplt_CB>:

void CAN_OS_RxFifo0Cplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	695a      	ldr	r2, [r3, #20]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f022 0202 	bic.w	r2, r2, #2
 800c5be:	615a      	str	r2, [r3, #20]
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo0Cplt_Event);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	2101      	movs	r1, #1
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fa fc36 	bl	8006e38 <osEventFlagsSet>
}
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <CAN_OS_TxCplt_CB>:
{
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo1Cplt_Event);
}
void CAN_OS_TxCplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CANHandler->TxSemaphore);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fa ff85 	bl	80074f0 <osSemaphoreRelease>

}
 800c5e6:	bf00      	nop
 800c5e8:	3708      	adds	r7, #8
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <CAN_OS_RegisterCB>:

int CAN_OS_RegisterCB(CAN_OS_HandlerStruct *hcan, uint8_t callbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	607a      	str	r2, [r7, #4]
 800c5fa:	72fb      	strb	r3, [r7, #11]
	switch (callbackID)
 800c5fc:	7afb      	ldrb	r3, [r7, #11]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d039      	beq.n	800c676 <CAN_OS_RegisterCB+0x88>
 800c602:	2b02      	cmp	r3, #2
 800c604:	dc3f      	bgt.n	800c686 <CAN_OS_RegisterCB+0x98>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d002      	beq.n	800c610 <CAN_OS_RegisterCB+0x22>
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d02b      	beq.n	800c666 <CAN_OS_RegisterCB+0x78>
 800c60e:	e03a      	b.n	800c686 <CAN_OS_RegisterCB+0x98>
	{
		case CAN_OS_ActivateTxCB_ID:
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID,pCallback);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	2100      	movs	r1, #0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7f5 f88d 	bl	8001738 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID,pCallback);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	2101      	movs	r1, #1
 800c626:	4618      	mov	r0, r3
 800c628:	f7f5 f886 	bl	8001738 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID,pCallback);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	2102      	movs	r1, #2
 800c634:	4618      	mov	r0, r3
 800c636:	f7f5 f87f 	bl	8001738 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_ABORT_CB_ID,pCallback);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	2103      	movs	r1, #3
 800c642:	4618      	mov	r0, r3
 800c644:	f7f5 f878 	bl	8001738 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_ABORT_CB_ID,pCallback);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	2104      	movs	r1, #4
 800c650:	4618      	mov	r0, r3
 800c652:	f7f5 f871 	bl	8001738 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_ABORT_CB_ID,pCallback);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	2105      	movs	r1, #5
 800c65e:	4618      	mov	r0, r3
 800c660:	f7f5 f86a 	bl	8001738 <HAL_CAN_RegisterCallback>
			break;
 800c664:	e012      	b.n	800c68c <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo0_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID,pCallback);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	2106      	movs	r1, #6
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f5 f862 	bl	8001738 <HAL_CAN_RegisterCallback>

			break;
 800c674:	e00a      	b.n	800c68c <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo1_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID,pCallback);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	2108      	movs	r1, #8
 800c67e:	4618      	mov	r0, r3
 800c680:	f7f5 f85a 	bl	8001738 <HAL_CAN_RegisterCallback>

			break;
 800c684:	e002      	b.n	800c68c <CAN_OS_RegisterCB+0x9e>
		default:
			return osErrorParameter;
 800c686:	f06f 0303 	mvn.w	r3, #3
 800c68a:	e000      	b.n	800c68e <CAN_OS_RegisterCB+0xa0>
			break;
	}
	return osOK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <GPIO_TogglePin>:
GPIO_HandlerStruct PC6 = {.Port = GPIOC, .Pin = GPIO_PIN_6};
GPIO_HandlerStruct PC13 = {.Port = GPIOC, .Pin = GPIO_PIN_13};


void GPIO_TogglePin(GPIO_HandlerStruct GPIO)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b082      	sub	sp, #8
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	463b      	mov	r3, r7
 800c69e:	e883 0003 	stmia.w	r3, {r0, r1}
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	b292      	uxth	r2, r2
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7f6 fc7a 	bl	8002fa4 <HAL_GPIO_TogglePin>
}
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6c4:	607a      	str	r2, [r7, #4]
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	b291      	uxth	r1, r2
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	b2d2      	uxtb	r2, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7f6 fc4f 	bl	8002f74 <HAL_GPIO_WritePin>
}
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <I2C_OS_Init>:
 */


#include "I2C_Handler.h"
int I2C_OS_Init(I2C_OS_HandlerStruct* i2c, I2C_HandleTypeDef* hi2c)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	i2c->hi2c = hi2c;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	601a      	str	r2, [r3, #0]
//	osSemaphoreNew(1, 0, NULL);
	i2c->Semaphore = osSemaphoreNew(1, 1, NULL);
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	f7fa fdfb 	bl	80072ec <osSemaphoreNew>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	605a      	str	r2, [r3, #4]
	i2c->EventFlag = osEventFlagsNew(NULL);
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f7fa fb49 	bl	8006d94 <osEventFlagsNew>
 800c702:	4602      	mov	r2, r0
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	609a      	str	r2, [r3, #8]
	return 0;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <I2C_OS_MEM_Write_IT>:
	return Status;
}

int I2C_OS_MEM_Write_IT(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress,uint16_t MemAddress,
		uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t timeout)
{
 800c712:	b590      	push	{r4, r7, lr}
 800c714:	b089      	sub	sp, #36	; 0x24
 800c716:	af02      	add	r7, sp, #8
 800c718:	60f8      	str	r0, [r7, #12]
 800c71a:	4608      	mov	r0, r1
 800c71c:	4611      	mov	r1, r2
 800c71e:	461a      	mov	r2, r3
 800c720:	4603      	mov	r3, r0
 800c722:	817b      	strh	r3, [r7, #10]
 800c724:	460b      	mov	r3, r1
 800c726:	813b      	strh	r3, [r7, #8]
 800c728:	4613      	mov	r3, r2
 800c72a:	80fb      	strh	r3, [r7, #6]
	int Status = osOK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, timeout);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c736:	4618      	mov	r0, r3
 800c738:	f7fa fe74 	bl	8007424 <osSemaphoreAcquire>
 800c73c:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d001      	beq.n	800c748 <I2C_OS_MEM_Write_IT+0x36>
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	e031      	b.n	800c7ac <I2C_OS_MEM_Write_IT+0x9a>
	osEventFlagsClear(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	2101      	movs	r1, #1
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fa fbca 	bl	8006ee8 <osEventFlagsClear>
	Status = HAL_I2C_Mem_Write_IT(i2c->hi2c, DevAddress, MemAddress, MemAddSize, pData, Size);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6818      	ldr	r0, [r3, #0]
 800c758:	88fc      	ldrh	r4, [r7, #6]
 800c75a:	893a      	ldrh	r2, [r7, #8]
 800c75c:	8979      	ldrh	r1, [r7, #10]
 800c75e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	4623      	mov	r3, r4
 800c768:	f7f6 fd8e 	bl	8003288 <HAL_I2C_Mem_Write_IT>
 800c76c:	4603      	mov	r3, r0
 800c76e:	617b      	str	r3, [r7, #20]
	if (Status != 0)
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <I2C_OS_MEM_Write_IT+0x78>
	{
		Status = osError;
 800c776:	f04f 33ff 	mov.w	r3, #4294967295
 800c77a:	617b      	str	r3, [r7, #20]
		osSemaphoreRelease(i2c->Semaphore);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4618      	mov	r0, r3
 800c782:	f7fa feb5 	bl	80074f0 <osSemaphoreRelease>
		return Status;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	e010      	b.n	800c7ac <I2C_OS_MEM_Write_IT+0x9a>
	}
	Status = osEventFlagsWait(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG, osFlagsWaitAll, timeout);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	6898      	ldr	r0, [r3, #8]
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	2201      	movs	r2, #1
 800c792:	2101      	movs	r1, #1
 800c794:	f7fa fbec 	bl	8006f70 <osEventFlagsWait>
 800c798:	4603      	mov	r3, r0
 800c79a:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(i2c->Semaphore);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7fa fea5 	bl	80074f0 <osSemaphoreRelease>
	return Status > 0 ? osOK: Status ;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	371c      	adds	r7, #28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd90      	pop	{r4, r7, pc}

0800c7b4 <I2C_OS_MEM_Read_IT>:

int I2C_OS_MEM_Read_IT(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress,
		uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t timeout)
{
 800c7b4:	b590      	push	{r4, r7, lr}
 800c7b6:	b089      	sub	sp, #36	; 0x24
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	4608      	mov	r0, r1
 800c7be:	4611      	mov	r1, r2
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	817b      	strh	r3, [r7, #10]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	813b      	strh	r3, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	80fb      	strh	r3, [r7, #6]
	int Status = osOK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, timeout );
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fa fe23 	bl	8007424 <osSemaphoreAcquire>
 800c7de:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <I2C_OS_MEM_Read_IT+0x36>
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	e031      	b.n	800c84e <I2C_OS_MEM_Read_IT+0x9a>
	osEventFlagsClear(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	2102      	movs	r1, #2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fa fb79 	bl	8006ee8 <osEventFlagsClear>
	Status = HAL_I2C_Mem_Read_IT(i2c->hi2c, DevAddress, MemAddress, MemAddSize, pData, Size);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	88fc      	ldrh	r4, [r7, #6]
 800c7fc:	893a      	ldrh	r2, [r7, #8]
 800c7fe:	8979      	ldrh	r1, [r7, #10]
 800c800:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	4623      	mov	r3, r4
 800c80a:	f7f6 fde9 	bl	80033e0 <HAL_I2C_Mem_Read_IT>
 800c80e:	4603      	mov	r3, r0
 800c810:	617b      	str	r3, [r7, #20]
	if (Status != 0)
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d009      	beq.n	800c82c <I2C_OS_MEM_Read_IT+0x78>
	{
		Status = osError;
 800c818:	f04f 33ff 	mov.w	r3, #4294967295
 800c81c:	617b      	str	r3, [r7, #20]
		osSemaphoreRelease(i2c->Semaphore);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	f7fa fe64 	bl	80074f0 <osSemaphoreRelease>
		return Status;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	e010      	b.n	800c84e <I2C_OS_MEM_Read_IT+0x9a>
	}
	Status = osEventFlagsWait(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG, osFlagsWaitAll, timeout);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6898      	ldr	r0, [r3, #8]
 800c830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c832:	2201      	movs	r2, #1
 800c834:	2102      	movs	r1, #2
 800c836:	f7fa fb9b 	bl	8006f70 <osEventFlagsWait>
 800c83a:	4603      	mov	r3, r0
 800c83c:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(i2c->Semaphore);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	4618      	mov	r0, r3
 800c844:	f7fa fe54 	bl	80074f0 <osSemaphoreRelease>
	return Status > 0 ? osOK: Status;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c84e:	4618      	mov	r0, r3
 800c850:	371c      	adds	r7, #28
 800c852:	46bd      	mov	sp, r7
 800c854:	bd90      	pop	{r4, r7, pc}

0800c856 <I2C_OS_IsDeviceReady>:

int I2C_OS_IsDeviceReady(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress, uint32_t
		Trials, uint32_t Timeout)
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b086      	sub	sp, #24
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	60f8      	str	r0, [r7, #12]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
 800c862:	460b      	mov	r3, r1
 800c864:	817b      	strh	r3, [r7, #10]
	int Status = osOK;
 800c866:	2300      	movs	r3, #0
 800c868:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, Timeout);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	6839      	ldr	r1, [r7, #0]
 800c870:	4618      	mov	r0, r3
 800c872:	f7fa fdd7 	bl	8007424 <osSemaphoreAcquire>
 800c876:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <I2C_OS_IsDeviceReady+0x2c>
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	e017      	b.n	800c8b2 <I2C_OS_IsDeviceReady+0x5c>
	Status = HAL_I2C_IsDeviceReady(i2c->hi2c, DevAddress, Trials, Timeout);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	8979      	ldrh	r1, [r7, #10]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	f7f6 fe60 	bl	8003550 <HAL_I2C_IsDeviceReady>
 800c890:	4603      	mov	r3, r0
 800c892:	617b      	str	r3, [r7, #20]

	if (Status != 0)
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <I2C_OS_IsDeviceReady+0x4c>
	{
		Status = osError;
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e001      	b.n	800c8a6 <I2C_OS_IsDeviceReady+0x50>
	} else
	{
		Status = osOK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
	}
	osSemaphoreRelease(i2c->Semaphore);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fa fe20 	bl	80074f0 <osSemaphoreRelease>
	return Status;
 800c8b0:	697b      	ldr	r3, [r7, #20]

}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <I2C_OS_MEM_RxCpltCB>:
	osSemaphoreRelease(i2c->Semaphore);
	return Status > 0 ? osOK: Status;
}

void I2C_OS_MEM_RxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b082      	sub	sp, #8
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	2102      	movs	r1, #2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fa fab5 	bl	8006e38 <osEventFlagsSet>
}
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <I2C_OS_MEM_TxCpltCB>:
void I2C_OS_MEM_TxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b082      	sub	sp, #8
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fa faa7 	bl	8006e38 <osEventFlagsSet>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
	...

0800c8f4 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 800c8f8:	4803      	ldr	r0, [pc, #12]	; (800c908 <SyncPrintf_Init+0x14>)
 800c8fa:	f7fa fbaf 	bl	800705c <osMutexNew>
 800c8fe:	4603      	mov	r3, r0
 800c900:	4a02      	ldr	r2, [pc, #8]	; (800c90c <SyncPrintf_Init+0x18>)
 800c902:	6013      	str	r3, [r2, #0]
}
 800c904:	bf00      	nop
 800c906:	bd80      	pop	{r7, pc}
 800c908:	0800f114 	.word	0x0800f114
 800c90c:	200036a4 	.word	0x200036a4

0800c910 <SyncPrintf>:

int	SyncPrintf (const char *__restrict format, ...)
{
 800c910:	b40f      	push	{r0, r1, r2, r3}
 800c912:	b580      	push	{r7, lr}
 800c914:	b096      	sub	sp, #88	; 0x58
 800c916:	af00      	add	r7, sp, #0
#if USE_SyncPrintf == 1
	osMutexAcquire(PrintfMutex, osWaitForever);
 800c918:	4b1d      	ldr	r3, [pc, #116]	; (800c990 <SyncPrintf+0x80>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f04f 31ff 	mov.w	r1, #4294967295
 800c920:	4618      	mov	r0, r3
 800c922:	f7fa fc35 	bl	8007190 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 800c926:	2300      	movs	r3, #0
 800c928:	60bb      	str	r3, [r7, #8]
 800c92a:	f107 030c 	add.w	r3, r7, #12
 800c92e:	2242      	movs	r2, #66	; 0x42
 800c930:	2100      	movs	r1, #0
 800c932:	4618      	mov	r0, r3
 800c934:	f001 f8b8 	bl	800daa8 <memset>
	size_t size = PrintBufferSize;
 800c938:	2346      	movs	r3, #70	; 0x46
 800c93a:	607b      	str	r3, [r7, #4]
	va_start(arg,format);
 800c93c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c940:	653b      	str	r3, [r7, #80]	; 0x50
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 800c942:	1d39      	adds	r1, r7, #4
 800c944:	f107 0008 	add.w	r0, r7, #8
 800c948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c94a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c94c:	f001 f89e 	bl	800da8c <vasniprintf>
 800c950:	6578      	str	r0, [r7, #84]	; 0x54
	va_end(arg);
	if(Output != NULL)
 800c952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00e      	beq.n	800c976 <SyncPrintf+0x66>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	230a      	movs	r3, #10
 800c95e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c960:	480c      	ldr	r0, [pc, #48]	; (800c994 <SyncPrintf+0x84>)
 800c962:	f7f8 ff8f 	bl	8005884 <HAL_UART_Transmit>

		if(Output != Buffer)
 800c966:	f107 0308 	add.w	r3, r7, #8
 800c96a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d002      	beq.n	800c976 <SyncPrintf+0x66>
		{

			vPortFree(Output);
 800c970:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c972:	f7fe fb27 	bl	800afc4 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <SyncPrintf+0x80>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fa fc66 	bl	800724c <osMutexRelease>

	return size;
 800c980:	687b      	ldr	r3, [r7, #4]
#else
	return 0;
#endif
}
 800c982:	4618      	mov	r0, r3
 800c984:	3758      	adds	r7, #88	; 0x58
 800c986:	46bd      	mov	sp, r7
 800c988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c98c:	b004      	add	sp, #16
 800c98e:	4770      	bx	lr
 800c990:	200036a4 	.word	0x200036a4
 800c994:	20000184 	.word	0x20000184

0800c998 <UART_OS_Init>:
#include <stdarg.h>
#include "string.h"

#define UART_OS_PrintfBufferSize 100
void UART_OS_Init(UART_OS_HandlerStruct* UART, UART_HandleTypeDef* huart)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
	UART->RXMutex = osMutexNew(NULL);
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f7fa fb5a 	bl	800705c <osMutexNew>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	605a      	str	r2, [r3, #4]
	UART->TXMutex = osMutexNew(NULL);
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	f7fa fb54 	bl	800705c <osMutexNew>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	609a      	str	r2, [r3, #8]
	UART->EventFlags = osEventFlagsNew(NULL);
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	f7fa f9ea 	bl	8006d94 <osEventFlagsNew>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	60da      	str	r2, [r3, #12]
	UART->huart = huart;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	601a      	str	r2, [r3, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <UART_OS_Receive_ToIdle>:

	return Status>0? osOK: Status;
}

int UART_OS_Receive_ToIdle(UART_OS_HandlerStruct* UART, uint8_t* RcvBuffer, uint16_t* RcvLen, uint16_t MaxRcv, uint32_t timeout)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	807b      	strh	r3, [r7, #2]
	int Status = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	617b      	str	r3, [r7, #20]
	Status = osMutexAcquire(UART->RXMutex, timeout);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	6a39      	ldr	r1, [r7, #32]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fa fbcf 	bl	8007190 <osMutexAcquire>
 800c9f2:	6178      	str	r0, [r7, #20]
	if(Status == osErrorTimeout) return osErrorTimeout;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f113 0f02 	cmn.w	r3, #2
 800c9fa:	d102      	bne.n	800ca02 <UART_OS_Receive_ToIdle+0x2e>
 800c9fc:	f06f 0301 	mvn.w	r3, #1
 800ca00:	e057      	b.n	800cab2 <UART_OS_Receive_ToIdle+0xde>
	else if (Status < 0 ) return osError;
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	da02      	bge.n	800ca0e <UART_OS_Receive_ToIdle+0x3a>
 800ca08:	f04f 33ff 	mov.w	r3, #4294967295
 800ca0c:	e051      	b.n	800cab2 <UART_OS_Receive_ToIdle+0xde>

	osEventFlagsClear(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	2102      	movs	r1, #2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fa fa67 	bl	8006ee8 <osEventFlagsClear>
	Status = HAL_UARTEx_ReceiveToIdle_DMA(UART->huart, RcvBuffer, MaxRcv);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	887a      	ldrh	r2, [r7, #2]
 800ca20:	68b9      	ldr	r1, [r7, #8]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7f8 ffb1 	bl	800598a <HAL_UARTEx_ReceiveToIdle_DMA>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	617b      	str	r3, [r7, #20]
	__HAL_DMA_DISABLE_IT(UART->huart->hdmarx, DMA_IT_HT);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0204 	bic.w	r2, r2, #4
 800ca42:	601a      	str	r2, [r3, #0]

	if (Status !=HAL_OK)
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00c      	beq.n	800ca64 <UART_OS_Receive_ToIdle+0x90>
	{
		HAL_UART_AbortReceive(UART->huart);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7f8 fff8 	bl	8005a44 <HAL_UART_AbortReceive>
		osMutexRelease(UART->RXMutex);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fa fbf7 	bl	800724c <osMutexRelease>
		return osError;
 800ca5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca62:	e026      	b.n	800cab2 <UART_OS_Receive_ToIdle+0xde>
	}

	Status = osEventFlagsWait(UART->EventFlags, UART_OS_RcvToIdleCpl_Event, osFlagsWaitAll, timeout);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	68d8      	ldr	r0, [r3, #12]
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	2102      	movs	r1, #2
 800ca6e:	f7fa fa7f 	bl	8006f70 <osEventFlagsWait>
 800ca72:	4603      	mov	r3, r0
 800ca74:	617b      	str	r3, [r7, #20]

	if(Status >0)
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	dd07      	ble.n	800ca8c <UART_OS_Receive_ToIdle+0xb8>
	{
		*RcvLen = UART->RxLen;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	8a1b      	ldrh	r3, [r3, #16]
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	801a      	strh	r2, [r3, #0]
		UART->RxLen = 0;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	821a      	strh	r2, [r3, #16]
//		Status = osOK
	}
	HAL_UART_AbortReceive(UART->huart);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7f8 ffd7 	bl	8005a44 <HAL_UART_AbortReceive>
	osEventFlagsClear(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	2102      	movs	r1, #2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fa fa23 	bl	8006ee8 <osEventFlagsClear>
	osMutexRelease(UART->RXMutex);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fa fbd0 	bl	800724c <osMutexRelease>
//	SyncPrintf("Proc Time %ld \r\n", osKernelGetTickCount()-timeStart);

	return Status > 0? osOK: Status;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <UART_OS_RcvToIdle_CB>:
	osMutexRelease(UART->RXMutex);
	return Status > 0? osOK: Status;
}

void UART_OS_RcvToIdle_CB(UART_OS_HandlerStruct* UART, uint16_t RcvLen)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	460b      	mov	r3, r1
 800cac4:	807b      	strh	r3, [r7, #2]
	UART->RxLen = RcvLen;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	887a      	ldrh	r2, [r7, #2]
 800caca:	821a      	strh	r2, [r3, #16]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	2102      	movs	r1, #2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fa f9b0 	bl	8006e38 <osEventFlagsSet>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <UART_OS_RxCplt_CB>:

void UART_OS_RxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvCpl_Event);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	2101      	movs	r1, #1
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fa f9a2 	bl	8006e38 <osEventFlagsSet>
}
 800caf4:	bf00      	nop
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <UART_OS_TxCplt_CB>:

void UART_OS_TxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
//	uint32_t flag = osEventFlagsGet(UART->EventFlags);
	osEventFlagsSet(UART->EventFlags, UART_OS_TxCpl_Event);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	2104      	movs	r1, #4
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fa f994 	bl	8006e38 <osEventFlagsSet>
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <isotp_user_send_can>:
extern CAN_OS_HandlerStruct CANmain;
/* required, this must send a single CAN message with the given arbitration
 * ID (i.e. the CAN message ID) and data. The size will never be more than 8
 * bytes. */
int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t *data,
		const uint8_t size) {
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08e      	sub	sp, #56	; 0x38
 800cb1c:	af02      	add	r7, sp, #8
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	4613      	mov	r3, r2
 800cb24:	71fb      	strb	r3, [r7, #7]
	// ...
	CAN_TxHeaderTypeDef TxHeader = { 0 };
 800cb26:	f107 0314 	add.w	r3, r7, #20
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	605a      	str	r2, [r3, #4]
 800cb30:	609a      	str	r2, [r3, #8]
 800cb32:	60da      	str	r2, [r3, #12]
 800cb34:	611a      	str	r2, [r3, #16]
 800cb36:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = 8;
 800cb38:	2308      	movs	r3, #8
 800cb3a:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.RTR = CAN_RTR_DATA;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 800cb40:	2300      	movs	r3, #0
 800cb42:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = arbitration_id;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	617b      	str	r3, [r7, #20]
	uint32_t TxMailBox;
	uint8_t ret = CAN_OS_Transmit(&CANmain, &TxHeader, (uint8_t*) data,
 800cb48:	f107 0310 	add.w	r3, r7, #16
 800cb4c:	f107 0114 	add.w	r1, r7, #20
 800cb50:	2214      	movs	r2, #20
 800cb52:	9200      	str	r2, [sp, #0]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	4806      	ldr	r0, [pc, #24]	; (800cb70 <isotp_user_send_can+0x58>)
 800cb58:	f7ff fc5f 	bl	800c41a <CAN_OS_Transmit>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&TxMailBox, 20);
	return ret;
 800cb62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3730      	adds	r7, #48	; 0x30
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000314 	.word	0x20000314

0800cb74 <isotp_user_get_ms>:

/* required, return system tick, unit is millisecond */
uint32_t isotp_user_get_ms(void) {
 800cb74:	b580      	push	{r7, lr}
 800cb76:	af00      	add	r7, sp, #0
	return osKernelGetTickCount();
 800cb78:	f7f9 ff68 	bl	8006a4c <osKernelGetTickCount>
 800cb7c:	4603      	mov	r3, r0
	// ...
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <isotp_user_debug>:

/* optional, provide to receive debugging log messages */
void isotp_user_debug(const char *message, ...) {
 800cb82:	b40f      	push	{r0, r1, r2, r3}
 800cb84:	b480      	push	{r7}
 800cb86:	af00      	add	r7, sp, #0
	// ...
}
 800cb88:	bf00      	nop
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bc80      	pop	{r7}
 800cb8e:	b004      	add	sp, #16
 800cb90:	4770      	bx	lr

0800cb92 <isotp_ms_to_st_min>:

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 800cb92:	b480      	push	{r7}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	4603      	mov	r3, r0
 800cb9a:	71fb      	strb	r3, [r7, #7]
	uint8_t st_min;

	st_min = ms;
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	73fb      	strb	r3, [r7, #15]
	if (st_min > 0x7F) {
 800cba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	da01      	bge.n	800cbac <isotp_ms_to_st_min+0x1a>
		st_min = 0x7F;
 800cba8:	237f      	movs	r3, #127	; 0x7f
 800cbaa:	73fb      	strb	r3, [r7, #15]
	}

	return st_min;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bc80      	pop	{r7}
 800cbb6:	4770      	bx	lr

0800cbb8 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	71fb      	strb	r3, [r7, #7]
	uint8_t ms;

	if (st_min >= 0xF1 && st_min <= 0xF9) {
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	2bf0      	cmp	r3, #240	; 0xf0
 800cbc6:	d905      	bls.n	800cbd4 <isotp_st_min_to_ms+0x1c>
 800cbc8:	79fb      	ldrb	r3, [r7, #7]
 800cbca:	2bf9      	cmp	r3, #249	; 0xf9
 800cbcc:	d802      	bhi.n	800cbd4 <isotp_st_min_to_ms+0x1c>
		ms = 1;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	73fb      	strb	r3, [r7, #15]
 800cbd2:	e008      	b.n	800cbe6 <isotp_st_min_to_ms+0x2e>
	} else if (st_min <= 0x7F) {
 800cbd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	db02      	blt.n	800cbe2 <isotp_st_min_to_ms+0x2a>
		ms = st_min;
 800cbdc:	79fb      	ldrb	r3, [r7, #7]
 800cbde:	73fb      	strb	r3, [r7, #15]
 800cbe0:	e001      	b.n	800cbe6 <isotp_st_min_to_ms+0x2e>
	} else {
		ms = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]
	}

	return ms;
 800cbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr

0800cbf2 <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink *link, uint8_t flow_status,
		uint8_t block_size, uint8_t st_min_ms) {
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b086      	sub	sp, #24
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4603      	mov	r3, r0
 800cc02:	70fb      	strb	r3, [r7, #3]
 800cc04:	460b      	mov	r3, r1
 800cc06:	70bb      	strb	r3, [r7, #2]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	707b      	strb	r3, [r7, #1]

	IsoTpCanMessage message;
	int ret;

	/* setup message  */
	message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 800cc0c:	7b3b      	ldrb	r3, [r7, #12]
 800cc0e:	2203      	movs	r2, #3
 800cc10:	f362 1307 	bfi	r3, r2, #4, #4
 800cc14:	733b      	strb	r3, [r7, #12]
	message.as.flow_control.FS = flow_status;
 800cc16:	78fb      	ldrb	r3, [r7, #3]
 800cc18:	f003 030f 	and.w	r3, r3, #15
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	7b3b      	ldrb	r3, [r7, #12]
 800cc20:	f362 0303 	bfi	r3, r2, #0, #4
 800cc24:	733b      	strb	r3, [r7, #12]
	message.as.flow_control.BS = block_size;
 800cc26:	78bb      	ldrb	r3, [r7, #2]
 800cc28:	737b      	strb	r3, [r7, #13]
	message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 800cc2a:	787b      	ldrb	r3, [r7, #1]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7ff ffb0 	bl	800cb92 <isotp_ms_to_st_min>
 800cc32:	4603      	mov	r3, r0
 800cc34:	73bb      	strb	r3, [r7, #14]

	/* send message */
#ifdef ISO_TP_FRAME_PADDING
	(void) memset(message.as.flow_control.reserve, 0,
 800cc36:	f107 030c 	add.w	r3, r7, #12
 800cc3a:	3303      	adds	r3, #3
 800cc3c:	2205      	movs	r2, #5
 800cc3e:	2100      	movs	r1, #0
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 ff31 	bl	800daa8 <memset>
			sizeof(message.as.flow_control.reserve));
	ret = isotp_user_send_can(link->send_arbitration_id,
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f107 010c 	add.w	r1, r7, #12
 800cc4e:	2208      	movs	r2, #8
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff ff61 	bl	800cb18 <isotp_user_send_can>
 800cc56:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif
//	//SyncPrintf("Sended FC Frame\n");
	return ret;
 800cc58:	697b      	ldr	r3, [r7, #20]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink *link, uint32_t id) {
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]

	IsoTpCanMessage message;
	int ret;

	/* multi frame message length must greater than 7  */
	assert(link->send_size <= 7);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	895b      	ldrh	r3, [r3, #10]
 800cc72:	2b07      	cmp	r3, #7
 800cc74:	d905      	bls.n	800cc82 <isotp_send_single_frame+0x1e>
 800cc76:	4b1d      	ldr	r3, [pc, #116]	; (800ccec <isotp_send_single_frame+0x88>)
 800cc78:	4a1d      	ldr	r2, [pc, #116]	; (800ccf0 <isotp_send_single_frame+0x8c>)
 800cc7a:	2165      	movs	r1, #101	; 0x65
 800cc7c:	481d      	ldr	r0, [pc, #116]	; (800ccf4 <isotp_send_single_frame+0x90>)
 800cc7e:	f000 fd07 	bl	800d690 <__assert_func>

	/* setup message  */
	message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 800cc82:	7b3b      	ldrb	r3, [r7, #12]
 800cc84:	f36f 1307 	bfc	r3, #4, #4
 800cc88:	733b      	strb	r3, [r7, #12]
	message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	895b      	ldrh	r3, [r3, #10]
 800cc8e:	f003 030f 	and.w	r3, r3, #15
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	7b3b      	ldrb	r3, [r7, #12]
 800cc96:	f362 0303 	bfi	r3, r2, #0, #4
 800cc9a:	733b      	strb	r3, [r7, #12]
	(void) memcpy(message.as.single_frame.data, link->send_buffer,
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6859      	ldr	r1, [r3, #4]
			link->send_size);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	895b      	ldrh	r3, [r3, #10]
	(void) memcpy(message.as.single_frame.data, link->send_buffer,
 800cca4:	461a      	mov	r2, r3
 800cca6:	f107 030c 	add.w	r3, r7, #12
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4618      	mov	r0, r3
 800ccae:	f001 f841 	bl	800dd34 <memcpy>

	/* send message */
#ifdef ISO_TP_FRAME_PADDING
	(void) memset(message.as.single_frame.data + link->send_size, 0,
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	895b      	ldrh	r3, [r3, #10]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f107 030c 	add.w	r3, r7, #12
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	1898      	adds	r0, r3, r2
			sizeof(message.as.single_frame.data) - link->send_size);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	895b      	ldrh	r3, [r3, #10]
	(void) memset(message.as.single_frame.data + link->send_size, 0,
 800ccc4:	f1c3 0307 	rsb	r3, r3, #7
 800ccc8:	461a      	mov	r2, r3
 800ccca:	2100      	movs	r1, #0
 800cccc:	f000 feec 	bl	800daa8 <memset>
	ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	2208      	movs	r2, #8
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6838      	ldr	r0, [r7, #0]
 800ccda:	f7ff ff1d 	bl	800cb18 <isotp_user_send_can>
 800ccde:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

	return ret;
 800cce0:	697b      	ldr	r3, [r7, #20]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	0800ee38 	.word	0x0800ee38
 800ccf0:	0800f124 	.word	0x0800f124
 800ccf4:	0800ee50 	.word	0x0800ee50

0800ccf8 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink *link, uint32_t id) {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]

	IsoTpCanMessage message;
	int ret;

	/* multi frame message length must greater than 7  */
	assert(link->send_size > 7);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	895b      	ldrh	r3, [r3, #10]
 800cd06:	2b07      	cmp	r3, #7
 800cd08:	d805      	bhi.n	800cd16 <isotp_send_first_frame+0x1e>
 800cd0a:	4b1d      	ldr	r3, [pc, #116]	; (800cd80 <isotp_send_first_frame+0x88>)
 800cd0c:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <isotp_send_first_frame+0x8c>)
 800cd0e:	2181      	movs	r1, #129	; 0x81
 800cd10:	481d      	ldr	r0, [pc, #116]	; (800cd88 <isotp_send_first_frame+0x90>)
 800cd12:	f000 fcbd 	bl	800d690 <__assert_func>

	/* setup message  */
	message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 800cd16:	7b3b      	ldrb	r3, [r7, #12]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f362 1307 	bfi	r3, r2, #4, #4
 800cd1e:	733b      	strb	r3, [r7, #12]
	message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	895b      	ldrh	r3, [r3, #10]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	737b      	strb	r3, [r7, #13]
	message.as.first_frame.FF_DL_high =
			(uint8_t) (0x0F & (link->send_size >> 8));
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	895b      	ldrh	r3, [r3, #10]
 800cd2c:	0a1b      	lsrs	r3, r3, #8
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f003 030f 	and.w	r3, r3, #15
 800cd34:	b2da      	uxtb	r2, r3
	message.as.first_frame.FF_DL_high =
 800cd36:	7b3b      	ldrb	r3, [r7, #12]
 800cd38:	f362 0303 	bfi	r3, r2, #0, #4
 800cd3c:	733b      	strb	r3, [r7, #12]
	(void) memcpy(message.as.first_frame.data, link->send_buffer,
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	f107 030e 	add.w	r3, r7, #14
 800cd46:	6811      	ldr	r1, [r2, #0]
 800cd48:	6019      	str	r1, [r3, #0]
 800cd4a:	8892      	ldrh	r2, [r2, #4]
 800cd4c:	809a      	strh	r2, [r3, #4]
			sizeof(message.as.first_frame.data));

	/* send message */
	ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800cd4e:	f107 030c 	add.w	r3, r7, #12
 800cd52:	2208      	movs	r2, #8
 800cd54:	4619      	mov	r1, r3
 800cd56:	6838      	ldr	r0, [r7, #0]
 800cd58:	f7ff fede 	bl	800cb18 <isotp_user_send_can>
 800cd5c:	6178      	str	r0, [r7, #20]
	if (ISOTP_RET_OK == ret) {
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d108      	bne.n	800cd76 <isotp_send_first_frame+0x7e>
		link->send_offset += sizeof(message.as.first_frame.data);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	899b      	ldrh	r3, [r3, #12]
 800cd68:	3306      	adds	r3, #6
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	819a      	strh	r2, [r3, #12]
		link->send_sn = 1;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	739a      	strb	r2, [r3, #14]
	}

	return ret;
 800cd76:	697b      	ldr	r3, [r7, #20]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	0800ee80 	.word	0x0800ee80
 800cd84:	0800f13c 	.word	0x0800f13c
 800cd88:	0800ee50 	.word	0x0800ee50

0800cd8c <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink *link) {
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	IsoTpCanMessage message;
	uint16_t data_length;
	int ret;

	/* multi frame message length must greater than 7  */
	assert(link->send_size > 7);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	895b      	ldrh	r3, [r3, #10]
 800cd98:	2b07      	cmp	r3, #7
 800cd9a:	d805      	bhi.n	800cda8 <isotp_send_consecutive_frame+0x1c>
 800cd9c:	4b2d      	ldr	r3, [pc, #180]	; (800ce54 <isotp_send_consecutive_frame+0xc8>)
 800cd9e:	4a2e      	ldr	r2, [pc, #184]	; (800ce58 <isotp_send_consecutive_frame+0xcc>)
 800cda0:	219c      	movs	r1, #156	; 0x9c
 800cda2:	482e      	ldr	r0, [pc, #184]	; (800ce5c <isotp_send_consecutive_frame+0xd0>)
 800cda4:	f000 fc74 	bl	800d690 <__assert_func>

	/* setup message  */
	message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 800cda8:	7a3b      	ldrb	r3, [r7, #8]
 800cdaa:	2202      	movs	r2, #2
 800cdac:	f362 1307 	bfi	r3, r2, #4, #4
 800cdb0:	723b      	strb	r3, [r7, #8]
	message.as.consecutive_frame.SN = link->send_sn;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7b9b      	ldrb	r3, [r3, #14]
 800cdb6:	f003 030f 	and.w	r3, r3, #15
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	7a3b      	ldrb	r3, [r7, #8]
 800cdbe:	f362 0303 	bfi	r3, r2, #0, #4
 800cdc2:	723b      	strb	r3, [r7, #8]
	data_length = link->send_size - link->send_offset;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	895a      	ldrh	r2, [r3, #10]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	899b      	ldrh	r3, [r3, #12]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	82fb      	strh	r3, [r7, #22]
	if (data_length > sizeof(message.as.consecutive_frame.data)) {
 800cdd0:	8afb      	ldrh	r3, [r7, #22]
 800cdd2:	2b07      	cmp	r3, #7
 800cdd4:	d901      	bls.n	800cdda <isotp_send_consecutive_frame+0x4e>
		data_length = sizeof(message.as.consecutive_frame.data);
 800cdd6:	2307      	movs	r3, #7
 800cdd8:	82fb      	strh	r3, [r7, #22]
	}
	(void) memcpy(message.as.consecutive_frame.data,
			link->send_buffer + link->send_offset, data_length);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	8992      	ldrh	r2, [r2, #12]
 800cde2:	1899      	adds	r1, r3, r2
	(void) memcpy(message.as.consecutive_frame.data,
 800cde4:	8afa      	ldrh	r2, [r7, #22]
 800cde6:	f107 0308 	add.w	r3, r7, #8
 800cdea:	3301      	adds	r3, #1
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 ffa1 	bl	800dd34 <memcpy>

	/* send message */
#ifdef ISO_TP_FRAME_PADDING
	(void) memset(message.as.consecutive_frame.data + data_length, 0,
 800cdf2:	8afb      	ldrh	r3, [r7, #22]
 800cdf4:	f107 0208 	add.w	r2, r7, #8
 800cdf8:	3201      	adds	r2, #1
 800cdfa:	18d0      	adds	r0, r2, r3
 800cdfc:	8afb      	ldrh	r3, [r7, #22]
 800cdfe:	f1c3 0307 	rsb	r3, r3, #7
 800ce02:	461a      	mov	r2, r3
 800ce04:	2100      	movs	r1, #0
 800ce06:	f000 fe4f 	bl	800daa8 <memset>
			sizeof(message.as.consecutive_frame.data) - data_length);
	ret = isotp_user_send_can(link->send_arbitration_id,
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f107 0108 	add.w	r1, r7, #8
 800ce12:	2208      	movs	r2, #8
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff fe7f 	bl	800cb18 <isotp_user_send_can>
 800ce1a:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
	if (ISOTP_RET_OK == ret) {
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d113      	bne.n	800ce4a <isotp_send_consecutive_frame+0xbe>
		link->send_offset += data_length;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	899a      	ldrh	r2, [r3, #12]
 800ce26:	8afb      	ldrh	r3, [r7, #22]
 800ce28:	4413      	add	r3, r2
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	819a      	strh	r2, [r3, #12]
		if (++(link->send_sn) > 0x0F) {
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7b9b      	ldrb	r3, [r3, #14]
 800ce34:	3301      	adds	r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	739a      	strb	r2, [r3, #14]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	7b9b      	ldrb	r3, [r3, #14]
 800ce40:	2b0f      	cmp	r3, #15
 800ce42:	d902      	bls.n	800ce4a <isotp_send_consecutive_frame+0xbe>
			link->send_sn = 0;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	739a      	strb	r2, [r3, #14]
		}
	}

	return ret;
 800ce4a:	693b      	ldr	r3, [r7, #16]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	0800ee80 	.word	0x0800ee80
 800ce58:	0800f154 	.word	0x0800f154
 800ce5c:	0800ee50 	.word	0x0800ee50

0800ce60 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message,
		uint8_t len) {
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	71fb      	strb	r3, [r7, #7]
	/* check data length */
	if ((0 == message->as.single_frame.SF_DL)
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	f003 030f 	and.w	r3, r3, #15
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d008      	beq.n	800ce8e <isotp_receive_single_frame+0x2e>
			|| (message->as.single_frame.SF_DL > (len - 1))) {
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	461a      	mov	r2, r3
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d805      	bhi.n	800ce9a <isotp_receive_single_frame+0x3a>
		isotp_user_debug("Single-frame length too small.");
 800ce8e:	480f      	ldr	r0, [pc, #60]	; (800cecc <isotp_receive_single_frame+0x6c>)
 800ce90:	f7ff fe77 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800ce94:	f06f 0306 	mvn.w	r3, #6
 800ce98:	e014      	b.n	800cec4 <isotp_receive_single_frame+0x64>
	}

	/* copying data */
	(void) memcpy(link->receive_buffer, message->as.single_frame.data,
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	1c59      	adds	r1, r3, #1
			message->as.single_frame.SF_DL);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ceaa:	b2db      	uxtb	r3, r3
	(void) memcpy(link->receive_buffer, message->as.single_frame.data,
 800ceac:	461a      	mov	r2, r3
 800ceae:	f000 ff41 	bl	800dd34 <memcpy>
	link->receive_size = message->as.single_frame.SF_DL;
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	85da      	strh	r2, [r3, #46]	; 0x2e

	return ISOTP_RET_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	0800ee94 	.word	0x0800ee94

0800ced0 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message,
		uint8_t len) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	4613      	mov	r3, r2
 800cedc:	71fb      	strb	r3, [r7, #7]
	uint16_t payload_length;

	if (8 != len) {
 800cede:	79fb      	ldrb	r3, [r7, #7]
 800cee0:	2b08      	cmp	r3, #8
 800cee2:	d005      	beq.n	800cef0 <isotp_receive_first_frame+0x20>
		isotp_user_debug("First frame should be 8 bytes in length.");
 800cee4:	481f      	ldr	r0, [pc, #124]	; (800cf64 <isotp_receive_first_frame+0x94>)
 800cee6:	f7ff fe4c 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800ceea:	f06f 0306 	mvn.w	r3, #6
 800ceee:	e034      	b.n	800cf5a <isotp_receive_first_frame+0x8a>
	}

	/* check data length */
	payload_length = message->as.first_frame.FF_DL_high;
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	82fb      	strh	r3, [r7, #22]
	payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 800cefc:	8afb      	ldrh	r3, [r7, #22]
 800cefe:	021b      	lsls	r3, r3, #8
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	4413      	add	r3, r2
 800cf0a:	82fb      	strh	r3, [r7, #22]

	/* should not use multiple frame transmition */
	if (payload_length <= 7) {
 800cf0c:	8afb      	ldrh	r3, [r7, #22]
 800cf0e:	2b07      	cmp	r3, #7
 800cf10:	d805      	bhi.n	800cf1e <isotp_receive_first_frame+0x4e>
		isotp_user_debug("Should not use multiple frame transmission.");
 800cf12:	4815      	ldr	r0, [pc, #84]	; (800cf68 <isotp_receive_first_frame+0x98>)
 800cf14:	f7ff fe35 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800cf18:	f06f 0306 	mvn.w	r3, #6
 800cf1c:	e01d      	b.n	800cf5a <isotp_receive_first_frame+0x8a>
	}

	if (payload_length > link->receive_buf_size) {
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf22:	8afa      	ldrh	r2, [r7, #22]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d905      	bls.n	800cf34 <isotp_receive_first_frame+0x64>
		isotp_user_debug(
 800cf28:	4810      	ldr	r0, [pc, #64]	; (800cf6c <isotp_receive_first_frame+0x9c>)
 800cf2a:	f7ff fe2a 	bl	800cb82 <isotp_user_debug>
				"Multi-frame response too large for receiving buffer.");
		return ISOTP_RET_OVERFLOW;
 800cf2e:	f06f 0302 	mvn.w	r3, #2
 800cf32:	e012      	b.n	800cf5a <isotp_receive_first_frame+0x8a>
	}

	/* copying data */
	(void) memcpy(link->receive_buffer, message->as.first_frame.data,
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	3302      	adds	r3, #2
 800cf3c:	2206      	movs	r2, #6
 800cf3e:	4619      	mov	r1, r3
 800cf40:	f000 fef8 	bl	800dd34 <memcpy>
			sizeof(message->as.first_frame.data));
	link->receive_size = payload_length;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	8afa      	ldrh	r2, [r7, #22]
 800cf48:	85da      	strh	r2, [r3, #46]	; 0x2e
	link->receive_offset = sizeof(message->as.first_frame.data);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2206      	movs	r2, #6
 800cf4e:	861a      	strh	r2, [r3, #48]	; 0x30
	link->receive_sn = 1;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	return ISOTP_RET_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	0800eeb4 	.word	0x0800eeb4
 800cf68:	0800eee0 	.word	0x0800eee0
 800cf6c:	0800ef0c 	.word	0x0800ef0c

0800cf70 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link,
		IsoTpCanMessage *message, uint8_t len) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	71fb      	strb	r3, [r7, #7]
	uint16_t remaining_bytes;

	/* check sn */
	if (link->receive_sn != message->as.consecutive_frame.SN) {
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	7812      	ldrb	r2, [r2, #0]
 800cf88:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800cf8c:	b2d2      	uxtb	r2, r2
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d002      	beq.n	800cf98 <isotp_receive_consecutive_frame+0x28>
		return ISOTP_RET_WRONG_SN;
 800cf92:	f06f 0303 	mvn.w	r3, #3
 800cf96:	e038      	b.n	800d00a <isotp_receive_consecutive_frame+0x9a>
	}

	/* check data length */
	remaining_bytes = link->receive_size - link->receive_offset;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	82fb      	strh	r3, [r7, #22]
	if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 800cfa4:	8afb      	ldrh	r3, [r7, #22]
 800cfa6:	2b07      	cmp	r3, #7
 800cfa8:	d901      	bls.n	800cfae <isotp_receive_consecutive_frame+0x3e>
		remaining_bytes = sizeof(message->as.consecutive_frame.data);
 800cfaa:	2307      	movs	r3, #7
 800cfac:	82fb      	strh	r3, [r7, #22]
	}
	if (remaining_bytes > len - 1) {
 800cfae:	79fa      	ldrb	r2, [r7, #7]
 800cfb0:	8afb      	ldrh	r3, [r7, #22]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	dc05      	bgt.n	800cfc2 <isotp_receive_consecutive_frame+0x52>
		isotp_user_debug("Consecutive frame too short.");
 800cfb6:	4817      	ldr	r0, [pc, #92]	; (800d014 <isotp_receive_consecutive_frame+0xa4>)
 800cfb8:	f7ff fde3 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800cfbc:	f06f 0306 	mvn.w	r3, #6
 800cfc0:	e023      	b.n	800d00a <isotp_receive_consecutive_frame+0x9a>
	}

	/* copying data */
	(void) memcpy(link->receive_buffer + link->receive_offset,
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800cfca:	1898      	adds	r0, r3, r2
			message->as.consecutive_frame.data, remaining_bytes);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	3301      	adds	r3, #1
	(void) memcpy(link->receive_buffer + link->receive_offset,
 800cfd0:	8afa      	ldrh	r2, [r7, #22]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	f000 feae 	bl	800dd34 <memcpy>

	link->receive_offset += remaining_bytes;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800cfdc:	8afb      	ldrh	r3, [r7, #22]
 800cfde:	4413      	add	r3, r2
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	861a      	strh	r2, [r3, #48]	; 0x30
	if (++(link->receive_sn) > 0x0F) {
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cfec:	3301      	adds	r3, #1
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cffc:	2b0f      	cmp	r3, #15
 800cffe:	d903      	bls.n	800d008 <isotp_receive_consecutive_frame+0x98>
		link->receive_sn = 0;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}

	return ISOTP_RET_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	0800ef44 	.word	0x0800ef44

0800d018 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link,
		IsoTpCanMessage *message, uint8_t len) {
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	4613      	mov	r3, r2
 800d024:	71fb      	strb	r3, [r7, #7]
	/* check message length */
	if (len < 3) {
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d805      	bhi.n	800d038 <isotp_receive_flow_control_frame+0x20>
		isotp_user_debug("Flow control frame too short.");
 800d02c:	4805      	ldr	r0, [pc, #20]	; (800d044 <isotp_receive_flow_control_frame+0x2c>)
 800d02e:	f7ff fda8 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_LENGTH;
 800d032:	f06f 0306 	mvn.w	r3, #6
 800d036:	e000      	b.n	800d03a <isotp_receive_flow_control_frame+0x22>
	}

	return ISOTP_RET_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	0800ef64 	.word	0x0800ef64

0800d048 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	4613      	mov	r3, r2
 800d054:	80fb      	strh	r3, [r7, #6]
	return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6819      	ldr	r1, [r3, #0]
 800d05a:	88fb      	ldrh	r3, [r7, #6]
 800d05c:	68ba      	ldr	r2, [r7, #8]
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f000 f806 	bl	800d070 <isotp_send_with_id>
 800d064:	4603      	mov	r3, r0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
	...

0800d070 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[],
		uint16_t size) {
 800d070:	b580      	push	{r7, lr}
 800d072:	b0a6      	sub	sp, #152	; 0x98
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	807b      	strh	r3, [r7, #2]
	int ret;

	if (link == 0x0) {
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d105      	bne.n	800d090 <isotp_send_with_id+0x20>
		isotp_user_debug("Link is null!");
 800d084:	4833      	ldr	r0, [pc, #204]	; (800d154 <isotp_send_with_id+0xe4>)
 800d086:	f7ff fd7c 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_ERROR;
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
 800d08e:	e05d      	b.n	800d14c <isotp_send_with_id+0xdc>
	}

	if (size > link->send_buf_size) {
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	891b      	ldrh	r3, [r3, #8]
 800d094:	887a      	ldrh	r2, [r7, #2]
 800d096:	429a      	cmp	r2, r3
 800d098:	d90d      	bls.n	800d0b6 <isotp_send_with_id+0x46>
		isotp_user_debug(
 800d09a:	482f      	ldr	r0, [pc, #188]	; (800d158 <isotp_send_with_id+0xe8>)
 800d09c:	f7ff fd71 	bl	800cb82 <isotp_user_debug>
				"Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
		char message[128];
		sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n",
 800d0a0:	887a      	ldrh	r2, [r7, #2]
				size, link->send_buf_size);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	891b      	ldrh	r3, [r3, #8]
		sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n",
 800d0a6:	f107 0014 	add.w	r0, r7, #20
 800d0aa:	492c      	ldr	r1, [pc, #176]	; (800d15c <isotp_send_with_id+0xec>)
 800d0ac:	f000 fc5c 	bl	800d968 <siprintf>
		return ISOTP_RET_OVERFLOW;
 800d0b0:	f06f 0302 	mvn.w	r3, #2
 800d0b4:	e04a      	b.n	800d14c <isotp_send_with_id+0xdc>
	}

	if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d105      	bne.n	800d0cc <isotp_send_with_id+0x5c>
		isotp_user_debug("Abort previous message, transmission in progress.\n");
 800d0c0:	4827      	ldr	r0, [pc, #156]	; (800d160 <isotp_send_with_id+0xf0>)
 800d0c2:	f7ff fd5e 	bl	800cb82 <isotp_user_debug>
		return ISOTP_RET_INPROGRESS;
 800d0c6:	f06f 0301 	mvn.w	r3, #1
 800d0ca:	e03f      	b.n	800d14c <isotp_send_with_id+0xdc>
	}

	/* copy into local buffer */
	link->send_size = size;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	887a      	ldrh	r2, [r7, #2]
 800d0d0:	815a      	strh	r2, [r3, #10]
	link->send_offset = 0;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	819a      	strh	r2, [r3, #12]
	(void) memcpy(link->send_buffer, payload, size);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	887a      	ldrh	r2, [r7, #2]
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fe27 	bl	800dd34 <memcpy>

	if (link->send_size < 8) {
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	895b      	ldrh	r3, [r3, #10]
 800d0ea:	2b07      	cmp	r3, #7
 800d0ec:	d806      	bhi.n	800d0fc <isotp_send_with_id+0x8c>
		/* send single frame */
		ret = isotp_send_single_frame(link, id);
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f7ff fdb7 	bl	800cc64 <isotp_send_single_frame>
 800d0f6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800d0fa:	e025      	b.n	800d148 <isotp_send_with_id+0xd8>
	} else {
		/* send multi-frame */
		ret = isotp_send_first_frame(link, id);
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff fdfa 	bl	800ccf8 <isotp_send_first_frame>
 800d104:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		//SyncPrintf("Send first frame\n");
		/* init multi-frame control flags */
		if (ISOTP_RET_OK == ret) {
 800d108:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d11b      	bne.n	800d148 <isotp_send_with_id+0xd8>
			link->send_bs_remain = 0;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	821a      	strh	r2, [r3, #16]
			link->send_st_min = 0;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	749a      	strb	r2, [r3, #18]
			link->send_wtf_count = 0;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	74da      	strb	r2, [r3, #19]
			link->send_timer_st = isotp_user_get_ms();
 800d122:	f7ff fd27 	bl	800cb74 <isotp_user_get_ms>
 800d126:	4602      	mov	r2, r0
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	615a      	str	r2, [r3, #20]
			link->send_timer_bs =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800d12c:	f7ff fd22 	bl	800cb74 <isotp_user_get_ms>
 800d130:	4603      	mov	r3, r0
 800d132:	f503 7296 	add.w	r2, r3, #300	; 0x12c
			link->send_timer_bs =
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	619a      	str	r2, [r3, #24]
			link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	61da      	str	r2, [r3, #28]
			link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}

	return ret;
 800d148:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3798      	adds	r7, #152	; 0x98
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	0800ef84 	.word	0x0800ef84
 800d158:	0800ef94 	.word	0x0800ef94
 800d15c:	0800efe8 	.word	0x0800efe8
 800d160:	0800f018 	.word	0x0800f018

0800d164 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	71fb      	strb	r3, [r7, #7]
	IsoTpCanMessage message;
	int ret;

	if (len < 2 || len > 8) {
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	2b01      	cmp	r3, #1
 800d176:	f240 8145 	bls.w	800d404 <isotp_on_can_message+0x2a0>
 800d17a:	79fb      	ldrb	r3, [r7, #7]
 800d17c:	2b08      	cmp	r3, #8
 800d17e:	f200 8141 	bhi.w	800d404 <isotp_on_can_message+0x2a0>
		return;
	}

	memcpy(message.as.data_array.ptr, data, len);
 800d182:	79fa      	ldrb	r2, [r7, #7]
 800d184:	f107 0314 	add.w	r3, r7, #20
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 fdd2 	bl	800dd34 <memcpy>
	memset(message.as.data_array.ptr + len, 0,
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	f107 0214 	add.w	r2, r7, #20
 800d196:	18d0      	adds	r0, r2, r3
 800d198:	79fb      	ldrb	r3, [r7, #7]
 800d19a:	f1c3 0308 	rsb	r3, r3, #8
 800d19e:	461a      	mov	r2, r3
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	f000 fc81 	bl	800daa8 <memset>
			sizeof(message.as.data_array.ptr) - len);

	switch (message.as.common.type) {
 800d1a6:	7d3b      	ldrb	r3, [r7, #20]
 800d1a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	f200 811c 	bhi.w	800d3ec <isotp_on_can_message+0x288>
 800d1b4:	a201      	add	r2, pc, #4	; (adr r2, 800d1bc <isotp_on_can_message+0x58>)
 800d1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ba:	bf00      	nop
 800d1bc:	0800d1cd 	.word	0x0800d1cd
 800d1c0:	0800d209 	.word	0x0800d209
 800d1c4:	0800d285 	.word	0x0800d285
 800d1c8:	0800d333 	.word	0x0800d333
	case ISOTP_PCI_TYPE_SINGLE: {
		/* update protocol result */
		if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d104      	bne.n	800d1e0 <isotp_on_can_message+0x7c>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f06f 0205 	mvn.w	r2, #5
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
 800d1de:	e002      	b.n	800d1e6 <isotp_on_can_message+0x82>
		} else {
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38
		}

		/* handle message */
		ret = isotp_receive_single_frame(link, &message, len);
 800d1e6:	79fa      	ldrb	r2, [r7, #7]
 800d1e8:	f107 0314 	add.w	r3, r7, #20
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f7ff fe36 	bl	800ce60 <isotp_receive_single_frame>
 800d1f4:	61f8      	str	r0, [r7, #28]

		if (ISOTP_RET_OK == ret) {
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f040 80f9 	bne.w	800d3f0 <isotp_on_can_message+0x28c>
			/* change status */
			link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2202      	movs	r2, #2
 800d202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
		break;
 800d206:	e0f3      	b.n	800d3f0 <isotp_on_can_message+0x28c>
	}
	case ISOTP_PCI_TYPE_FIRST_FRAME: {
		/* update protocol result */
		if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d104      	bne.n	800d21c <isotp_on_can_message+0xb8>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f06f 0205 	mvn.w	r2, #5
 800d218:	639a      	str	r2, [r3, #56]	; 0x38
 800d21a:	e002      	b.n	800d222 <isotp_on_can_message+0xbe>
		} else {
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	639a      	str	r2, [r3, #56]	; 0x38
		}

		/* handle message */
		ret = isotp_receive_first_frame(link, &message, len);
 800d222:	79fa      	ldrb	r2, [r7, #7]
 800d224:	f107 0314 	add.w	r3, r7, #20
 800d228:	4619      	mov	r1, r3
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f7ff fe50 	bl	800ced0 <isotp_receive_first_frame>
 800d230:	61f8      	str	r0, [r7, #28]
		//SyncPrintf("First Frame\n");

		/* if overflow happened */
		if (ISOTP_RET_OVERFLOW == ret) {
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	f113 0f03 	cmn.w	r3, #3
 800d238:	d108      	bne.n	800d24c <isotp_on_can_message+0xe8>
			/* update protocol result */
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f06f 0207 	mvn.w	r2, #7
 800d240:	639a      	str	r2, [r3, #56]	; 0x38
			/* change status */
			link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* send error message */
//			isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
			break;
 800d24a:	e0da      	b.n	800d402 <isotp_on_can_message+0x29e>
		}

		/* if receive successful */
		if (ISOTP_RET_OK == ret) {
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f040 80d0 	bne.w	800d3f4 <isotp_on_can_message+0x290>
			/* change status */
			link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			/* send fc frame */
			link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2208      	movs	r2, #8
 800d260:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE,
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800d26a:	2300      	movs	r3, #0
 800d26c:	2100      	movs	r1, #0
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7ff fcbf 	bl	800cbf2 <isotp_send_flow_control>
					link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
			/* refresh timer cs */
			link->receive_timer_cr =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800d274:	f7ff fc7e 	bl	800cb74 <isotp_user_get_ms>
 800d278:	4603      	mov	r3, r0
 800d27a:	f503 7296 	add.w	r2, r3, #300	; 0x12c
			link->receive_timer_cr =
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	635a      	str	r2, [r3, #52]	; 0x34
		}

		break;
 800d282:	e0b7      	b.n	800d3f4 <isotp_on_can_message+0x290>
	}
	case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
		/* check if in receiving status */
		if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d004      	beq.n	800d298 <isotp_on_can_message+0x134>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f06f 0205 	mvn.w	r2, #5
 800d294:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800d296:	e0b4      	b.n	800d402 <isotp_on_can_message+0x29e>
		}

		/* handle message */
		ret = isotp_receive_consecutive_frame(link, &message, len);
 800d298:	79fa      	ldrb	r2, [r7, #7]
 800d29a:	f107 0314 	add.w	r3, r7, #20
 800d29e:	4619      	mov	r1, r3
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff fe65 	bl	800cf70 <isotp_receive_consecutive_frame>
 800d2a6:	61f8      	str	r0, [r7, #28]
		//SyncPrintf("Consecutive Frame\n");

		/* if wrong sn */
		if (ISOTP_RET_WRONG_SN == ret) {
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	f113 0f04 	cmn.w	r3, #4
 800d2ae:	d110      	bne.n	800d2d2 <isotp_on_can_message+0x16e>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f06f 0203 	mvn.w	r2, #3
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
			link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW,
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2102      	movs	r1, #2
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff fc91 	bl	800cbf2 <isotp_send_flow_control>
					link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
			break;
 800d2d0:	e097      	b.n	800d402 <isotp_on_can_message+0x29e>
		}

		/* if success */
		if (ISOTP_RET_OK == ret) {
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f040 808f 	bne.w	800d3f8 <isotp_on_can_message+0x294>
			/* refresh timer cs */
			link->receive_timer_cr =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800d2da:	f7ff fc4b 	bl	800cb74 <isotp_user_get_ms>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f503 7296 	add.w	r2, r3, #300	; 0x12c
			link->receive_timer_cr =
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	635a      	str	r2, [r3, #52]	; 0x34

			/* receive finished */
			if (link->receive_offset >= link->receive_size) {
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d304      	bcc.n	800d2fe <isotp_on_can_message+0x19a>
				link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
							link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
				}
			}
		}

		break;
 800d2fc:	e07c      	b.n	800d3f8 <isotp_on_can_message+0x294>
				if (0 == --link->receive_bs_count) {
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d304:	3b01      	subs	r3, #1
 800d306:	b2da      	uxtb	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d314:	2b00      	cmp	r3, #0
 800d316:	d16f      	bne.n	800d3f8 <isotp_on_can_message+0x294>
					link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2208      	movs	r2, #8
 800d31c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
					isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE,
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800d326:	2300      	movs	r3, #0
 800d328:	2100      	movs	r1, #0
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f7ff fc61 	bl	800cbf2 <isotp_send_flow_control>
		break;
 800d330:	e062      	b.n	800d3f8 <isotp_on_can_message+0x294>
	}
	case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
		/* handle fc frame only when sending in progress  */
		if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d15f      	bne.n	800d3fc <isotp_on_can_message+0x298>
			break;
		}

		/* handle message */
		ret = isotp_receive_flow_control_frame(link, &message, len);
 800d33c:	79fa      	ldrb	r2, [r7, #7]
 800d33e:	f107 0314 	add.w	r3, r7, #20
 800d342:	4619      	mov	r1, r3
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff fe67 	bl	800d018 <isotp_receive_flow_control_frame>
 800d34a:	61f8      	str	r0, [r7, #28]
		//SyncPrintf("rcv flow control\n");

		if (ISOTP_RET_OK == ret) {
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d156      	bne.n	800d400 <isotp_on_can_message+0x29c>
			/* refresh bs timer */
			link->send_timer_bs =
					isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800d352:	f7ff fc0f 	bl	800cb74 <isotp_user_get_ms>
 800d356:	4603      	mov	r3, r0
 800d358:	f503 7296 	add.w	r2, r3, #300	; 0x12c
			link->send_timer_bs =
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	619a      	str	r2, [r3, #24]

			/* overflow */
			if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 800d360:	7d3b      	ldrb	r3, [r7, #20]
 800d362:	f003 030f 	and.w	r3, r3, #15
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d108      	bne.n	800d37e <isotp_on_can_message+0x21a>
				link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f06f 0207 	mvn.w	r2, #7
 800d372:	61da      	str	r2, [r3, #28]
				link->send_status = ISOTP_SEND_STATUS_ERROR;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2202      	movs	r2, #2
 800d378:	f883 2020 	strb.w	r2, [r3, #32]
						message.as.flow_control.STmin);
				link->send_wtf_count = 0;
//				isotp_poll(link);
			}
		}
		break;
 800d37c:	e040      	b.n	800d400 <isotp_on_can_message+0x29c>
			else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 800d37e:	7d3b      	ldrb	r3, [r7, #20]
 800d380:	f003 030f 	and.w	r3, r3, #15
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b01      	cmp	r3, #1
 800d388:	d112      	bne.n	800d3b0 <isotp_on_can_message+0x24c>
				link->send_wtf_count += 1;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7cdb      	ldrb	r3, [r3, #19]
 800d38e:	3301      	adds	r3, #1
 800d390:	b2da      	uxtb	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	74da      	strb	r2, [r3, #19]
				if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	7cdb      	ldrb	r3, [r3, #19]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d930      	bls.n	800d400 <isotp_on_can_message+0x29c>
					link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f06f 0206 	mvn.w	r2, #6
 800d3a4:	61da      	str	r2, [r3, #28]
					link->send_status = ISOTP_SEND_STATUS_ERROR;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 800d3ae:	e027      	b.n	800d400 <isotp_on_can_message+0x29c>
			else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 800d3b0:	7d3b      	ldrb	r3, [r7, #20]
 800d3b2:	f003 030f 	and.w	r3, r3, #15
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d121      	bne.n	800d400 <isotp_on_can_message+0x29c>
				if (0 == message.as.flow_control.BS) {
 800d3bc:	7d7b      	ldrb	r3, [r7, #21]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d104      	bne.n	800d3cc <isotp_on_can_message+0x268>
					link->send_bs_remain = ISOTP_INVALID_BS;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3c8:	821a      	strh	r2, [r3, #16]
 800d3ca:	e003      	b.n	800d3d4 <isotp_on_can_message+0x270>
					link->send_bs_remain = message.as.flow_control.BS;
 800d3cc:	7d7b      	ldrb	r3, [r7, #21]
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	821a      	strh	r2, [r3, #16]
				link->send_st_min = isotp_st_min_to_ms(
 800d3d4:	7dbb      	ldrb	r3, [r7, #22]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff fbee 	bl	800cbb8 <isotp_st_min_to_ms>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	461a      	mov	r2, r3
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	749a      	strb	r2, [r3, #18]
				link->send_wtf_count = 0;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	74da      	strb	r2, [r3, #19]
		break;
 800d3ea:	e009      	b.n	800d400 <isotp_on_can_message+0x29c>
	default:
		break;
 800d3ec:	bf00      	nop
 800d3ee:	e00a      	b.n	800d406 <isotp_on_can_message+0x2a2>
		break;
 800d3f0:	bf00      	nop
 800d3f2:	e008      	b.n	800d406 <isotp_on_can_message+0x2a2>
		break;
 800d3f4:	bf00      	nop
 800d3f6:	e006      	b.n	800d406 <isotp_on_can_message+0x2a2>
		break;
 800d3f8:	bf00      	nop
 800d3fa:	e004      	b.n	800d406 <isotp_on_can_message+0x2a2>
			break;
 800d3fc:	bf00      	nop
 800d3fe:	e002      	b.n	800d406 <isotp_on_can_message+0x2a2>
		break;
 800d400:	bf00      	nop
	};

	return;
 800d402:	e000      	b.n	800d406 <isotp_on_can_message+0x2a2>
		return;
 800d404:	bf00      	nop
}
 800d406:	3720      	adds	r7, #32
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <isotp_init_link>:

	return ISOTP_RET_OK;
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf,
		uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	807b      	strh	r3, [r7, #2]
	memset(link, 0, sizeof(*link));
 800d41a:	2240      	movs	r2, #64	; 0x40
 800d41c:	2100      	movs	r1, #0
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fb42 	bl	800daa8 <memset>
	link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	link->send_status = ISOTP_SEND_STATUS_IDLE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	f883 2020 	strb.w	r2, [r3, #32]
	link->send_arbitration_id = sendid;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	601a      	str	r2, [r3, #0]
	link->send_buffer = sendbuf;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	605a      	str	r2, [r3, #4]
	link->send_buf_size = sendbufsize;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	887a      	ldrh	r2, [r7, #2]
 800d444:	811a      	strh	r2, [r3, #8]
	link->receive_buffer = recvbuf;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	69ba      	ldr	r2, [r7, #24]
 800d44a:	629a      	str	r2, [r3, #40]	; 0x28
	link->receive_buf_size = recvbufsize;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	8bba      	ldrh	r2, [r7, #28]
 800d450:	859a      	strh	r2, [r3, #44]	; 0x2c

	return;
 800d452:	bf00      	nop
}
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 800d45a:	b590      	push	{r4, r7, lr}
 800d45c:	b085      	sub	sp, #20
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
	int ret;

	/* only polling when operation in progress */
	if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d15c      	bne.n	800d526 <isotp_poll+0xcc>

		/* continue send data */
		if (/* send data if bs_remain is invalid or bs_remain large than zero */
		(ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	8a1b      	ldrh	r3, [r3, #16]
		if (/* send data if bs_remain is invalid or bs_remain large than zero */
 800d470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d474:	4293      	cmp	r3, r2
 800d476:	d003      	beq.n	800d480 <isotp_poll+0x26>
		(ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	8a1b      	ldrh	r3, [r3, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d041      	beq.n	800d504 <isotp_poll+0xaa>
				&&
				/* and if st_min is zero or go beyond interval time */
				(0 == link->send_st_min
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	7c9b      	ldrb	r3, [r3, #18]
				&&
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00c      	beq.n	800d4a2 <isotp_poll+0x48>
						|| (0 != link->send_st_min
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7c9b      	ldrb	r3, [r3, #18]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d039      	beq.n	800d504 <isotp_poll+0xaa>
								&& IsoTpTimeAfter(isotp_user_get_ms(),
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	695b      	ldr	r3, [r3, #20]
 800d494:	461c      	mov	r4, r3
 800d496:	f7ff fb6d 	bl	800cb74 <isotp_user_get_ms>
 800d49a:	4603      	mov	r3, r0
 800d49c:	1ae3      	subs	r3, r4, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	da30      	bge.n	800d504 <isotp_poll+0xaa>
										link->send_timer_st)))) {

			ret = isotp_send_consecutive_frame(link);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fc72 	bl	800cd8c <isotp_send_consecutive_frame>
 800d4a8:	60f8      	str	r0, [r7, #12]
//			//SyncPrintf("Send consecutive frame\n");
			if (ISOTP_RET_OK == ret) {
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d125      	bne.n	800d4fc <isotp_poll+0xa2>
				if (ISOTP_INVALID_BS != link->send_bs_remain) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	8a1b      	ldrh	r3, [r3, #16]
 800d4b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d005      	beq.n	800d4c8 <isotp_poll+0x6e>
					link->send_bs_remain -= 1;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	8a1b      	ldrh	r3, [r3, #16]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	821a      	strh	r2, [r3, #16]
				}
				link->send_timer_bs =
						isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800d4c8:	f7ff fb54 	bl	800cb74 <isotp_user_get_ms>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	f503 7296 	add.w	r2, r3, #300	; 0x12c
				link->send_timer_bs =
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	619a      	str	r2, [r3, #24]
				link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 800d4d6:	f7ff fb4d 	bl	800cb74 <isotp_user_get_ms>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7c9b      	ldrb	r3, [r3, #18]
 800d4e0:	441a      	add	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	615a      	str	r2, [r3, #20]

				/* check if send finish */
				if (link->send_offset >= link->send_size) {
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	899a      	ldrh	r2, [r3, #12]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	895b      	ldrh	r3, [r3, #10]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d308      	bcc.n	800d504 <isotp_poll+0xaa>
					link->send_status = ISOTP_SEND_STATUS_IDLE;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 2020 	strb.w	r2, [r3, #32]
 800d4fa:	e003      	b.n	800d504 <isotp_poll+0xaa>
				}
			} else {
				link->send_status = ISOTP_SEND_STATUS_ERROR;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2202      	movs	r2, #2
 800d500:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}

		/* check timeout */
		if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	461c      	mov	r4, r3
 800d50a:	f7ff fb33 	bl	800cb74 <isotp_user_get_ms>
 800d50e:	4603      	mov	r3, r0
 800d510:	1ae3      	subs	r3, r4, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	da07      	bge.n	800d526 <isotp_poll+0xcc>
			link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f06f 0201 	mvn.w	r2, #1
 800d51c:	61da      	str	r2, [r3, #28]
			link->send_status = ISOTP_SEND_STATUS_ERROR;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2202      	movs	r2, #2
 800d522:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}

	/* only polling when operation in progress */
	if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d111      	bne.n	800d554 <isotp_poll+0xfa>

		/* check timeout */
		if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d534:	461c      	mov	r4, r3
 800d536:	f7ff fb1d 	bl	800cb74 <isotp_user_get_ms>
 800d53a:	4603      	mov	r3, r0
 800d53c:	1ae3      	subs	r3, r4, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da08      	bge.n	800d554 <isotp_poll+0xfa>
			link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f06f 0202 	mvn.w	r2, #2
 800d548:	639a      	str	r2, [r3, #56]	; 0x38
			link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
	}

	return;
 800d552:	bf00      	nop
 800d554:	bf00      	nop
}
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd90      	pop	{r4, r7, pc}

0800d55c <DataPack_Split>:
#include "string.h"
#include "stdlib.h"
#include "DataProcess.h"

int DataPack_Split(char* str, uint8_t* ID, char *pValue)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]

	if (str[0] != '#') return 1;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b23      	cmp	r3, #35	; 0x23
 800d56e:	d001      	beq.n	800d574 <DataPack_Split+0x18>
 800d570:	2301      	movs	r3, #1
 800d572:	e026      	b.n	800d5c2 <DataPack_Split+0x66>
	*ID = atoi(str+1);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	3301      	adds	r3, #1
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 f8a7 	bl	800d6cc <atoi>
 800d57e:	4603      	mov	r3, r0
 800d580:	b2da      	uxtb	r2, r3
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	701a      	strb	r2, [r3, #0]
	char* tok = strtok(str, "=");
 800d586:	4911      	ldr	r1, [pc, #68]	; (800d5cc <DataPack_Split+0x70>)
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f000 faa7 	bl	800dadc <strtok>
 800d58e:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d101      	bne.n	800d59a <DataPack_Split+0x3e>
 800d596:	2301      	movs	r3, #1
 800d598:	e013      	b.n	800d5c2 <DataPack_Split+0x66>
	tok = strtok(NULL,"=");
 800d59a:	490c      	ldr	r1, [pc, #48]	; (800d5cc <DataPack_Split+0x70>)
 800d59c:	2000      	movs	r0, #0
 800d59e:	f000 fa9d 	bl	800dadc <strtok>
 800d5a2:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <DataPack_Split+0x52>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e009      	b.n	800d5c2 <DataPack_Split+0x66>
	strcpy(pValue, tok);
 800d5ae:	6979      	ldr	r1, [r7, #20]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fbb7 	bl	800dd24 <strcpy>
	tok = strtok(pValue,"\r");
 800d5b6:	4906      	ldr	r1, [pc, #24]	; (800d5d0 <DataPack_Split+0x74>)
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fa8f 	bl	800dadc <strtok>
 800d5be:	6178      	str	r0, [r7, #20]
	return 0;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	0800f04c 	.word	0x0800f04c
 800d5d0:	0800f050 	.word	0x0800f050

0800d5d4 <DataPack_GetLEDState>:

int DataPack_GetLEDState(char* str, int* LEDLeft, int* LEDRight, int* LEDFront, int* LEDStop)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	603b      	str	r3, [r7, #0]
	char* tok = strtok(str, ";");
 800d5e2:	4922      	ldr	r1, [pc, #136]	; (800d66c <DataPack_GetLEDState+0x98>)
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f000 fa79 	bl	800dadc <strtok>
 800d5ea:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <DataPack_GetLEDState+0x22>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e036      	b.n	800d664 <DataPack_GetLEDState+0x90>
	*LEDLeft = atoi(tok);
 800d5f6:	6978      	ldr	r0, [r7, #20]
 800d5f8:	f000 f868 	bl	800d6cc <atoi>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	601a      	str	r2, [r3, #0]

	tok = strtok(NULL, ";");
 800d602:	491a      	ldr	r1, [pc, #104]	; (800d66c <DataPack_GetLEDState+0x98>)
 800d604:	2000      	movs	r0, #0
 800d606:	f000 fa69 	bl	800dadc <strtok>
 800d60a:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <DataPack_GetLEDState+0x42>
 800d612:	2301      	movs	r3, #1
 800d614:	e026      	b.n	800d664 <DataPack_GetLEDState+0x90>
	*LEDRight = atoi(tok);
 800d616:	6978      	ldr	r0, [r7, #20]
 800d618:	f000 f858 	bl	800d6cc <atoi>
 800d61c:	4602      	mov	r2, r0
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	601a      	str	r2, [r3, #0]

	tok = strtok(NULL, ";");
 800d622:	4912      	ldr	r1, [pc, #72]	; (800d66c <DataPack_GetLEDState+0x98>)
 800d624:	2000      	movs	r0, #0
 800d626:	f000 fa59 	bl	800dadc <strtok>
 800d62a:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d101      	bne.n	800d636 <DataPack_GetLEDState+0x62>
 800d632:	2301      	movs	r3, #1
 800d634:	e016      	b.n	800d664 <DataPack_GetLEDState+0x90>
	*LEDFront = atoi(tok);
 800d636:	6978      	ldr	r0, [r7, #20]
 800d638:	f000 f848 	bl	800d6cc <atoi>
 800d63c:	4602      	mov	r2, r0
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	601a      	str	r2, [r3, #0]

	tok = strtok(NULL, ";");
 800d642:	490a      	ldr	r1, [pc, #40]	; (800d66c <DataPack_GetLEDState+0x98>)
 800d644:	2000      	movs	r0, #0
 800d646:	f000 fa49 	bl	800dadc <strtok>
 800d64a:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <DataPack_GetLEDState+0x82>
 800d652:	2301      	movs	r3, #1
 800d654:	e006      	b.n	800d664 <DataPack_GetLEDState+0x90>
	*LEDStop = atoi(tok);
 800d656:	6978      	ldr	r0, [r7, #20]
 800d658:	f000 f838 	bl	800d6cc <atoi>
 800d65c:	4602      	mov	r2, r0
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	601a      	str	r2, [r3, #0]
	return 0;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	0800f054 	.word	0x0800f054

0800d670 <DataPack_GetSpeakerState>:
int DataPack_GetSpeakerState(char* str, int* SpeakerState)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
	*SpeakerState = atoi(str);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f826 	bl	800d6cc <atoi>
 800d680:	4602      	mov	r2, r0
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	601a      	str	r2, [r3, #0]
	return 0;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <__assert_func>:
 800d690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d692:	4614      	mov	r4, r2
 800d694:	461a      	mov	r2, r3
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <__assert_func+0x2c>)
 800d698:	4605      	mov	r5, r0
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68d8      	ldr	r0, [r3, #12]
 800d69e:	b14c      	cbz	r4, 800d6b4 <__assert_func+0x24>
 800d6a0:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <__assert_func+0x30>)
 800d6a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6a6:	9100      	str	r1, [sp, #0]
 800d6a8:	462b      	mov	r3, r5
 800d6aa:	4906      	ldr	r1, [pc, #24]	; (800d6c4 <__assert_func+0x34>)
 800d6ac:	f000 f92c 	bl	800d908 <fiprintf>
 800d6b0:	f000 fb4e 	bl	800dd50 <abort>
 800d6b4:	4b04      	ldr	r3, [pc, #16]	; (800d6c8 <__assert_func+0x38>)
 800d6b6:	461c      	mov	r4, r3
 800d6b8:	e7f3      	b.n	800d6a2 <__assert_func+0x12>
 800d6ba:	bf00      	nop
 800d6bc:	200000ac 	.word	0x200000ac
 800d6c0:	0800f171 	.word	0x0800f171
 800d6c4:	0800f17e 	.word	0x0800f17e
 800d6c8:	0800f1ac 	.word	0x0800f1ac

0800d6cc <atoi>:
 800d6cc:	220a      	movs	r2, #10
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	f000 b87e 	b.w	800d7d0 <strtol>

0800d6d4 <_strtol_l.constprop.0>:
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6da:	4686      	mov	lr, r0
 800d6dc:	4690      	mov	r8, r2
 800d6de:	d001      	beq.n	800d6e4 <_strtol_l.constprop.0+0x10>
 800d6e0:	2b24      	cmp	r3, #36	; 0x24
 800d6e2:	d906      	bls.n	800d6f2 <_strtol_l.constprop.0+0x1e>
 800d6e4:	f000 faf2 	bl	800dccc <__errno>
 800d6e8:	2316      	movs	r3, #22
 800d6ea:	6003      	str	r3, [r0, #0]
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f2:	460d      	mov	r5, r1
 800d6f4:	4835      	ldr	r0, [pc, #212]	; (800d7cc <_strtol_l.constprop.0+0xf8>)
 800d6f6:	462a      	mov	r2, r5
 800d6f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6fc:	5d06      	ldrb	r6, [r0, r4]
 800d6fe:	f016 0608 	ands.w	r6, r6, #8
 800d702:	d1f8      	bne.n	800d6f6 <_strtol_l.constprop.0+0x22>
 800d704:	2c2d      	cmp	r4, #45	; 0x2d
 800d706:	d12e      	bne.n	800d766 <_strtol_l.constprop.0+0x92>
 800d708:	2601      	movs	r6, #1
 800d70a:	782c      	ldrb	r4, [r5, #0]
 800d70c:	1c95      	adds	r5, r2, #2
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d057      	beq.n	800d7c2 <_strtol_l.constprop.0+0xee>
 800d712:	2b10      	cmp	r3, #16
 800d714:	d109      	bne.n	800d72a <_strtol_l.constprop.0+0x56>
 800d716:	2c30      	cmp	r4, #48	; 0x30
 800d718:	d107      	bne.n	800d72a <_strtol_l.constprop.0+0x56>
 800d71a:	782a      	ldrb	r2, [r5, #0]
 800d71c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d720:	2a58      	cmp	r2, #88	; 0x58
 800d722:	d149      	bne.n	800d7b8 <_strtol_l.constprop.0+0xe4>
 800d724:	2310      	movs	r3, #16
 800d726:	786c      	ldrb	r4, [r5, #1]
 800d728:	3502      	adds	r5, #2
 800d72a:	2200      	movs	r2, #0
 800d72c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800d730:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d734:	fbbc f9f3 	udiv	r9, ip, r3
 800d738:	4610      	mov	r0, r2
 800d73a:	fb03 ca19 	mls	sl, r3, r9, ip
 800d73e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d742:	2f09      	cmp	r7, #9
 800d744:	d814      	bhi.n	800d770 <_strtol_l.constprop.0+0x9c>
 800d746:	463c      	mov	r4, r7
 800d748:	42a3      	cmp	r3, r4
 800d74a:	dd20      	ble.n	800d78e <_strtol_l.constprop.0+0xba>
 800d74c:	1c57      	adds	r7, r2, #1
 800d74e:	d007      	beq.n	800d760 <_strtol_l.constprop.0+0x8c>
 800d750:	4581      	cmp	r9, r0
 800d752:	d319      	bcc.n	800d788 <_strtol_l.constprop.0+0xb4>
 800d754:	d101      	bne.n	800d75a <_strtol_l.constprop.0+0x86>
 800d756:	45a2      	cmp	sl, r4
 800d758:	db16      	blt.n	800d788 <_strtol_l.constprop.0+0xb4>
 800d75a:	2201      	movs	r2, #1
 800d75c:	fb00 4003 	mla	r0, r0, r3, r4
 800d760:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d764:	e7eb      	b.n	800d73e <_strtol_l.constprop.0+0x6a>
 800d766:	2c2b      	cmp	r4, #43	; 0x2b
 800d768:	bf04      	itt	eq
 800d76a:	782c      	ldrbeq	r4, [r5, #0]
 800d76c:	1c95      	addeq	r5, r2, #2
 800d76e:	e7ce      	b.n	800d70e <_strtol_l.constprop.0+0x3a>
 800d770:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d774:	2f19      	cmp	r7, #25
 800d776:	d801      	bhi.n	800d77c <_strtol_l.constprop.0+0xa8>
 800d778:	3c37      	subs	r4, #55	; 0x37
 800d77a:	e7e5      	b.n	800d748 <_strtol_l.constprop.0+0x74>
 800d77c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d780:	2f19      	cmp	r7, #25
 800d782:	d804      	bhi.n	800d78e <_strtol_l.constprop.0+0xba>
 800d784:	3c57      	subs	r4, #87	; 0x57
 800d786:	e7df      	b.n	800d748 <_strtol_l.constprop.0+0x74>
 800d788:	f04f 32ff 	mov.w	r2, #4294967295
 800d78c:	e7e8      	b.n	800d760 <_strtol_l.constprop.0+0x8c>
 800d78e:	1c53      	adds	r3, r2, #1
 800d790:	d108      	bne.n	800d7a4 <_strtol_l.constprop.0+0xd0>
 800d792:	2322      	movs	r3, #34	; 0x22
 800d794:	4660      	mov	r0, ip
 800d796:	f8ce 3000 	str.w	r3, [lr]
 800d79a:	f1b8 0f00 	cmp.w	r8, #0
 800d79e:	d0a6      	beq.n	800d6ee <_strtol_l.constprop.0+0x1a>
 800d7a0:	1e69      	subs	r1, r5, #1
 800d7a2:	e006      	b.n	800d7b2 <_strtol_l.constprop.0+0xde>
 800d7a4:	b106      	cbz	r6, 800d7a8 <_strtol_l.constprop.0+0xd4>
 800d7a6:	4240      	negs	r0, r0
 800d7a8:	f1b8 0f00 	cmp.w	r8, #0
 800d7ac:	d09f      	beq.n	800d6ee <_strtol_l.constprop.0+0x1a>
 800d7ae:	2a00      	cmp	r2, #0
 800d7b0:	d1f6      	bne.n	800d7a0 <_strtol_l.constprop.0+0xcc>
 800d7b2:	f8c8 1000 	str.w	r1, [r8]
 800d7b6:	e79a      	b.n	800d6ee <_strtol_l.constprop.0+0x1a>
 800d7b8:	2430      	movs	r4, #48	; 0x30
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1b5      	bne.n	800d72a <_strtol_l.constprop.0+0x56>
 800d7be:	2308      	movs	r3, #8
 800d7c0:	e7b3      	b.n	800d72a <_strtol_l.constprop.0+0x56>
 800d7c2:	2c30      	cmp	r4, #48	; 0x30
 800d7c4:	d0a9      	beq.n	800d71a <_strtol_l.constprop.0+0x46>
 800d7c6:	230a      	movs	r3, #10
 800d7c8:	e7af      	b.n	800d72a <_strtol_l.constprop.0+0x56>
 800d7ca:	bf00      	nop
 800d7cc:	0800f1ae 	.word	0x0800f1ae

0800d7d0 <strtol>:
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	460a      	mov	r2, r1
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	4802      	ldr	r0, [pc, #8]	; (800d7e0 <strtol+0x10>)
 800d7d8:	6800      	ldr	r0, [r0, #0]
 800d7da:	f7ff bf7b 	b.w	800d6d4 <_strtol_l.constprop.0>
 800d7de:	bf00      	nop
 800d7e0:	200000ac 	.word	0x200000ac

0800d7e4 <std>:
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7f2:	6083      	str	r3, [r0, #8]
 800d7f4:	8181      	strh	r1, [r0, #12]
 800d7f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d7f8:	81c2      	strh	r2, [r0, #14]
 800d7fa:	6183      	str	r3, [r0, #24]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	2208      	movs	r2, #8
 800d800:	305c      	adds	r0, #92	; 0x5c
 800d802:	f000 f951 	bl	800daa8 <memset>
 800d806:	4b05      	ldr	r3, [pc, #20]	; (800d81c <std+0x38>)
 800d808:	6224      	str	r4, [r4, #32]
 800d80a:	6263      	str	r3, [r4, #36]	; 0x24
 800d80c:	4b04      	ldr	r3, [pc, #16]	; (800d820 <std+0x3c>)
 800d80e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d810:	4b04      	ldr	r3, [pc, #16]	; (800d824 <std+0x40>)
 800d812:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d814:	4b04      	ldr	r3, [pc, #16]	; (800d828 <std+0x44>)
 800d816:	6323      	str	r3, [r4, #48]	; 0x30
 800d818:	bd10      	pop	{r4, pc}
 800d81a:	bf00      	nop
 800d81c:	0800d9a9 	.word	0x0800d9a9
 800d820:	0800d9cb 	.word	0x0800d9cb
 800d824:	0800da03 	.word	0x0800da03
 800d828:	0800da27 	.word	0x0800da27

0800d82c <stdio_exit_handler>:
 800d82c:	4a02      	ldr	r2, [pc, #8]	; (800d838 <stdio_exit_handler+0xc>)
 800d82e:	4903      	ldr	r1, [pc, #12]	; (800d83c <stdio_exit_handler+0x10>)
 800d830:	4803      	ldr	r0, [pc, #12]	; (800d840 <stdio_exit_handler+0x14>)
 800d832:	f000 b87b 	b.w	800d92c <_fwalk_sglue>
 800d836:	bf00      	nop
 800d838:	20000054 	.word	0x20000054
 800d83c:	0800e8b9 	.word	0x0800e8b9
 800d840:	20000060 	.word	0x20000060

0800d844 <cleanup_stdio>:
 800d844:	6841      	ldr	r1, [r0, #4]
 800d846:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <cleanup_stdio+0x34>)
 800d848:	b510      	push	{r4, lr}
 800d84a:	4299      	cmp	r1, r3
 800d84c:	4604      	mov	r4, r0
 800d84e:	d001      	beq.n	800d854 <cleanup_stdio+0x10>
 800d850:	f001 f832 	bl	800e8b8 <_fflush_r>
 800d854:	68a1      	ldr	r1, [r4, #8]
 800d856:	4b09      	ldr	r3, [pc, #36]	; (800d87c <cleanup_stdio+0x38>)
 800d858:	4299      	cmp	r1, r3
 800d85a:	d002      	beq.n	800d862 <cleanup_stdio+0x1e>
 800d85c:	4620      	mov	r0, r4
 800d85e:	f001 f82b 	bl	800e8b8 <_fflush_r>
 800d862:	68e1      	ldr	r1, [r4, #12]
 800d864:	4b06      	ldr	r3, [pc, #24]	; (800d880 <cleanup_stdio+0x3c>)
 800d866:	4299      	cmp	r1, r3
 800d868:	d004      	beq.n	800d874 <cleanup_stdio+0x30>
 800d86a:	4620      	mov	r0, r4
 800d86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d870:	f001 b822 	b.w	800e8b8 <_fflush_r>
 800d874:	bd10      	pop	{r4, pc}
 800d876:	bf00      	nop
 800d878:	200036a8 	.word	0x200036a8
 800d87c:	20003710 	.word	0x20003710
 800d880:	20003778 	.word	0x20003778

0800d884 <global_stdio_init.part.0>:
 800d884:	b510      	push	{r4, lr}
 800d886:	4b0b      	ldr	r3, [pc, #44]	; (800d8b4 <global_stdio_init.part.0+0x30>)
 800d888:	4c0b      	ldr	r4, [pc, #44]	; (800d8b8 <global_stdio_init.part.0+0x34>)
 800d88a:	4a0c      	ldr	r2, [pc, #48]	; (800d8bc <global_stdio_init.part.0+0x38>)
 800d88c:	4620      	mov	r0, r4
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	2104      	movs	r1, #4
 800d892:	2200      	movs	r2, #0
 800d894:	f7ff ffa6 	bl	800d7e4 <std>
 800d898:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d89c:	2201      	movs	r2, #1
 800d89e:	2109      	movs	r1, #9
 800d8a0:	f7ff ffa0 	bl	800d7e4 <std>
 800d8a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ae:	2112      	movs	r1, #18
 800d8b0:	f7ff bf98 	b.w	800d7e4 <std>
 800d8b4:	200037e0 	.word	0x200037e0
 800d8b8:	200036a8 	.word	0x200036a8
 800d8bc:	0800d82d 	.word	0x0800d82d

0800d8c0 <__sfp_lock_acquire>:
 800d8c0:	4801      	ldr	r0, [pc, #4]	; (800d8c8 <__sfp_lock_acquire+0x8>)
 800d8c2:	f000 ba2d 	b.w	800dd20 <__retarget_lock_acquire_recursive>
 800d8c6:	bf00      	nop
 800d8c8:	200037e9 	.word	0x200037e9

0800d8cc <__sfp_lock_release>:
 800d8cc:	4801      	ldr	r0, [pc, #4]	; (800d8d4 <__sfp_lock_release+0x8>)
 800d8ce:	f000 ba28 	b.w	800dd22 <__retarget_lock_release_recursive>
 800d8d2:	bf00      	nop
 800d8d4:	200037e9 	.word	0x200037e9

0800d8d8 <__sinit>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	4604      	mov	r4, r0
 800d8dc:	f7ff fff0 	bl	800d8c0 <__sfp_lock_acquire>
 800d8e0:	6a23      	ldr	r3, [r4, #32]
 800d8e2:	b11b      	cbz	r3, 800d8ec <__sinit+0x14>
 800d8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8e8:	f7ff bff0 	b.w	800d8cc <__sfp_lock_release>
 800d8ec:	4b04      	ldr	r3, [pc, #16]	; (800d900 <__sinit+0x28>)
 800d8ee:	6223      	str	r3, [r4, #32]
 800d8f0:	4b04      	ldr	r3, [pc, #16]	; (800d904 <__sinit+0x2c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1f5      	bne.n	800d8e4 <__sinit+0xc>
 800d8f8:	f7ff ffc4 	bl	800d884 <global_stdio_init.part.0>
 800d8fc:	e7f2      	b.n	800d8e4 <__sinit+0xc>
 800d8fe:	bf00      	nop
 800d900:	0800d845 	.word	0x0800d845
 800d904:	200037e0 	.word	0x200037e0

0800d908 <fiprintf>:
 800d908:	b40e      	push	{r1, r2, r3}
 800d90a:	b503      	push	{r0, r1, lr}
 800d90c:	4601      	mov	r1, r0
 800d90e:	ab03      	add	r3, sp, #12
 800d910:	4805      	ldr	r0, [pc, #20]	; (800d928 <fiprintf+0x20>)
 800d912:	f853 2b04 	ldr.w	r2, [r3], #4
 800d916:	6800      	ldr	r0, [r0, #0]
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	f000 fc9d 	bl	800e258 <_vfiprintf_r>
 800d91e:	b002      	add	sp, #8
 800d920:	f85d eb04 	ldr.w	lr, [sp], #4
 800d924:	b003      	add	sp, #12
 800d926:	4770      	bx	lr
 800d928:	200000ac 	.word	0x200000ac

0800d92c <_fwalk_sglue>:
 800d92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d930:	4607      	mov	r7, r0
 800d932:	4688      	mov	r8, r1
 800d934:	4614      	mov	r4, r2
 800d936:	2600      	movs	r6, #0
 800d938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d93c:	f1b9 0901 	subs.w	r9, r9, #1
 800d940:	d505      	bpl.n	800d94e <_fwalk_sglue+0x22>
 800d942:	6824      	ldr	r4, [r4, #0]
 800d944:	2c00      	cmp	r4, #0
 800d946:	d1f7      	bne.n	800d938 <_fwalk_sglue+0xc>
 800d948:	4630      	mov	r0, r6
 800d94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d94e:	89ab      	ldrh	r3, [r5, #12]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d907      	bls.n	800d964 <_fwalk_sglue+0x38>
 800d954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d958:	3301      	adds	r3, #1
 800d95a:	d003      	beq.n	800d964 <_fwalk_sglue+0x38>
 800d95c:	4629      	mov	r1, r5
 800d95e:	4638      	mov	r0, r7
 800d960:	47c0      	blx	r8
 800d962:	4306      	orrs	r6, r0
 800d964:	3568      	adds	r5, #104	; 0x68
 800d966:	e7e9      	b.n	800d93c <_fwalk_sglue+0x10>

0800d968 <siprintf>:
 800d968:	b40e      	push	{r1, r2, r3}
 800d96a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d96e:	b500      	push	{lr}
 800d970:	b09c      	sub	sp, #112	; 0x70
 800d972:	ab1d      	add	r3, sp, #116	; 0x74
 800d974:	9002      	str	r0, [sp, #8]
 800d976:	9006      	str	r0, [sp, #24]
 800d978:	9107      	str	r1, [sp, #28]
 800d97a:	9104      	str	r1, [sp, #16]
 800d97c:	4808      	ldr	r0, [pc, #32]	; (800d9a0 <siprintf+0x38>)
 800d97e:	4909      	ldr	r1, [pc, #36]	; (800d9a4 <siprintf+0x3c>)
 800d980:	f853 2b04 	ldr.w	r2, [r3], #4
 800d984:	9105      	str	r1, [sp, #20]
 800d986:	6800      	ldr	r0, [r0, #0]
 800d988:	a902      	add	r1, sp, #8
 800d98a:	9301      	str	r3, [sp, #4]
 800d98c:	f000 fb3e 	bl	800e00c <_svfiprintf_r>
 800d990:	2200      	movs	r2, #0
 800d992:	9b02      	ldr	r3, [sp, #8]
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	b01c      	add	sp, #112	; 0x70
 800d998:	f85d eb04 	ldr.w	lr, [sp], #4
 800d99c:	b003      	add	sp, #12
 800d99e:	4770      	bx	lr
 800d9a0:	200000ac 	.word	0x200000ac
 800d9a4:	ffff0208 	.word	0xffff0208

0800d9a8 <__sread>:
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b0:	f000 f968 	bl	800dc84 <_read_r>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	bfab      	itete	ge
 800d9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d9bc:	181b      	addge	r3, r3, r0
 800d9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9c2:	bfac      	ite	ge
 800d9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9c6:	81a3      	strhlt	r3, [r4, #12]
 800d9c8:	bd10      	pop	{r4, pc}

0800d9ca <__swrite>:
 800d9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ce:	461f      	mov	r7, r3
 800d9d0:	898b      	ldrh	r3, [r1, #12]
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	05db      	lsls	r3, r3, #23
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	4616      	mov	r6, r2
 800d9da:	d505      	bpl.n	800d9e8 <__swrite+0x1e>
 800d9dc:	2302      	movs	r3, #2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e4:	f000 f93c 	bl	800dc60 <_lseek_r>
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	4632      	mov	r2, r6
 800d9ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9f0:	81a3      	strh	r3, [r4, #12]
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	463b      	mov	r3, r7
 800d9f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fe:	f000 b953 	b.w	800dca8 <_write_r>

0800da02 <__sseek>:
 800da02:	b510      	push	{r4, lr}
 800da04:	460c      	mov	r4, r1
 800da06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da0a:	f000 f929 	bl	800dc60 <_lseek_r>
 800da0e:	1c43      	adds	r3, r0, #1
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	bf15      	itete	ne
 800da14:	6560      	strne	r0, [r4, #84]	; 0x54
 800da16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da1e:	81a3      	strheq	r3, [r4, #12]
 800da20:	bf18      	it	ne
 800da22:	81a3      	strhne	r3, [r4, #12]
 800da24:	bd10      	pop	{r4, pc}

0800da26 <__sclose>:
 800da26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2a:	f000 b8b3 	b.w	800db94 <_close_r>

0800da2e <_vasniprintf_r>:
 800da2e:	b530      	push	{r4, r5, lr}
 800da30:	4615      	mov	r5, r2
 800da32:	b09b      	sub	sp, #108	; 0x6c
 800da34:	461a      	mov	r2, r3
 800da36:	682c      	ldr	r4, [r5, #0]
 800da38:	b189      	cbz	r1, 800da5e <_vasniprintf_r+0x30>
 800da3a:	2c00      	cmp	r4, #0
 800da3c:	bf12      	itee	ne
 800da3e:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 800da42:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800da46:	2100      	moveq	r1, #0
 800da48:	2c00      	cmp	r4, #0
 800da4a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800da4e:	9100      	str	r1, [sp, #0]
 800da50:	9104      	str	r1, [sp, #16]
 800da52:	da08      	bge.n	800da66 <_vasniprintf_r+0x38>
 800da54:	238b      	movs	r3, #139	; 0x8b
 800da56:	6003      	str	r3, [r0, #0]
 800da58:	2000      	movs	r0, #0
 800da5a:	b01b      	add	sp, #108	; 0x6c
 800da5c:	bd30      	pop	{r4, r5, pc}
 800da5e:	f44f 7322 	mov.w	r3, #648	; 0x288
 800da62:	460c      	mov	r4, r1
 800da64:	e7f0      	b.n	800da48 <_vasniprintf_r+0x1a>
 800da66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da6a:	4669      	mov	r1, sp
 800da6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800da70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800da72:	9402      	str	r4, [sp, #8]
 800da74:	9405      	str	r4, [sp, #20]
 800da76:	f000 fac9 	bl	800e00c <_svfiprintf_r>
 800da7a:	1e03      	subs	r3, r0, #0
 800da7c:	f04f 0000 	mov.w	r0, #0
 800da80:	bfa1      	itttt	ge
 800da82:	602b      	strge	r3, [r5, #0]
 800da84:	9b00      	ldrge	r3, [sp, #0]
 800da86:	7018      	strbge	r0, [r3, #0]
 800da88:	9804      	ldrge	r0, [sp, #16]
 800da8a:	e7e6      	b.n	800da5a <_vasniprintf_r+0x2c>

0800da8c <vasniprintf>:
 800da8c:	b507      	push	{r0, r1, r2, lr}
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	4613      	mov	r3, r2
 800da92:	460a      	mov	r2, r1
 800da94:	4601      	mov	r1, r0
 800da96:	4803      	ldr	r0, [pc, #12]	; (800daa4 <vasniprintf+0x18>)
 800da98:	6800      	ldr	r0, [r0, #0]
 800da9a:	f7ff ffc8 	bl	800da2e <_vasniprintf_r>
 800da9e:	b003      	add	sp, #12
 800daa0:	f85d fb04 	ldr.w	pc, [sp], #4
 800daa4:	200000ac 	.word	0x200000ac

0800daa8 <memset>:
 800daa8:	4603      	mov	r3, r0
 800daaa:	4402      	add	r2, r0
 800daac:	4293      	cmp	r3, r2
 800daae:	d100      	bne.n	800dab2 <memset+0xa>
 800dab0:	4770      	bx	lr
 800dab2:	f803 1b01 	strb.w	r1, [r3], #1
 800dab6:	e7f9      	b.n	800daac <memset+0x4>

0800dab8 <strncmp>:
 800dab8:	b510      	push	{r4, lr}
 800daba:	b16a      	cbz	r2, 800dad8 <strncmp+0x20>
 800dabc:	3901      	subs	r1, #1
 800dabe:	1884      	adds	r4, r0, r2
 800dac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dac8:	429a      	cmp	r2, r3
 800daca:	d103      	bne.n	800dad4 <strncmp+0x1c>
 800dacc:	42a0      	cmp	r0, r4
 800dace:	d001      	beq.n	800dad4 <strncmp+0x1c>
 800dad0:	2a00      	cmp	r2, #0
 800dad2:	d1f5      	bne.n	800dac0 <strncmp+0x8>
 800dad4:	1ad0      	subs	r0, r2, r3
 800dad6:	bd10      	pop	{r4, pc}
 800dad8:	4610      	mov	r0, r2
 800dada:	e7fc      	b.n	800dad6 <strncmp+0x1e>

0800dadc <strtok>:
 800dadc:	4b16      	ldr	r3, [pc, #88]	; (800db38 <strtok+0x5c>)
 800dade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae2:	681f      	ldr	r7, [r3, #0]
 800dae4:	4605      	mov	r5, r0
 800dae6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800dae8:	460e      	mov	r6, r1
 800daea:	b9ec      	cbnz	r4, 800db28 <strtok+0x4c>
 800daec:	2050      	movs	r0, #80	; 0x50
 800daee:	f000 f97f 	bl	800ddf0 <malloc>
 800daf2:	4602      	mov	r2, r0
 800daf4:	6478      	str	r0, [r7, #68]	; 0x44
 800daf6:	b920      	cbnz	r0, 800db02 <strtok+0x26>
 800daf8:	215b      	movs	r1, #91	; 0x5b
 800dafa:	4b10      	ldr	r3, [pc, #64]	; (800db3c <strtok+0x60>)
 800dafc:	4810      	ldr	r0, [pc, #64]	; (800db40 <strtok+0x64>)
 800dafe:	f7ff fdc7 	bl	800d690 <__assert_func>
 800db02:	e9c0 4400 	strd	r4, r4, [r0]
 800db06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800db0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800db0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800db12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800db16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800db1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800db1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800db22:	6184      	str	r4, [r0, #24]
 800db24:	7704      	strb	r4, [r0, #28]
 800db26:	6244      	str	r4, [r0, #36]	; 0x24
 800db28:	4631      	mov	r1, r6
 800db2a:	4628      	mov	r0, r5
 800db2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db2e:	2301      	movs	r3, #1
 800db30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db34:	f000 b806 	b.w	800db44 <__strtok_r>
 800db38:	200000ac 	.word	0x200000ac
 800db3c:	0800f2ae 	.word	0x0800f2ae
 800db40:	0800f2c5 	.word	0x0800f2c5

0800db44 <__strtok_r>:
 800db44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db46:	b908      	cbnz	r0, 800db4c <__strtok_r+0x8>
 800db48:	6810      	ldr	r0, [r2, #0]
 800db4a:	b188      	cbz	r0, 800db70 <__strtok_r+0x2c>
 800db4c:	4604      	mov	r4, r0
 800db4e:	460f      	mov	r7, r1
 800db50:	4620      	mov	r0, r4
 800db52:	f814 5b01 	ldrb.w	r5, [r4], #1
 800db56:	f817 6b01 	ldrb.w	r6, [r7], #1
 800db5a:	b91e      	cbnz	r6, 800db64 <__strtok_r+0x20>
 800db5c:	b965      	cbnz	r5, 800db78 <__strtok_r+0x34>
 800db5e:	4628      	mov	r0, r5
 800db60:	6015      	str	r5, [r2, #0]
 800db62:	e005      	b.n	800db70 <__strtok_r+0x2c>
 800db64:	42b5      	cmp	r5, r6
 800db66:	d1f6      	bne.n	800db56 <__strtok_r+0x12>
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1f0      	bne.n	800db4e <__strtok_r+0xa>
 800db6c:	6014      	str	r4, [r2, #0]
 800db6e:	7003      	strb	r3, [r0, #0]
 800db70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db72:	461c      	mov	r4, r3
 800db74:	e00c      	b.n	800db90 <__strtok_r+0x4c>
 800db76:	b915      	cbnz	r5, 800db7e <__strtok_r+0x3a>
 800db78:	460e      	mov	r6, r1
 800db7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800db82:	42ab      	cmp	r3, r5
 800db84:	d1f7      	bne.n	800db76 <__strtok_r+0x32>
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0f3      	beq.n	800db72 <__strtok_r+0x2e>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800db90:	6014      	str	r4, [r2, #0]
 800db92:	e7ed      	b.n	800db70 <__strtok_r+0x2c>

0800db94 <_close_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	2300      	movs	r3, #0
 800db98:	4d05      	ldr	r5, [pc, #20]	; (800dbb0 <_close_r+0x1c>)
 800db9a:	4604      	mov	r4, r0
 800db9c:	4608      	mov	r0, r1
 800db9e:	602b      	str	r3, [r5, #0]
 800dba0:	f7f3 fb90 	bl	80012c4 <_close>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d102      	bne.n	800dbae <_close_r+0x1a>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	b103      	cbz	r3, 800dbae <_close_r+0x1a>
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	200037e4 	.word	0x200037e4

0800dbb4 <_reclaim_reent>:
 800dbb4:	4b29      	ldr	r3, [pc, #164]	; (800dc5c <_reclaim_reent+0xa8>)
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4604      	mov	r4, r0
 800dbbc:	4283      	cmp	r3, r0
 800dbbe:	d04b      	beq.n	800dc58 <_reclaim_reent+0xa4>
 800dbc0:	69c3      	ldr	r3, [r0, #28]
 800dbc2:	b143      	cbz	r3, 800dbd6 <_reclaim_reent+0x22>
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d144      	bne.n	800dc54 <_reclaim_reent+0xa0>
 800dbca:	69e3      	ldr	r3, [r4, #28]
 800dbcc:	6819      	ldr	r1, [r3, #0]
 800dbce:	b111      	cbz	r1, 800dbd6 <_reclaim_reent+0x22>
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f000 f8c5 	bl	800dd60 <_free_r>
 800dbd6:	6961      	ldr	r1, [r4, #20]
 800dbd8:	b111      	cbz	r1, 800dbe0 <_reclaim_reent+0x2c>
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f000 f8c0 	bl	800dd60 <_free_r>
 800dbe0:	69e1      	ldr	r1, [r4, #28]
 800dbe2:	b111      	cbz	r1, 800dbea <_reclaim_reent+0x36>
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 f8bb 	bl	800dd60 <_free_r>
 800dbea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dbec:	b111      	cbz	r1, 800dbf4 <_reclaim_reent+0x40>
 800dbee:	4620      	mov	r0, r4
 800dbf0:	f000 f8b6 	bl	800dd60 <_free_r>
 800dbf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbf6:	b111      	cbz	r1, 800dbfe <_reclaim_reent+0x4a>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 f8b1 	bl	800dd60 <_free_r>
 800dbfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc00:	b111      	cbz	r1, 800dc08 <_reclaim_reent+0x54>
 800dc02:	4620      	mov	r0, r4
 800dc04:	f000 f8ac 	bl	800dd60 <_free_r>
 800dc08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dc0a:	b111      	cbz	r1, 800dc12 <_reclaim_reent+0x5e>
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f000 f8a7 	bl	800dd60 <_free_r>
 800dc12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dc14:	b111      	cbz	r1, 800dc1c <_reclaim_reent+0x68>
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 f8a2 	bl	800dd60 <_free_r>
 800dc1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dc1e:	b111      	cbz	r1, 800dc26 <_reclaim_reent+0x72>
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 f89d 	bl	800dd60 <_free_r>
 800dc26:	6a23      	ldr	r3, [r4, #32]
 800dc28:	b1b3      	cbz	r3, 800dc58 <_reclaim_reent+0xa4>
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc30:	4718      	bx	r3
 800dc32:	5949      	ldr	r1, [r1, r5]
 800dc34:	b941      	cbnz	r1, 800dc48 <_reclaim_reent+0x94>
 800dc36:	3504      	adds	r5, #4
 800dc38:	69e3      	ldr	r3, [r4, #28]
 800dc3a:	2d80      	cmp	r5, #128	; 0x80
 800dc3c:	68d9      	ldr	r1, [r3, #12]
 800dc3e:	d1f8      	bne.n	800dc32 <_reclaim_reent+0x7e>
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 f88d 	bl	800dd60 <_free_r>
 800dc46:	e7c0      	b.n	800dbca <_reclaim_reent+0x16>
 800dc48:	680e      	ldr	r6, [r1, #0]
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 f888 	bl	800dd60 <_free_r>
 800dc50:	4631      	mov	r1, r6
 800dc52:	e7ef      	b.n	800dc34 <_reclaim_reent+0x80>
 800dc54:	2500      	movs	r5, #0
 800dc56:	e7ef      	b.n	800dc38 <_reclaim_reent+0x84>
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	bf00      	nop
 800dc5c:	200000ac 	.word	0x200000ac

0800dc60 <_lseek_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4604      	mov	r4, r0
 800dc64:	4608      	mov	r0, r1
 800dc66:	4611      	mov	r1, r2
 800dc68:	2200      	movs	r2, #0
 800dc6a:	4d05      	ldr	r5, [pc, #20]	; (800dc80 <_lseek_r+0x20>)
 800dc6c:	602a      	str	r2, [r5, #0]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f7f3 fb4c 	bl	800130c <_lseek>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_lseek_r+0x1e>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_lseek_r+0x1e>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	200037e4 	.word	0x200037e4

0800dc84 <_read_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4604      	mov	r4, r0
 800dc88:	4608      	mov	r0, r1
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4d05      	ldr	r5, [pc, #20]	; (800dca4 <_read_r+0x20>)
 800dc90:	602a      	str	r2, [r5, #0]
 800dc92:	461a      	mov	r2, r3
 800dc94:	f7f3 fadd 	bl	8001252 <_read>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d102      	bne.n	800dca2 <_read_r+0x1e>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	b103      	cbz	r3, 800dca2 <_read_r+0x1e>
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	200037e4 	.word	0x200037e4

0800dca8 <_write_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	4611      	mov	r1, r2
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4d05      	ldr	r5, [pc, #20]	; (800dcc8 <_write_r+0x20>)
 800dcb4:	602a      	str	r2, [r5, #0]
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	f7f3 fae8 	bl	800128c <_write>
 800dcbc:	1c43      	adds	r3, r0, #1
 800dcbe:	d102      	bne.n	800dcc6 <_write_r+0x1e>
 800dcc0:	682b      	ldr	r3, [r5, #0]
 800dcc2:	b103      	cbz	r3, 800dcc6 <_write_r+0x1e>
 800dcc4:	6023      	str	r3, [r4, #0]
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	200037e4 	.word	0x200037e4

0800dccc <__errno>:
 800dccc:	4b01      	ldr	r3, [pc, #4]	; (800dcd4 <__errno+0x8>)
 800dcce:	6818      	ldr	r0, [r3, #0]
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop
 800dcd4:	200000ac 	.word	0x200000ac

0800dcd8 <__libc_init_array>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	2600      	movs	r6, #0
 800dcdc:	4d0c      	ldr	r5, [pc, #48]	; (800dd10 <__libc_init_array+0x38>)
 800dcde:	4c0d      	ldr	r4, [pc, #52]	; (800dd14 <__libc_init_array+0x3c>)
 800dce0:	1b64      	subs	r4, r4, r5
 800dce2:	10a4      	asrs	r4, r4, #2
 800dce4:	42a6      	cmp	r6, r4
 800dce6:	d109      	bne.n	800dcfc <__libc_init_array+0x24>
 800dce8:	f000 ffda 	bl	800eca0 <_init>
 800dcec:	2600      	movs	r6, #0
 800dcee:	4d0a      	ldr	r5, [pc, #40]	; (800dd18 <__libc_init_array+0x40>)
 800dcf0:	4c0a      	ldr	r4, [pc, #40]	; (800dd1c <__libc_init_array+0x44>)
 800dcf2:	1b64      	subs	r4, r4, r5
 800dcf4:	10a4      	asrs	r4, r4, #2
 800dcf6:	42a6      	cmp	r6, r4
 800dcf8:	d105      	bne.n	800dd06 <__libc_init_array+0x2e>
 800dcfa:	bd70      	pop	{r4, r5, r6, pc}
 800dcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd00:	4798      	blx	r3
 800dd02:	3601      	adds	r6, #1
 800dd04:	e7ee      	b.n	800dce4 <__libc_init_array+0xc>
 800dd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd0a:	4798      	blx	r3
 800dd0c:	3601      	adds	r6, #1
 800dd0e:	e7f2      	b.n	800dcf6 <__libc_init_array+0x1e>
 800dd10:	0800f354 	.word	0x0800f354
 800dd14:	0800f354 	.word	0x0800f354
 800dd18:	0800f354 	.word	0x0800f354
 800dd1c:	0800f358 	.word	0x0800f358

0800dd20 <__retarget_lock_acquire_recursive>:
 800dd20:	4770      	bx	lr

0800dd22 <__retarget_lock_release_recursive>:
 800dd22:	4770      	bx	lr

0800dd24 <strcpy>:
 800dd24:	4603      	mov	r3, r0
 800dd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd2a:	f803 2b01 	strb.w	r2, [r3], #1
 800dd2e:	2a00      	cmp	r2, #0
 800dd30:	d1f9      	bne.n	800dd26 <strcpy+0x2>
 800dd32:	4770      	bx	lr

0800dd34 <memcpy>:
 800dd34:	440a      	add	r2, r1
 800dd36:	4291      	cmp	r1, r2
 800dd38:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd3c:	d100      	bne.n	800dd40 <memcpy+0xc>
 800dd3e:	4770      	bx	lr
 800dd40:	b510      	push	{r4, lr}
 800dd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd46:	4291      	cmp	r1, r2
 800dd48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd4c:	d1f9      	bne.n	800dd42 <memcpy+0xe>
 800dd4e:	bd10      	pop	{r4, pc}

0800dd50 <abort>:
 800dd50:	2006      	movs	r0, #6
 800dd52:	b508      	push	{r3, lr}
 800dd54:	f000 feb0 	bl	800eab8 <raise>
 800dd58:	2001      	movs	r0, #1
 800dd5a:	f7f3 fa70 	bl	800123e <_exit>
	...

0800dd60 <_free_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4605      	mov	r5, r0
 800dd64:	2900      	cmp	r1, #0
 800dd66:	d040      	beq.n	800ddea <_free_r+0x8a>
 800dd68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd6c:	1f0c      	subs	r4, r1, #4
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bfb8      	it	lt
 800dd72:	18e4      	addlt	r4, r4, r3
 800dd74:	f000 f8e4 	bl	800df40 <__malloc_lock>
 800dd78:	4a1c      	ldr	r2, [pc, #112]	; (800ddec <_free_r+0x8c>)
 800dd7a:	6813      	ldr	r3, [r2, #0]
 800dd7c:	b933      	cbnz	r3, 800dd8c <_free_r+0x2c>
 800dd7e:	6063      	str	r3, [r4, #4]
 800dd80:	6014      	str	r4, [r2, #0]
 800dd82:	4628      	mov	r0, r5
 800dd84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd88:	f000 b8e0 	b.w	800df4c <__malloc_unlock>
 800dd8c:	42a3      	cmp	r3, r4
 800dd8e:	d908      	bls.n	800dda2 <_free_r+0x42>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	1821      	adds	r1, r4, r0
 800dd94:	428b      	cmp	r3, r1
 800dd96:	bf01      	itttt	eq
 800dd98:	6819      	ldreq	r1, [r3, #0]
 800dd9a:	685b      	ldreq	r3, [r3, #4]
 800dd9c:	1809      	addeq	r1, r1, r0
 800dd9e:	6021      	streq	r1, [r4, #0]
 800dda0:	e7ed      	b.n	800dd7e <_free_r+0x1e>
 800dda2:	461a      	mov	r2, r3
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	b10b      	cbz	r3, 800ddac <_free_r+0x4c>
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	d9fa      	bls.n	800dda2 <_free_r+0x42>
 800ddac:	6811      	ldr	r1, [r2, #0]
 800ddae:	1850      	adds	r0, r2, r1
 800ddb0:	42a0      	cmp	r0, r4
 800ddb2:	d10b      	bne.n	800ddcc <_free_r+0x6c>
 800ddb4:	6820      	ldr	r0, [r4, #0]
 800ddb6:	4401      	add	r1, r0
 800ddb8:	1850      	adds	r0, r2, r1
 800ddba:	4283      	cmp	r3, r0
 800ddbc:	6011      	str	r1, [r2, #0]
 800ddbe:	d1e0      	bne.n	800dd82 <_free_r+0x22>
 800ddc0:	6818      	ldr	r0, [r3, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4408      	add	r0, r1
 800ddc6:	6010      	str	r0, [r2, #0]
 800ddc8:	6053      	str	r3, [r2, #4]
 800ddca:	e7da      	b.n	800dd82 <_free_r+0x22>
 800ddcc:	d902      	bls.n	800ddd4 <_free_r+0x74>
 800ddce:	230c      	movs	r3, #12
 800ddd0:	602b      	str	r3, [r5, #0]
 800ddd2:	e7d6      	b.n	800dd82 <_free_r+0x22>
 800ddd4:	6820      	ldr	r0, [r4, #0]
 800ddd6:	1821      	adds	r1, r4, r0
 800ddd8:	428b      	cmp	r3, r1
 800ddda:	bf01      	itttt	eq
 800dddc:	6819      	ldreq	r1, [r3, #0]
 800ddde:	685b      	ldreq	r3, [r3, #4]
 800dde0:	1809      	addeq	r1, r1, r0
 800dde2:	6021      	streq	r1, [r4, #0]
 800dde4:	6063      	str	r3, [r4, #4]
 800dde6:	6054      	str	r4, [r2, #4]
 800dde8:	e7cb      	b.n	800dd82 <_free_r+0x22>
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	200037ec 	.word	0x200037ec

0800ddf0 <malloc>:
 800ddf0:	4b02      	ldr	r3, [pc, #8]	; (800ddfc <malloc+0xc>)
 800ddf2:	4601      	mov	r1, r0
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	f000 b823 	b.w	800de40 <_malloc_r>
 800ddfa:	bf00      	nop
 800ddfc:	200000ac 	.word	0x200000ac

0800de00 <sbrk_aligned>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	4e0e      	ldr	r6, [pc, #56]	; (800de3c <sbrk_aligned+0x3c>)
 800de04:	460c      	mov	r4, r1
 800de06:	6831      	ldr	r1, [r6, #0]
 800de08:	4605      	mov	r5, r0
 800de0a:	b911      	cbnz	r1, 800de12 <sbrk_aligned+0x12>
 800de0c:	f000 fe70 	bl	800eaf0 <_sbrk_r>
 800de10:	6030      	str	r0, [r6, #0]
 800de12:	4621      	mov	r1, r4
 800de14:	4628      	mov	r0, r5
 800de16:	f000 fe6b 	bl	800eaf0 <_sbrk_r>
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	d00a      	beq.n	800de34 <sbrk_aligned+0x34>
 800de1e:	1cc4      	adds	r4, r0, #3
 800de20:	f024 0403 	bic.w	r4, r4, #3
 800de24:	42a0      	cmp	r0, r4
 800de26:	d007      	beq.n	800de38 <sbrk_aligned+0x38>
 800de28:	1a21      	subs	r1, r4, r0
 800de2a:	4628      	mov	r0, r5
 800de2c:	f000 fe60 	bl	800eaf0 <_sbrk_r>
 800de30:	3001      	adds	r0, #1
 800de32:	d101      	bne.n	800de38 <sbrk_aligned+0x38>
 800de34:	f04f 34ff 	mov.w	r4, #4294967295
 800de38:	4620      	mov	r0, r4
 800de3a:	bd70      	pop	{r4, r5, r6, pc}
 800de3c:	200037f0 	.word	0x200037f0

0800de40 <_malloc_r>:
 800de40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de44:	1ccd      	adds	r5, r1, #3
 800de46:	f025 0503 	bic.w	r5, r5, #3
 800de4a:	3508      	adds	r5, #8
 800de4c:	2d0c      	cmp	r5, #12
 800de4e:	bf38      	it	cc
 800de50:	250c      	movcc	r5, #12
 800de52:	2d00      	cmp	r5, #0
 800de54:	4607      	mov	r7, r0
 800de56:	db01      	blt.n	800de5c <_malloc_r+0x1c>
 800de58:	42a9      	cmp	r1, r5
 800de5a:	d905      	bls.n	800de68 <_malloc_r+0x28>
 800de5c:	230c      	movs	r3, #12
 800de5e:	2600      	movs	r6, #0
 800de60:	603b      	str	r3, [r7, #0]
 800de62:	4630      	mov	r0, r6
 800de64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800df3c <_malloc_r+0xfc>
 800de6c:	f000 f868 	bl	800df40 <__malloc_lock>
 800de70:	f8d8 3000 	ldr.w	r3, [r8]
 800de74:	461c      	mov	r4, r3
 800de76:	bb5c      	cbnz	r4, 800ded0 <_malloc_r+0x90>
 800de78:	4629      	mov	r1, r5
 800de7a:	4638      	mov	r0, r7
 800de7c:	f7ff ffc0 	bl	800de00 <sbrk_aligned>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	4604      	mov	r4, r0
 800de84:	d155      	bne.n	800df32 <_malloc_r+0xf2>
 800de86:	f8d8 4000 	ldr.w	r4, [r8]
 800de8a:	4626      	mov	r6, r4
 800de8c:	2e00      	cmp	r6, #0
 800de8e:	d145      	bne.n	800df1c <_malloc_r+0xdc>
 800de90:	2c00      	cmp	r4, #0
 800de92:	d048      	beq.n	800df26 <_malloc_r+0xe6>
 800de94:	6823      	ldr	r3, [r4, #0]
 800de96:	4631      	mov	r1, r6
 800de98:	4638      	mov	r0, r7
 800de9a:	eb04 0903 	add.w	r9, r4, r3
 800de9e:	f000 fe27 	bl	800eaf0 <_sbrk_r>
 800dea2:	4581      	cmp	r9, r0
 800dea4:	d13f      	bne.n	800df26 <_malloc_r+0xe6>
 800dea6:	6821      	ldr	r1, [r4, #0]
 800dea8:	4638      	mov	r0, r7
 800deaa:	1a6d      	subs	r5, r5, r1
 800deac:	4629      	mov	r1, r5
 800deae:	f7ff ffa7 	bl	800de00 <sbrk_aligned>
 800deb2:	3001      	adds	r0, #1
 800deb4:	d037      	beq.n	800df26 <_malloc_r+0xe6>
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	442b      	add	r3, r5
 800deba:	6023      	str	r3, [r4, #0]
 800debc:	f8d8 3000 	ldr.w	r3, [r8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d038      	beq.n	800df36 <_malloc_r+0xf6>
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	42a2      	cmp	r2, r4
 800dec8:	d12b      	bne.n	800df22 <_malloc_r+0xe2>
 800deca:	2200      	movs	r2, #0
 800decc:	605a      	str	r2, [r3, #4]
 800dece:	e00f      	b.n	800def0 <_malloc_r+0xb0>
 800ded0:	6822      	ldr	r2, [r4, #0]
 800ded2:	1b52      	subs	r2, r2, r5
 800ded4:	d41f      	bmi.n	800df16 <_malloc_r+0xd6>
 800ded6:	2a0b      	cmp	r2, #11
 800ded8:	d917      	bls.n	800df0a <_malloc_r+0xca>
 800deda:	1961      	adds	r1, r4, r5
 800dedc:	42a3      	cmp	r3, r4
 800dede:	6025      	str	r5, [r4, #0]
 800dee0:	bf18      	it	ne
 800dee2:	6059      	strne	r1, [r3, #4]
 800dee4:	6863      	ldr	r3, [r4, #4]
 800dee6:	bf08      	it	eq
 800dee8:	f8c8 1000 	streq.w	r1, [r8]
 800deec:	5162      	str	r2, [r4, r5]
 800deee:	604b      	str	r3, [r1, #4]
 800def0:	4638      	mov	r0, r7
 800def2:	f104 060b 	add.w	r6, r4, #11
 800def6:	f000 f829 	bl	800df4c <__malloc_unlock>
 800defa:	f026 0607 	bic.w	r6, r6, #7
 800defe:	1d23      	adds	r3, r4, #4
 800df00:	1af2      	subs	r2, r6, r3
 800df02:	d0ae      	beq.n	800de62 <_malloc_r+0x22>
 800df04:	1b9b      	subs	r3, r3, r6
 800df06:	50a3      	str	r3, [r4, r2]
 800df08:	e7ab      	b.n	800de62 <_malloc_r+0x22>
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	6862      	ldr	r2, [r4, #4]
 800df0e:	d1dd      	bne.n	800decc <_malloc_r+0x8c>
 800df10:	f8c8 2000 	str.w	r2, [r8]
 800df14:	e7ec      	b.n	800def0 <_malloc_r+0xb0>
 800df16:	4623      	mov	r3, r4
 800df18:	6864      	ldr	r4, [r4, #4]
 800df1a:	e7ac      	b.n	800de76 <_malloc_r+0x36>
 800df1c:	4634      	mov	r4, r6
 800df1e:	6876      	ldr	r6, [r6, #4]
 800df20:	e7b4      	b.n	800de8c <_malloc_r+0x4c>
 800df22:	4613      	mov	r3, r2
 800df24:	e7cc      	b.n	800dec0 <_malloc_r+0x80>
 800df26:	230c      	movs	r3, #12
 800df28:	4638      	mov	r0, r7
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	f000 f80e 	bl	800df4c <__malloc_unlock>
 800df30:	e797      	b.n	800de62 <_malloc_r+0x22>
 800df32:	6025      	str	r5, [r4, #0]
 800df34:	e7dc      	b.n	800def0 <_malloc_r+0xb0>
 800df36:	605b      	str	r3, [r3, #4]
 800df38:	deff      	udf	#255	; 0xff
 800df3a:	bf00      	nop
 800df3c:	200037ec 	.word	0x200037ec

0800df40 <__malloc_lock>:
 800df40:	4801      	ldr	r0, [pc, #4]	; (800df48 <__malloc_lock+0x8>)
 800df42:	f7ff beed 	b.w	800dd20 <__retarget_lock_acquire_recursive>
 800df46:	bf00      	nop
 800df48:	200037e8 	.word	0x200037e8

0800df4c <__malloc_unlock>:
 800df4c:	4801      	ldr	r0, [pc, #4]	; (800df54 <__malloc_unlock+0x8>)
 800df4e:	f7ff bee8 	b.w	800dd22 <__retarget_lock_release_recursive>
 800df52:	bf00      	nop
 800df54:	200037e8 	.word	0x200037e8

0800df58 <__ssputs_r>:
 800df58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df5c:	461f      	mov	r7, r3
 800df5e:	688e      	ldr	r6, [r1, #8]
 800df60:	4682      	mov	sl, r0
 800df62:	42be      	cmp	r6, r7
 800df64:	460c      	mov	r4, r1
 800df66:	4690      	mov	r8, r2
 800df68:	680b      	ldr	r3, [r1, #0]
 800df6a:	d82c      	bhi.n	800dfc6 <__ssputs_r+0x6e>
 800df6c:	898a      	ldrh	r2, [r1, #12]
 800df6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df72:	d026      	beq.n	800dfc2 <__ssputs_r+0x6a>
 800df74:	6965      	ldr	r5, [r4, #20]
 800df76:	6909      	ldr	r1, [r1, #16]
 800df78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df7c:	eba3 0901 	sub.w	r9, r3, r1
 800df80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df84:	1c7b      	adds	r3, r7, #1
 800df86:	444b      	add	r3, r9
 800df88:	106d      	asrs	r5, r5, #1
 800df8a:	429d      	cmp	r5, r3
 800df8c:	bf38      	it	cc
 800df8e:	461d      	movcc	r5, r3
 800df90:	0553      	lsls	r3, r2, #21
 800df92:	d527      	bpl.n	800dfe4 <__ssputs_r+0x8c>
 800df94:	4629      	mov	r1, r5
 800df96:	f7ff ff53 	bl	800de40 <_malloc_r>
 800df9a:	4606      	mov	r6, r0
 800df9c:	b360      	cbz	r0, 800dff8 <__ssputs_r+0xa0>
 800df9e:	464a      	mov	r2, r9
 800dfa0:	6921      	ldr	r1, [r4, #16]
 800dfa2:	f7ff fec7 	bl	800dd34 <memcpy>
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dfac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfb0:	81a3      	strh	r3, [r4, #12]
 800dfb2:	6126      	str	r6, [r4, #16]
 800dfb4:	444e      	add	r6, r9
 800dfb6:	6026      	str	r6, [r4, #0]
 800dfb8:	463e      	mov	r6, r7
 800dfba:	6165      	str	r5, [r4, #20]
 800dfbc:	eba5 0509 	sub.w	r5, r5, r9
 800dfc0:	60a5      	str	r5, [r4, #8]
 800dfc2:	42be      	cmp	r6, r7
 800dfc4:	d900      	bls.n	800dfc8 <__ssputs_r+0x70>
 800dfc6:	463e      	mov	r6, r7
 800dfc8:	4632      	mov	r2, r6
 800dfca:	4641      	mov	r1, r8
 800dfcc:	6820      	ldr	r0, [r4, #0]
 800dfce:	f000 fd31 	bl	800ea34 <memmove>
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	68a3      	ldr	r3, [r4, #8]
 800dfd6:	1b9b      	subs	r3, r3, r6
 800dfd8:	60a3      	str	r3, [r4, #8]
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	4433      	add	r3, r6
 800dfde:	6023      	str	r3, [r4, #0]
 800dfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe4:	462a      	mov	r2, r5
 800dfe6:	f000 fda1 	bl	800eb2c <_realloc_r>
 800dfea:	4606      	mov	r6, r0
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d1e0      	bne.n	800dfb2 <__ssputs_r+0x5a>
 800dff0:	4650      	mov	r0, sl
 800dff2:	6921      	ldr	r1, [r4, #16]
 800dff4:	f7ff feb4 	bl	800dd60 <_free_r>
 800dff8:	230c      	movs	r3, #12
 800dffa:	f8ca 3000 	str.w	r3, [sl]
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	f04f 30ff 	mov.w	r0, #4294967295
 800e004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e008:	81a3      	strh	r3, [r4, #12]
 800e00a:	e7e9      	b.n	800dfe0 <__ssputs_r+0x88>

0800e00c <_svfiprintf_r>:
 800e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	4698      	mov	r8, r3
 800e012:	898b      	ldrh	r3, [r1, #12]
 800e014:	4607      	mov	r7, r0
 800e016:	061b      	lsls	r3, r3, #24
 800e018:	460d      	mov	r5, r1
 800e01a:	4614      	mov	r4, r2
 800e01c:	b09d      	sub	sp, #116	; 0x74
 800e01e:	d50e      	bpl.n	800e03e <_svfiprintf_r+0x32>
 800e020:	690b      	ldr	r3, [r1, #16]
 800e022:	b963      	cbnz	r3, 800e03e <_svfiprintf_r+0x32>
 800e024:	2140      	movs	r1, #64	; 0x40
 800e026:	f7ff ff0b 	bl	800de40 <_malloc_r>
 800e02a:	6028      	str	r0, [r5, #0]
 800e02c:	6128      	str	r0, [r5, #16]
 800e02e:	b920      	cbnz	r0, 800e03a <_svfiprintf_r+0x2e>
 800e030:	230c      	movs	r3, #12
 800e032:	603b      	str	r3, [r7, #0]
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	e0d0      	b.n	800e1dc <_svfiprintf_r+0x1d0>
 800e03a:	2340      	movs	r3, #64	; 0x40
 800e03c:	616b      	str	r3, [r5, #20]
 800e03e:	2300      	movs	r3, #0
 800e040:	9309      	str	r3, [sp, #36]	; 0x24
 800e042:	2320      	movs	r3, #32
 800e044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e048:	2330      	movs	r3, #48	; 0x30
 800e04a:	f04f 0901 	mov.w	r9, #1
 800e04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e052:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e1f4 <_svfiprintf_r+0x1e8>
 800e056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e05a:	4623      	mov	r3, r4
 800e05c:	469a      	mov	sl, r3
 800e05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e062:	b10a      	cbz	r2, 800e068 <_svfiprintf_r+0x5c>
 800e064:	2a25      	cmp	r2, #37	; 0x25
 800e066:	d1f9      	bne.n	800e05c <_svfiprintf_r+0x50>
 800e068:	ebba 0b04 	subs.w	fp, sl, r4
 800e06c:	d00b      	beq.n	800e086 <_svfiprintf_r+0x7a>
 800e06e:	465b      	mov	r3, fp
 800e070:	4622      	mov	r2, r4
 800e072:	4629      	mov	r1, r5
 800e074:	4638      	mov	r0, r7
 800e076:	f7ff ff6f 	bl	800df58 <__ssputs_r>
 800e07a:	3001      	adds	r0, #1
 800e07c:	f000 80a9 	beq.w	800e1d2 <_svfiprintf_r+0x1c6>
 800e080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e082:	445a      	add	r2, fp
 800e084:	9209      	str	r2, [sp, #36]	; 0x24
 800e086:	f89a 3000 	ldrb.w	r3, [sl]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 80a1 	beq.w	800e1d2 <_svfiprintf_r+0x1c6>
 800e090:	2300      	movs	r3, #0
 800e092:	f04f 32ff 	mov.w	r2, #4294967295
 800e096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e09a:	f10a 0a01 	add.w	sl, sl, #1
 800e09e:	9304      	str	r3, [sp, #16]
 800e0a0:	9307      	str	r3, [sp, #28]
 800e0a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0a6:	931a      	str	r3, [sp, #104]	; 0x68
 800e0a8:	4654      	mov	r4, sl
 800e0aa:	2205      	movs	r2, #5
 800e0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b0:	4850      	ldr	r0, [pc, #320]	; (800e1f4 <_svfiprintf_r+0x1e8>)
 800e0b2:	f000 fd2d 	bl	800eb10 <memchr>
 800e0b6:	9a04      	ldr	r2, [sp, #16]
 800e0b8:	b9d8      	cbnz	r0, 800e0f2 <_svfiprintf_r+0xe6>
 800e0ba:	06d0      	lsls	r0, r2, #27
 800e0bc:	bf44      	itt	mi
 800e0be:	2320      	movmi	r3, #32
 800e0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0c4:	0711      	lsls	r1, r2, #28
 800e0c6:	bf44      	itt	mi
 800e0c8:	232b      	movmi	r3, #43	; 0x2b
 800e0ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800e0d4:	d015      	beq.n	800e102 <_svfiprintf_r+0xf6>
 800e0d6:	4654      	mov	r4, sl
 800e0d8:	2000      	movs	r0, #0
 800e0da:	f04f 0c0a 	mov.w	ip, #10
 800e0de:	9a07      	ldr	r2, [sp, #28]
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0e6:	3b30      	subs	r3, #48	; 0x30
 800e0e8:	2b09      	cmp	r3, #9
 800e0ea:	d94d      	bls.n	800e188 <_svfiprintf_r+0x17c>
 800e0ec:	b1b0      	cbz	r0, 800e11c <_svfiprintf_r+0x110>
 800e0ee:	9207      	str	r2, [sp, #28]
 800e0f0:	e014      	b.n	800e11c <_svfiprintf_r+0x110>
 800e0f2:	eba0 0308 	sub.w	r3, r0, r8
 800e0f6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	46a2      	mov	sl, r4
 800e0fe:	9304      	str	r3, [sp, #16]
 800e100:	e7d2      	b.n	800e0a8 <_svfiprintf_r+0x9c>
 800e102:	9b03      	ldr	r3, [sp, #12]
 800e104:	1d19      	adds	r1, r3, #4
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	9103      	str	r1, [sp, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bfbb      	ittet	lt
 800e10e:	425b      	neglt	r3, r3
 800e110:	f042 0202 	orrlt.w	r2, r2, #2
 800e114:	9307      	strge	r3, [sp, #28]
 800e116:	9307      	strlt	r3, [sp, #28]
 800e118:	bfb8      	it	lt
 800e11a:	9204      	strlt	r2, [sp, #16]
 800e11c:	7823      	ldrb	r3, [r4, #0]
 800e11e:	2b2e      	cmp	r3, #46	; 0x2e
 800e120:	d10c      	bne.n	800e13c <_svfiprintf_r+0x130>
 800e122:	7863      	ldrb	r3, [r4, #1]
 800e124:	2b2a      	cmp	r3, #42	; 0x2a
 800e126:	d134      	bne.n	800e192 <_svfiprintf_r+0x186>
 800e128:	9b03      	ldr	r3, [sp, #12]
 800e12a:	3402      	adds	r4, #2
 800e12c:	1d1a      	adds	r2, r3, #4
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	9203      	str	r2, [sp, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	bfb8      	it	lt
 800e136:	f04f 33ff 	movlt.w	r3, #4294967295
 800e13a:	9305      	str	r3, [sp, #20]
 800e13c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e1f8 <_svfiprintf_r+0x1ec>
 800e140:	2203      	movs	r2, #3
 800e142:	4650      	mov	r0, sl
 800e144:	7821      	ldrb	r1, [r4, #0]
 800e146:	f000 fce3 	bl	800eb10 <memchr>
 800e14a:	b138      	cbz	r0, 800e15c <_svfiprintf_r+0x150>
 800e14c:	2240      	movs	r2, #64	; 0x40
 800e14e:	9b04      	ldr	r3, [sp, #16]
 800e150:	eba0 000a 	sub.w	r0, r0, sl
 800e154:	4082      	lsls	r2, r0
 800e156:	4313      	orrs	r3, r2
 800e158:	3401      	adds	r4, #1
 800e15a:	9304      	str	r3, [sp, #16]
 800e15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e160:	2206      	movs	r2, #6
 800e162:	4826      	ldr	r0, [pc, #152]	; (800e1fc <_svfiprintf_r+0x1f0>)
 800e164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e168:	f000 fcd2 	bl	800eb10 <memchr>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d038      	beq.n	800e1e2 <_svfiprintf_r+0x1d6>
 800e170:	4b23      	ldr	r3, [pc, #140]	; (800e200 <_svfiprintf_r+0x1f4>)
 800e172:	bb1b      	cbnz	r3, 800e1bc <_svfiprintf_r+0x1b0>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	3307      	adds	r3, #7
 800e178:	f023 0307 	bic.w	r3, r3, #7
 800e17c:	3308      	adds	r3, #8
 800e17e:	9303      	str	r3, [sp, #12]
 800e180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e182:	4433      	add	r3, r6
 800e184:	9309      	str	r3, [sp, #36]	; 0x24
 800e186:	e768      	b.n	800e05a <_svfiprintf_r+0x4e>
 800e188:	460c      	mov	r4, r1
 800e18a:	2001      	movs	r0, #1
 800e18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e190:	e7a6      	b.n	800e0e0 <_svfiprintf_r+0xd4>
 800e192:	2300      	movs	r3, #0
 800e194:	f04f 0c0a 	mov.w	ip, #10
 800e198:	4619      	mov	r1, r3
 800e19a:	3401      	adds	r4, #1
 800e19c:	9305      	str	r3, [sp, #20]
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1a4:	3a30      	subs	r2, #48	; 0x30
 800e1a6:	2a09      	cmp	r2, #9
 800e1a8:	d903      	bls.n	800e1b2 <_svfiprintf_r+0x1a6>
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d0c6      	beq.n	800e13c <_svfiprintf_r+0x130>
 800e1ae:	9105      	str	r1, [sp, #20]
 800e1b0:	e7c4      	b.n	800e13c <_svfiprintf_r+0x130>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1ba:	e7f0      	b.n	800e19e <_svfiprintf_r+0x192>
 800e1bc:	ab03      	add	r3, sp, #12
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	462a      	mov	r2, r5
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <_svfiprintf_r+0x1f8>)
 800e1c6:	a904      	add	r1, sp, #16
 800e1c8:	f3af 8000 	nop.w
 800e1cc:	1c42      	adds	r2, r0, #1
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	d1d6      	bne.n	800e180 <_svfiprintf_r+0x174>
 800e1d2:	89ab      	ldrh	r3, [r5, #12]
 800e1d4:	065b      	lsls	r3, r3, #25
 800e1d6:	f53f af2d 	bmi.w	800e034 <_svfiprintf_r+0x28>
 800e1da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1dc:	b01d      	add	sp, #116	; 0x74
 800e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e2:	ab03      	add	r3, sp, #12
 800e1e4:	9300      	str	r3, [sp, #0]
 800e1e6:	462a      	mov	r2, r5
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	4b06      	ldr	r3, [pc, #24]	; (800e204 <_svfiprintf_r+0x1f8>)
 800e1ec:	a904      	add	r1, sp, #16
 800e1ee:	f000 f9bf 	bl	800e570 <_printf_i>
 800e1f2:	e7eb      	b.n	800e1cc <_svfiprintf_r+0x1c0>
 800e1f4:	0800f31f 	.word	0x0800f31f
 800e1f8:	0800f325 	.word	0x0800f325
 800e1fc:	0800f329 	.word	0x0800f329
 800e200:	00000000 	.word	0x00000000
 800e204:	0800df59 	.word	0x0800df59

0800e208 <__sfputc_r>:
 800e208:	6893      	ldr	r3, [r2, #8]
 800e20a:	b410      	push	{r4}
 800e20c:	3b01      	subs	r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	6093      	str	r3, [r2, #8]
 800e212:	da07      	bge.n	800e224 <__sfputc_r+0x1c>
 800e214:	6994      	ldr	r4, [r2, #24]
 800e216:	42a3      	cmp	r3, r4
 800e218:	db01      	blt.n	800e21e <__sfputc_r+0x16>
 800e21a:	290a      	cmp	r1, #10
 800e21c:	d102      	bne.n	800e224 <__sfputc_r+0x1c>
 800e21e:	bc10      	pop	{r4}
 800e220:	f000 bb72 	b.w	800e908 <__swbuf_r>
 800e224:	6813      	ldr	r3, [r2, #0]
 800e226:	1c58      	adds	r0, r3, #1
 800e228:	6010      	str	r0, [r2, #0]
 800e22a:	7019      	strb	r1, [r3, #0]
 800e22c:	4608      	mov	r0, r1
 800e22e:	bc10      	pop	{r4}
 800e230:	4770      	bx	lr

0800e232 <__sfputs_r>:
 800e232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e234:	4606      	mov	r6, r0
 800e236:	460f      	mov	r7, r1
 800e238:	4614      	mov	r4, r2
 800e23a:	18d5      	adds	r5, r2, r3
 800e23c:	42ac      	cmp	r4, r5
 800e23e:	d101      	bne.n	800e244 <__sfputs_r+0x12>
 800e240:	2000      	movs	r0, #0
 800e242:	e007      	b.n	800e254 <__sfputs_r+0x22>
 800e244:	463a      	mov	r2, r7
 800e246:	4630      	mov	r0, r6
 800e248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e24c:	f7ff ffdc 	bl	800e208 <__sfputc_r>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d1f3      	bne.n	800e23c <__sfputs_r+0xa>
 800e254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e258 <_vfiprintf_r>:
 800e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e25c:	460d      	mov	r5, r1
 800e25e:	4614      	mov	r4, r2
 800e260:	4698      	mov	r8, r3
 800e262:	4606      	mov	r6, r0
 800e264:	b09d      	sub	sp, #116	; 0x74
 800e266:	b118      	cbz	r0, 800e270 <_vfiprintf_r+0x18>
 800e268:	6a03      	ldr	r3, [r0, #32]
 800e26a:	b90b      	cbnz	r3, 800e270 <_vfiprintf_r+0x18>
 800e26c:	f7ff fb34 	bl	800d8d8 <__sinit>
 800e270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e272:	07d9      	lsls	r1, r3, #31
 800e274:	d405      	bmi.n	800e282 <_vfiprintf_r+0x2a>
 800e276:	89ab      	ldrh	r3, [r5, #12]
 800e278:	059a      	lsls	r2, r3, #22
 800e27a:	d402      	bmi.n	800e282 <_vfiprintf_r+0x2a>
 800e27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e27e:	f7ff fd4f 	bl	800dd20 <__retarget_lock_acquire_recursive>
 800e282:	89ab      	ldrh	r3, [r5, #12]
 800e284:	071b      	lsls	r3, r3, #28
 800e286:	d501      	bpl.n	800e28c <_vfiprintf_r+0x34>
 800e288:	692b      	ldr	r3, [r5, #16]
 800e28a:	b99b      	cbnz	r3, 800e2b4 <_vfiprintf_r+0x5c>
 800e28c:	4629      	mov	r1, r5
 800e28e:	4630      	mov	r0, r6
 800e290:	f000 fb78 	bl	800e984 <__swsetup_r>
 800e294:	b170      	cbz	r0, 800e2b4 <_vfiprintf_r+0x5c>
 800e296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e298:	07dc      	lsls	r4, r3, #31
 800e29a:	d504      	bpl.n	800e2a6 <_vfiprintf_r+0x4e>
 800e29c:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a0:	b01d      	add	sp, #116	; 0x74
 800e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a6:	89ab      	ldrh	r3, [r5, #12]
 800e2a8:	0598      	lsls	r0, r3, #22
 800e2aa:	d4f7      	bmi.n	800e29c <_vfiprintf_r+0x44>
 800e2ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ae:	f7ff fd38 	bl	800dd22 <__retarget_lock_release_recursive>
 800e2b2:	e7f3      	b.n	800e29c <_vfiprintf_r+0x44>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b8:	2320      	movs	r3, #32
 800e2ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2be:	2330      	movs	r3, #48	; 0x30
 800e2c0:	f04f 0901 	mov.w	r9, #1
 800e2c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e478 <_vfiprintf_r+0x220>
 800e2cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d0:	4623      	mov	r3, r4
 800e2d2:	469a      	mov	sl, r3
 800e2d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2d8:	b10a      	cbz	r2, 800e2de <_vfiprintf_r+0x86>
 800e2da:	2a25      	cmp	r2, #37	; 0x25
 800e2dc:	d1f9      	bne.n	800e2d2 <_vfiprintf_r+0x7a>
 800e2de:	ebba 0b04 	subs.w	fp, sl, r4
 800e2e2:	d00b      	beq.n	800e2fc <_vfiprintf_r+0xa4>
 800e2e4:	465b      	mov	r3, fp
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f7ff ffa1 	bl	800e232 <__sfputs_r>
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	f000 80a9 	beq.w	800e448 <_vfiprintf_r+0x1f0>
 800e2f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2f8:	445a      	add	r2, fp
 800e2fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e2fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f000 80a1 	beq.w	800e448 <_vfiprintf_r+0x1f0>
 800e306:	2300      	movs	r3, #0
 800e308:	f04f 32ff 	mov.w	r2, #4294967295
 800e30c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e310:	f10a 0a01 	add.w	sl, sl, #1
 800e314:	9304      	str	r3, [sp, #16]
 800e316:	9307      	str	r3, [sp, #28]
 800e318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e31c:	931a      	str	r3, [sp, #104]	; 0x68
 800e31e:	4654      	mov	r4, sl
 800e320:	2205      	movs	r2, #5
 800e322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e326:	4854      	ldr	r0, [pc, #336]	; (800e478 <_vfiprintf_r+0x220>)
 800e328:	f000 fbf2 	bl	800eb10 <memchr>
 800e32c:	9a04      	ldr	r2, [sp, #16]
 800e32e:	b9d8      	cbnz	r0, 800e368 <_vfiprintf_r+0x110>
 800e330:	06d1      	lsls	r1, r2, #27
 800e332:	bf44      	itt	mi
 800e334:	2320      	movmi	r3, #32
 800e336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e33a:	0713      	lsls	r3, r2, #28
 800e33c:	bf44      	itt	mi
 800e33e:	232b      	movmi	r3, #43	; 0x2b
 800e340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e344:	f89a 3000 	ldrb.w	r3, [sl]
 800e348:	2b2a      	cmp	r3, #42	; 0x2a
 800e34a:	d015      	beq.n	800e378 <_vfiprintf_r+0x120>
 800e34c:	4654      	mov	r4, sl
 800e34e:	2000      	movs	r0, #0
 800e350:	f04f 0c0a 	mov.w	ip, #10
 800e354:	9a07      	ldr	r2, [sp, #28]
 800e356:	4621      	mov	r1, r4
 800e358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e35c:	3b30      	subs	r3, #48	; 0x30
 800e35e:	2b09      	cmp	r3, #9
 800e360:	d94d      	bls.n	800e3fe <_vfiprintf_r+0x1a6>
 800e362:	b1b0      	cbz	r0, 800e392 <_vfiprintf_r+0x13a>
 800e364:	9207      	str	r2, [sp, #28]
 800e366:	e014      	b.n	800e392 <_vfiprintf_r+0x13a>
 800e368:	eba0 0308 	sub.w	r3, r0, r8
 800e36c:	fa09 f303 	lsl.w	r3, r9, r3
 800e370:	4313      	orrs	r3, r2
 800e372:	46a2      	mov	sl, r4
 800e374:	9304      	str	r3, [sp, #16]
 800e376:	e7d2      	b.n	800e31e <_vfiprintf_r+0xc6>
 800e378:	9b03      	ldr	r3, [sp, #12]
 800e37a:	1d19      	adds	r1, r3, #4
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	9103      	str	r1, [sp, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	bfbb      	ittet	lt
 800e384:	425b      	neglt	r3, r3
 800e386:	f042 0202 	orrlt.w	r2, r2, #2
 800e38a:	9307      	strge	r3, [sp, #28]
 800e38c:	9307      	strlt	r3, [sp, #28]
 800e38e:	bfb8      	it	lt
 800e390:	9204      	strlt	r2, [sp, #16]
 800e392:	7823      	ldrb	r3, [r4, #0]
 800e394:	2b2e      	cmp	r3, #46	; 0x2e
 800e396:	d10c      	bne.n	800e3b2 <_vfiprintf_r+0x15a>
 800e398:	7863      	ldrb	r3, [r4, #1]
 800e39a:	2b2a      	cmp	r3, #42	; 0x2a
 800e39c:	d134      	bne.n	800e408 <_vfiprintf_r+0x1b0>
 800e39e:	9b03      	ldr	r3, [sp, #12]
 800e3a0:	3402      	adds	r4, #2
 800e3a2:	1d1a      	adds	r2, r3, #4
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	9203      	str	r2, [sp, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	bfb8      	it	lt
 800e3ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3b0:	9305      	str	r3, [sp, #20]
 800e3b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e47c <_vfiprintf_r+0x224>
 800e3b6:	2203      	movs	r2, #3
 800e3b8:	4650      	mov	r0, sl
 800e3ba:	7821      	ldrb	r1, [r4, #0]
 800e3bc:	f000 fba8 	bl	800eb10 <memchr>
 800e3c0:	b138      	cbz	r0, 800e3d2 <_vfiprintf_r+0x17a>
 800e3c2:	2240      	movs	r2, #64	; 0x40
 800e3c4:	9b04      	ldr	r3, [sp, #16]
 800e3c6:	eba0 000a 	sub.w	r0, r0, sl
 800e3ca:	4082      	lsls	r2, r0
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	3401      	adds	r4, #1
 800e3d0:	9304      	str	r3, [sp, #16]
 800e3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3d6:	2206      	movs	r2, #6
 800e3d8:	4829      	ldr	r0, [pc, #164]	; (800e480 <_vfiprintf_r+0x228>)
 800e3da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3de:	f000 fb97 	bl	800eb10 <memchr>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d03f      	beq.n	800e466 <_vfiprintf_r+0x20e>
 800e3e6:	4b27      	ldr	r3, [pc, #156]	; (800e484 <_vfiprintf_r+0x22c>)
 800e3e8:	bb1b      	cbnz	r3, 800e432 <_vfiprintf_r+0x1da>
 800e3ea:	9b03      	ldr	r3, [sp, #12]
 800e3ec:	3307      	adds	r3, #7
 800e3ee:	f023 0307 	bic.w	r3, r3, #7
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	9303      	str	r3, [sp, #12]
 800e3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f8:	443b      	add	r3, r7
 800e3fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e3fc:	e768      	b.n	800e2d0 <_vfiprintf_r+0x78>
 800e3fe:	460c      	mov	r4, r1
 800e400:	2001      	movs	r0, #1
 800e402:	fb0c 3202 	mla	r2, ip, r2, r3
 800e406:	e7a6      	b.n	800e356 <_vfiprintf_r+0xfe>
 800e408:	2300      	movs	r3, #0
 800e40a:	f04f 0c0a 	mov.w	ip, #10
 800e40e:	4619      	mov	r1, r3
 800e410:	3401      	adds	r4, #1
 800e412:	9305      	str	r3, [sp, #20]
 800e414:	4620      	mov	r0, r4
 800e416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e41a:	3a30      	subs	r2, #48	; 0x30
 800e41c:	2a09      	cmp	r2, #9
 800e41e:	d903      	bls.n	800e428 <_vfiprintf_r+0x1d0>
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0c6      	beq.n	800e3b2 <_vfiprintf_r+0x15a>
 800e424:	9105      	str	r1, [sp, #20]
 800e426:	e7c4      	b.n	800e3b2 <_vfiprintf_r+0x15a>
 800e428:	4604      	mov	r4, r0
 800e42a:	2301      	movs	r3, #1
 800e42c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e430:	e7f0      	b.n	800e414 <_vfiprintf_r+0x1bc>
 800e432:	ab03      	add	r3, sp, #12
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	462a      	mov	r2, r5
 800e438:	4630      	mov	r0, r6
 800e43a:	4b13      	ldr	r3, [pc, #76]	; (800e488 <_vfiprintf_r+0x230>)
 800e43c:	a904      	add	r1, sp, #16
 800e43e:	f3af 8000 	nop.w
 800e442:	4607      	mov	r7, r0
 800e444:	1c78      	adds	r0, r7, #1
 800e446:	d1d6      	bne.n	800e3f6 <_vfiprintf_r+0x19e>
 800e448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e44a:	07d9      	lsls	r1, r3, #31
 800e44c:	d405      	bmi.n	800e45a <_vfiprintf_r+0x202>
 800e44e:	89ab      	ldrh	r3, [r5, #12]
 800e450:	059a      	lsls	r2, r3, #22
 800e452:	d402      	bmi.n	800e45a <_vfiprintf_r+0x202>
 800e454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e456:	f7ff fc64 	bl	800dd22 <__retarget_lock_release_recursive>
 800e45a:	89ab      	ldrh	r3, [r5, #12]
 800e45c:	065b      	lsls	r3, r3, #25
 800e45e:	f53f af1d 	bmi.w	800e29c <_vfiprintf_r+0x44>
 800e462:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e464:	e71c      	b.n	800e2a0 <_vfiprintf_r+0x48>
 800e466:	ab03      	add	r3, sp, #12
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	462a      	mov	r2, r5
 800e46c:	4630      	mov	r0, r6
 800e46e:	4b06      	ldr	r3, [pc, #24]	; (800e488 <_vfiprintf_r+0x230>)
 800e470:	a904      	add	r1, sp, #16
 800e472:	f000 f87d 	bl	800e570 <_printf_i>
 800e476:	e7e4      	b.n	800e442 <_vfiprintf_r+0x1ea>
 800e478:	0800f31f 	.word	0x0800f31f
 800e47c:	0800f325 	.word	0x0800f325
 800e480:	0800f329 	.word	0x0800f329
 800e484:	00000000 	.word	0x00000000
 800e488:	0800e233 	.word	0x0800e233

0800e48c <_printf_common>:
 800e48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e490:	4616      	mov	r6, r2
 800e492:	4699      	mov	r9, r3
 800e494:	688a      	ldr	r2, [r1, #8]
 800e496:	690b      	ldr	r3, [r1, #16]
 800e498:	4607      	mov	r7, r0
 800e49a:	4293      	cmp	r3, r2
 800e49c:	bfb8      	it	lt
 800e49e:	4613      	movlt	r3, r2
 800e4a0:	6033      	str	r3, [r6, #0]
 800e4a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4ac:	b10a      	cbz	r2, 800e4b2 <_printf_common+0x26>
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	6033      	str	r3, [r6, #0]
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	0699      	lsls	r1, r3, #26
 800e4b6:	bf42      	ittt	mi
 800e4b8:	6833      	ldrmi	r3, [r6, #0]
 800e4ba:	3302      	addmi	r3, #2
 800e4bc:	6033      	strmi	r3, [r6, #0]
 800e4be:	6825      	ldr	r5, [r4, #0]
 800e4c0:	f015 0506 	ands.w	r5, r5, #6
 800e4c4:	d106      	bne.n	800e4d4 <_printf_common+0x48>
 800e4c6:	f104 0a19 	add.w	sl, r4, #25
 800e4ca:	68e3      	ldr	r3, [r4, #12]
 800e4cc:	6832      	ldr	r2, [r6, #0]
 800e4ce:	1a9b      	subs	r3, r3, r2
 800e4d0:	42ab      	cmp	r3, r5
 800e4d2:	dc2b      	bgt.n	800e52c <_printf_common+0xa0>
 800e4d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4d8:	1e13      	subs	r3, r2, #0
 800e4da:	6822      	ldr	r2, [r4, #0]
 800e4dc:	bf18      	it	ne
 800e4de:	2301      	movne	r3, #1
 800e4e0:	0692      	lsls	r2, r2, #26
 800e4e2:	d430      	bmi.n	800e546 <_printf_common+0xba>
 800e4e4:	4649      	mov	r1, r9
 800e4e6:	4638      	mov	r0, r7
 800e4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4ec:	47c0      	blx	r8
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	d023      	beq.n	800e53a <_printf_common+0xae>
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	6922      	ldr	r2, [r4, #16]
 800e4f6:	f003 0306 	and.w	r3, r3, #6
 800e4fa:	2b04      	cmp	r3, #4
 800e4fc:	bf14      	ite	ne
 800e4fe:	2500      	movne	r5, #0
 800e500:	6833      	ldreq	r3, [r6, #0]
 800e502:	f04f 0600 	mov.w	r6, #0
 800e506:	bf08      	it	eq
 800e508:	68e5      	ldreq	r5, [r4, #12]
 800e50a:	f104 041a 	add.w	r4, r4, #26
 800e50e:	bf08      	it	eq
 800e510:	1aed      	subeq	r5, r5, r3
 800e512:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e516:	bf08      	it	eq
 800e518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e51c:	4293      	cmp	r3, r2
 800e51e:	bfc4      	itt	gt
 800e520:	1a9b      	subgt	r3, r3, r2
 800e522:	18ed      	addgt	r5, r5, r3
 800e524:	42b5      	cmp	r5, r6
 800e526:	d11a      	bne.n	800e55e <_printf_common+0xd2>
 800e528:	2000      	movs	r0, #0
 800e52a:	e008      	b.n	800e53e <_printf_common+0xb2>
 800e52c:	2301      	movs	r3, #1
 800e52e:	4652      	mov	r2, sl
 800e530:	4649      	mov	r1, r9
 800e532:	4638      	mov	r0, r7
 800e534:	47c0      	blx	r8
 800e536:	3001      	adds	r0, #1
 800e538:	d103      	bne.n	800e542 <_printf_common+0xb6>
 800e53a:	f04f 30ff 	mov.w	r0, #4294967295
 800e53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e542:	3501      	adds	r5, #1
 800e544:	e7c1      	b.n	800e4ca <_printf_common+0x3e>
 800e546:	2030      	movs	r0, #48	; 0x30
 800e548:	18e1      	adds	r1, r4, r3
 800e54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e54e:	1c5a      	adds	r2, r3, #1
 800e550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e554:	4422      	add	r2, r4
 800e556:	3302      	adds	r3, #2
 800e558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e55c:	e7c2      	b.n	800e4e4 <_printf_common+0x58>
 800e55e:	2301      	movs	r3, #1
 800e560:	4622      	mov	r2, r4
 800e562:	4649      	mov	r1, r9
 800e564:	4638      	mov	r0, r7
 800e566:	47c0      	blx	r8
 800e568:	3001      	adds	r0, #1
 800e56a:	d0e6      	beq.n	800e53a <_printf_common+0xae>
 800e56c:	3601      	adds	r6, #1
 800e56e:	e7d9      	b.n	800e524 <_printf_common+0x98>

0800e570 <_printf_i>:
 800e570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e574:	7e0f      	ldrb	r7, [r1, #24]
 800e576:	4691      	mov	r9, r2
 800e578:	2f78      	cmp	r7, #120	; 0x78
 800e57a:	4680      	mov	r8, r0
 800e57c:	460c      	mov	r4, r1
 800e57e:	469a      	mov	sl, r3
 800e580:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e586:	d807      	bhi.n	800e598 <_printf_i+0x28>
 800e588:	2f62      	cmp	r7, #98	; 0x62
 800e58a:	d80a      	bhi.n	800e5a2 <_printf_i+0x32>
 800e58c:	2f00      	cmp	r7, #0
 800e58e:	f000 80d5 	beq.w	800e73c <_printf_i+0x1cc>
 800e592:	2f58      	cmp	r7, #88	; 0x58
 800e594:	f000 80c1 	beq.w	800e71a <_printf_i+0x1aa>
 800e598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5a0:	e03a      	b.n	800e618 <_printf_i+0xa8>
 800e5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5a6:	2b15      	cmp	r3, #21
 800e5a8:	d8f6      	bhi.n	800e598 <_printf_i+0x28>
 800e5aa:	a101      	add	r1, pc, #4	; (adr r1, 800e5b0 <_printf_i+0x40>)
 800e5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5b0:	0800e609 	.word	0x0800e609
 800e5b4:	0800e61d 	.word	0x0800e61d
 800e5b8:	0800e599 	.word	0x0800e599
 800e5bc:	0800e599 	.word	0x0800e599
 800e5c0:	0800e599 	.word	0x0800e599
 800e5c4:	0800e599 	.word	0x0800e599
 800e5c8:	0800e61d 	.word	0x0800e61d
 800e5cc:	0800e599 	.word	0x0800e599
 800e5d0:	0800e599 	.word	0x0800e599
 800e5d4:	0800e599 	.word	0x0800e599
 800e5d8:	0800e599 	.word	0x0800e599
 800e5dc:	0800e723 	.word	0x0800e723
 800e5e0:	0800e649 	.word	0x0800e649
 800e5e4:	0800e6dd 	.word	0x0800e6dd
 800e5e8:	0800e599 	.word	0x0800e599
 800e5ec:	0800e599 	.word	0x0800e599
 800e5f0:	0800e745 	.word	0x0800e745
 800e5f4:	0800e599 	.word	0x0800e599
 800e5f8:	0800e649 	.word	0x0800e649
 800e5fc:	0800e599 	.word	0x0800e599
 800e600:	0800e599 	.word	0x0800e599
 800e604:	0800e6e5 	.word	0x0800e6e5
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	1d1a      	adds	r2, r3, #4
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	602a      	str	r2, [r5, #0]
 800e610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e618:	2301      	movs	r3, #1
 800e61a:	e0a0      	b.n	800e75e <_printf_i+0x1ee>
 800e61c:	6820      	ldr	r0, [r4, #0]
 800e61e:	682b      	ldr	r3, [r5, #0]
 800e620:	0607      	lsls	r7, r0, #24
 800e622:	f103 0104 	add.w	r1, r3, #4
 800e626:	6029      	str	r1, [r5, #0]
 800e628:	d501      	bpl.n	800e62e <_printf_i+0xbe>
 800e62a:	681e      	ldr	r6, [r3, #0]
 800e62c:	e003      	b.n	800e636 <_printf_i+0xc6>
 800e62e:	0646      	lsls	r6, r0, #25
 800e630:	d5fb      	bpl.n	800e62a <_printf_i+0xba>
 800e632:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e636:	2e00      	cmp	r6, #0
 800e638:	da03      	bge.n	800e642 <_printf_i+0xd2>
 800e63a:	232d      	movs	r3, #45	; 0x2d
 800e63c:	4276      	negs	r6, r6
 800e63e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e642:	230a      	movs	r3, #10
 800e644:	4859      	ldr	r0, [pc, #356]	; (800e7ac <_printf_i+0x23c>)
 800e646:	e012      	b.n	800e66e <_printf_i+0xfe>
 800e648:	682b      	ldr	r3, [r5, #0]
 800e64a:	6820      	ldr	r0, [r4, #0]
 800e64c:	1d19      	adds	r1, r3, #4
 800e64e:	6029      	str	r1, [r5, #0]
 800e650:	0605      	lsls	r5, r0, #24
 800e652:	d501      	bpl.n	800e658 <_printf_i+0xe8>
 800e654:	681e      	ldr	r6, [r3, #0]
 800e656:	e002      	b.n	800e65e <_printf_i+0xee>
 800e658:	0641      	lsls	r1, r0, #25
 800e65a:	d5fb      	bpl.n	800e654 <_printf_i+0xe4>
 800e65c:	881e      	ldrh	r6, [r3, #0]
 800e65e:	2f6f      	cmp	r7, #111	; 0x6f
 800e660:	bf0c      	ite	eq
 800e662:	2308      	moveq	r3, #8
 800e664:	230a      	movne	r3, #10
 800e666:	4851      	ldr	r0, [pc, #324]	; (800e7ac <_printf_i+0x23c>)
 800e668:	2100      	movs	r1, #0
 800e66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e66e:	6865      	ldr	r5, [r4, #4]
 800e670:	2d00      	cmp	r5, #0
 800e672:	bfa8      	it	ge
 800e674:	6821      	ldrge	r1, [r4, #0]
 800e676:	60a5      	str	r5, [r4, #8]
 800e678:	bfa4      	itt	ge
 800e67a:	f021 0104 	bicge.w	r1, r1, #4
 800e67e:	6021      	strge	r1, [r4, #0]
 800e680:	b90e      	cbnz	r6, 800e686 <_printf_i+0x116>
 800e682:	2d00      	cmp	r5, #0
 800e684:	d04b      	beq.n	800e71e <_printf_i+0x1ae>
 800e686:	4615      	mov	r5, r2
 800e688:	fbb6 f1f3 	udiv	r1, r6, r3
 800e68c:	fb03 6711 	mls	r7, r3, r1, r6
 800e690:	5dc7      	ldrb	r7, [r0, r7]
 800e692:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e696:	4637      	mov	r7, r6
 800e698:	42bb      	cmp	r3, r7
 800e69a:	460e      	mov	r6, r1
 800e69c:	d9f4      	bls.n	800e688 <_printf_i+0x118>
 800e69e:	2b08      	cmp	r3, #8
 800e6a0:	d10b      	bne.n	800e6ba <_printf_i+0x14a>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	07de      	lsls	r6, r3, #31
 800e6a6:	d508      	bpl.n	800e6ba <_printf_i+0x14a>
 800e6a8:	6923      	ldr	r3, [r4, #16]
 800e6aa:	6861      	ldr	r1, [r4, #4]
 800e6ac:	4299      	cmp	r1, r3
 800e6ae:	bfde      	ittt	le
 800e6b0:	2330      	movle	r3, #48	; 0x30
 800e6b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6ba:	1b52      	subs	r2, r2, r5
 800e6bc:	6122      	str	r2, [r4, #16]
 800e6be:	464b      	mov	r3, r9
 800e6c0:	4621      	mov	r1, r4
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	f8cd a000 	str.w	sl, [sp]
 800e6c8:	aa03      	add	r2, sp, #12
 800e6ca:	f7ff fedf 	bl	800e48c <_printf_common>
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	d14a      	bne.n	800e768 <_printf_i+0x1f8>
 800e6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d6:	b004      	add	sp, #16
 800e6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6dc:	6823      	ldr	r3, [r4, #0]
 800e6de:	f043 0320 	orr.w	r3, r3, #32
 800e6e2:	6023      	str	r3, [r4, #0]
 800e6e4:	2778      	movs	r7, #120	; 0x78
 800e6e6:	4832      	ldr	r0, [pc, #200]	; (800e7b0 <_printf_i+0x240>)
 800e6e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e6ec:	6823      	ldr	r3, [r4, #0]
 800e6ee:	6829      	ldr	r1, [r5, #0]
 800e6f0:	061f      	lsls	r7, r3, #24
 800e6f2:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6f6:	d402      	bmi.n	800e6fe <_printf_i+0x18e>
 800e6f8:	065f      	lsls	r7, r3, #25
 800e6fa:	bf48      	it	mi
 800e6fc:	b2b6      	uxthmi	r6, r6
 800e6fe:	07df      	lsls	r7, r3, #31
 800e700:	bf48      	it	mi
 800e702:	f043 0320 	orrmi.w	r3, r3, #32
 800e706:	6029      	str	r1, [r5, #0]
 800e708:	bf48      	it	mi
 800e70a:	6023      	strmi	r3, [r4, #0]
 800e70c:	b91e      	cbnz	r6, 800e716 <_printf_i+0x1a6>
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	f023 0320 	bic.w	r3, r3, #32
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	2310      	movs	r3, #16
 800e718:	e7a6      	b.n	800e668 <_printf_i+0xf8>
 800e71a:	4824      	ldr	r0, [pc, #144]	; (800e7ac <_printf_i+0x23c>)
 800e71c:	e7e4      	b.n	800e6e8 <_printf_i+0x178>
 800e71e:	4615      	mov	r5, r2
 800e720:	e7bd      	b.n	800e69e <_printf_i+0x12e>
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	6826      	ldr	r6, [r4, #0]
 800e726:	1d18      	adds	r0, r3, #4
 800e728:	6961      	ldr	r1, [r4, #20]
 800e72a:	6028      	str	r0, [r5, #0]
 800e72c:	0635      	lsls	r5, r6, #24
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	d501      	bpl.n	800e736 <_printf_i+0x1c6>
 800e732:	6019      	str	r1, [r3, #0]
 800e734:	e002      	b.n	800e73c <_printf_i+0x1cc>
 800e736:	0670      	lsls	r0, r6, #25
 800e738:	d5fb      	bpl.n	800e732 <_printf_i+0x1c2>
 800e73a:	8019      	strh	r1, [r3, #0]
 800e73c:	2300      	movs	r3, #0
 800e73e:	4615      	mov	r5, r2
 800e740:	6123      	str	r3, [r4, #16]
 800e742:	e7bc      	b.n	800e6be <_printf_i+0x14e>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	2100      	movs	r1, #0
 800e748:	1d1a      	adds	r2, r3, #4
 800e74a:	602a      	str	r2, [r5, #0]
 800e74c:	681d      	ldr	r5, [r3, #0]
 800e74e:	6862      	ldr	r2, [r4, #4]
 800e750:	4628      	mov	r0, r5
 800e752:	f000 f9dd 	bl	800eb10 <memchr>
 800e756:	b108      	cbz	r0, 800e75c <_printf_i+0x1ec>
 800e758:	1b40      	subs	r0, r0, r5
 800e75a:	6060      	str	r0, [r4, #4]
 800e75c:	6863      	ldr	r3, [r4, #4]
 800e75e:	6123      	str	r3, [r4, #16]
 800e760:	2300      	movs	r3, #0
 800e762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e766:	e7aa      	b.n	800e6be <_printf_i+0x14e>
 800e768:	462a      	mov	r2, r5
 800e76a:	4649      	mov	r1, r9
 800e76c:	4640      	mov	r0, r8
 800e76e:	6923      	ldr	r3, [r4, #16]
 800e770:	47d0      	blx	sl
 800e772:	3001      	adds	r0, #1
 800e774:	d0ad      	beq.n	800e6d2 <_printf_i+0x162>
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	079b      	lsls	r3, r3, #30
 800e77a:	d413      	bmi.n	800e7a4 <_printf_i+0x234>
 800e77c:	68e0      	ldr	r0, [r4, #12]
 800e77e:	9b03      	ldr	r3, [sp, #12]
 800e780:	4298      	cmp	r0, r3
 800e782:	bfb8      	it	lt
 800e784:	4618      	movlt	r0, r3
 800e786:	e7a6      	b.n	800e6d6 <_printf_i+0x166>
 800e788:	2301      	movs	r3, #1
 800e78a:	4632      	mov	r2, r6
 800e78c:	4649      	mov	r1, r9
 800e78e:	4640      	mov	r0, r8
 800e790:	47d0      	blx	sl
 800e792:	3001      	adds	r0, #1
 800e794:	d09d      	beq.n	800e6d2 <_printf_i+0x162>
 800e796:	3501      	adds	r5, #1
 800e798:	68e3      	ldr	r3, [r4, #12]
 800e79a:	9903      	ldr	r1, [sp, #12]
 800e79c:	1a5b      	subs	r3, r3, r1
 800e79e:	42ab      	cmp	r3, r5
 800e7a0:	dcf2      	bgt.n	800e788 <_printf_i+0x218>
 800e7a2:	e7eb      	b.n	800e77c <_printf_i+0x20c>
 800e7a4:	2500      	movs	r5, #0
 800e7a6:	f104 0619 	add.w	r6, r4, #25
 800e7aa:	e7f5      	b.n	800e798 <_printf_i+0x228>
 800e7ac:	0800f330 	.word	0x0800f330
 800e7b0:	0800f341 	.word	0x0800f341

0800e7b4 <__sflush_r>:
 800e7b4:	898a      	ldrh	r2, [r1, #12]
 800e7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	0710      	lsls	r0, r2, #28
 800e7bc:	460c      	mov	r4, r1
 800e7be:	d457      	bmi.n	800e870 <__sflush_r+0xbc>
 800e7c0:	684b      	ldr	r3, [r1, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	dc04      	bgt.n	800e7d0 <__sflush_r+0x1c>
 800e7c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	dc01      	bgt.n	800e7d0 <__sflush_r+0x1c>
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7d2:	2e00      	cmp	r6, #0
 800e7d4:	d0fa      	beq.n	800e7cc <__sflush_r+0x18>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7dc:	682f      	ldr	r7, [r5, #0]
 800e7de:	6a21      	ldr	r1, [r4, #32]
 800e7e0:	602b      	str	r3, [r5, #0]
 800e7e2:	d032      	beq.n	800e84a <__sflush_r+0x96>
 800e7e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7e6:	89a3      	ldrh	r3, [r4, #12]
 800e7e8:	075a      	lsls	r2, r3, #29
 800e7ea:	d505      	bpl.n	800e7f8 <__sflush_r+0x44>
 800e7ec:	6863      	ldr	r3, [r4, #4]
 800e7ee:	1ac0      	subs	r0, r0, r3
 800e7f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7f2:	b10b      	cbz	r3, 800e7f8 <__sflush_r+0x44>
 800e7f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7f6:	1ac0      	subs	r0, r0, r3
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7fe:	4628      	mov	r0, r5
 800e800:	6a21      	ldr	r1, [r4, #32]
 800e802:	47b0      	blx	r6
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	89a3      	ldrh	r3, [r4, #12]
 800e808:	d106      	bne.n	800e818 <__sflush_r+0x64>
 800e80a:	6829      	ldr	r1, [r5, #0]
 800e80c:	291d      	cmp	r1, #29
 800e80e:	d82b      	bhi.n	800e868 <__sflush_r+0xb4>
 800e810:	4a28      	ldr	r2, [pc, #160]	; (800e8b4 <__sflush_r+0x100>)
 800e812:	410a      	asrs	r2, r1
 800e814:	07d6      	lsls	r6, r2, #31
 800e816:	d427      	bmi.n	800e868 <__sflush_r+0xb4>
 800e818:	2200      	movs	r2, #0
 800e81a:	6062      	str	r2, [r4, #4]
 800e81c:	6922      	ldr	r2, [r4, #16]
 800e81e:	04d9      	lsls	r1, r3, #19
 800e820:	6022      	str	r2, [r4, #0]
 800e822:	d504      	bpl.n	800e82e <__sflush_r+0x7a>
 800e824:	1c42      	adds	r2, r0, #1
 800e826:	d101      	bne.n	800e82c <__sflush_r+0x78>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	b903      	cbnz	r3, 800e82e <__sflush_r+0x7a>
 800e82c:	6560      	str	r0, [r4, #84]	; 0x54
 800e82e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e830:	602f      	str	r7, [r5, #0]
 800e832:	2900      	cmp	r1, #0
 800e834:	d0ca      	beq.n	800e7cc <__sflush_r+0x18>
 800e836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e83a:	4299      	cmp	r1, r3
 800e83c:	d002      	beq.n	800e844 <__sflush_r+0x90>
 800e83e:	4628      	mov	r0, r5
 800e840:	f7ff fa8e 	bl	800dd60 <_free_r>
 800e844:	2000      	movs	r0, #0
 800e846:	6360      	str	r0, [r4, #52]	; 0x34
 800e848:	e7c1      	b.n	800e7ce <__sflush_r+0x1a>
 800e84a:	2301      	movs	r3, #1
 800e84c:	4628      	mov	r0, r5
 800e84e:	47b0      	blx	r6
 800e850:	1c41      	adds	r1, r0, #1
 800e852:	d1c8      	bne.n	800e7e6 <__sflush_r+0x32>
 800e854:	682b      	ldr	r3, [r5, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0c5      	beq.n	800e7e6 <__sflush_r+0x32>
 800e85a:	2b1d      	cmp	r3, #29
 800e85c:	d001      	beq.n	800e862 <__sflush_r+0xae>
 800e85e:	2b16      	cmp	r3, #22
 800e860:	d101      	bne.n	800e866 <__sflush_r+0xb2>
 800e862:	602f      	str	r7, [r5, #0]
 800e864:	e7b2      	b.n	800e7cc <__sflush_r+0x18>
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e86c:	81a3      	strh	r3, [r4, #12]
 800e86e:	e7ae      	b.n	800e7ce <__sflush_r+0x1a>
 800e870:	690f      	ldr	r7, [r1, #16]
 800e872:	2f00      	cmp	r7, #0
 800e874:	d0aa      	beq.n	800e7cc <__sflush_r+0x18>
 800e876:	0793      	lsls	r3, r2, #30
 800e878:	bf18      	it	ne
 800e87a:	2300      	movne	r3, #0
 800e87c:	680e      	ldr	r6, [r1, #0]
 800e87e:	bf08      	it	eq
 800e880:	694b      	ldreq	r3, [r1, #20]
 800e882:	1bf6      	subs	r6, r6, r7
 800e884:	600f      	str	r7, [r1, #0]
 800e886:	608b      	str	r3, [r1, #8]
 800e888:	2e00      	cmp	r6, #0
 800e88a:	dd9f      	ble.n	800e7cc <__sflush_r+0x18>
 800e88c:	4633      	mov	r3, r6
 800e88e:	463a      	mov	r2, r7
 800e890:	4628      	mov	r0, r5
 800e892:	6a21      	ldr	r1, [r4, #32]
 800e894:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e898:	47e0      	blx	ip
 800e89a:	2800      	cmp	r0, #0
 800e89c:	dc06      	bgt.n	800e8ac <__sflush_r+0xf8>
 800e89e:	89a3      	ldrh	r3, [r4, #12]
 800e8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a8:	81a3      	strh	r3, [r4, #12]
 800e8aa:	e790      	b.n	800e7ce <__sflush_r+0x1a>
 800e8ac:	4407      	add	r7, r0
 800e8ae:	1a36      	subs	r6, r6, r0
 800e8b0:	e7ea      	b.n	800e888 <__sflush_r+0xd4>
 800e8b2:	bf00      	nop
 800e8b4:	dfbffffe 	.word	0xdfbffffe

0800e8b8 <_fflush_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	690b      	ldr	r3, [r1, #16]
 800e8bc:	4605      	mov	r5, r0
 800e8be:	460c      	mov	r4, r1
 800e8c0:	b913      	cbnz	r3, 800e8c8 <_fflush_r+0x10>
 800e8c2:	2500      	movs	r5, #0
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	bd38      	pop	{r3, r4, r5, pc}
 800e8c8:	b118      	cbz	r0, 800e8d2 <_fflush_r+0x1a>
 800e8ca:	6a03      	ldr	r3, [r0, #32]
 800e8cc:	b90b      	cbnz	r3, 800e8d2 <_fflush_r+0x1a>
 800e8ce:	f7ff f803 	bl	800d8d8 <__sinit>
 800e8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0f3      	beq.n	800e8c2 <_fflush_r+0xa>
 800e8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8dc:	07d0      	lsls	r0, r2, #31
 800e8de:	d404      	bmi.n	800e8ea <_fflush_r+0x32>
 800e8e0:	0599      	lsls	r1, r3, #22
 800e8e2:	d402      	bmi.n	800e8ea <_fflush_r+0x32>
 800e8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8e6:	f7ff fa1b 	bl	800dd20 <__retarget_lock_acquire_recursive>
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	f7ff ff61 	bl	800e7b4 <__sflush_r>
 800e8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	07da      	lsls	r2, r3, #31
 800e8f8:	d4e4      	bmi.n	800e8c4 <_fflush_r+0xc>
 800e8fa:	89a3      	ldrh	r3, [r4, #12]
 800e8fc:	059b      	lsls	r3, r3, #22
 800e8fe:	d4e1      	bmi.n	800e8c4 <_fflush_r+0xc>
 800e900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e902:	f7ff fa0e 	bl	800dd22 <__retarget_lock_release_recursive>
 800e906:	e7dd      	b.n	800e8c4 <_fflush_r+0xc>

0800e908 <__swbuf_r>:
 800e908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90a:	460e      	mov	r6, r1
 800e90c:	4614      	mov	r4, r2
 800e90e:	4605      	mov	r5, r0
 800e910:	b118      	cbz	r0, 800e91a <__swbuf_r+0x12>
 800e912:	6a03      	ldr	r3, [r0, #32]
 800e914:	b90b      	cbnz	r3, 800e91a <__swbuf_r+0x12>
 800e916:	f7fe ffdf 	bl	800d8d8 <__sinit>
 800e91a:	69a3      	ldr	r3, [r4, #24]
 800e91c:	60a3      	str	r3, [r4, #8]
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	071a      	lsls	r2, r3, #28
 800e922:	d525      	bpl.n	800e970 <__swbuf_r+0x68>
 800e924:	6923      	ldr	r3, [r4, #16]
 800e926:	b31b      	cbz	r3, 800e970 <__swbuf_r+0x68>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	6922      	ldr	r2, [r4, #16]
 800e92c:	b2f6      	uxtb	r6, r6
 800e92e:	1a98      	subs	r0, r3, r2
 800e930:	6963      	ldr	r3, [r4, #20]
 800e932:	4637      	mov	r7, r6
 800e934:	4283      	cmp	r3, r0
 800e936:	dc04      	bgt.n	800e942 <__swbuf_r+0x3a>
 800e938:	4621      	mov	r1, r4
 800e93a:	4628      	mov	r0, r5
 800e93c:	f7ff ffbc 	bl	800e8b8 <_fflush_r>
 800e940:	b9e0      	cbnz	r0, 800e97c <__swbuf_r+0x74>
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	3b01      	subs	r3, #1
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	1c5a      	adds	r2, r3, #1
 800e94c:	6022      	str	r2, [r4, #0]
 800e94e:	701e      	strb	r6, [r3, #0]
 800e950:	6962      	ldr	r2, [r4, #20]
 800e952:	1c43      	adds	r3, r0, #1
 800e954:	429a      	cmp	r2, r3
 800e956:	d004      	beq.n	800e962 <__swbuf_r+0x5a>
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	07db      	lsls	r3, r3, #31
 800e95c:	d506      	bpl.n	800e96c <__swbuf_r+0x64>
 800e95e:	2e0a      	cmp	r6, #10
 800e960:	d104      	bne.n	800e96c <__swbuf_r+0x64>
 800e962:	4621      	mov	r1, r4
 800e964:	4628      	mov	r0, r5
 800e966:	f7ff ffa7 	bl	800e8b8 <_fflush_r>
 800e96a:	b938      	cbnz	r0, 800e97c <__swbuf_r+0x74>
 800e96c:	4638      	mov	r0, r7
 800e96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e970:	4621      	mov	r1, r4
 800e972:	4628      	mov	r0, r5
 800e974:	f000 f806 	bl	800e984 <__swsetup_r>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0d5      	beq.n	800e928 <__swbuf_r+0x20>
 800e97c:	f04f 37ff 	mov.w	r7, #4294967295
 800e980:	e7f4      	b.n	800e96c <__swbuf_r+0x64>
	...

0800e984 <__swsetup_r>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	4b2a      	ldr	r3, [pc, #168]	; (800ea30 <__swsetup_r+0xac>)
 800e988:	4605      	mov	r5, r0
 800e98a:	6818      	ldr	r0, [r3, #0]
 800e98c:	460c      	mov	r4, r1
 800e98e:	b118      	cbz	r0, 800e998 <__swsetup_r+0x14>
 800e990:	6a03      	ldr	r3, [r0, #32]
 800e992:	b90b      	cbnz	r3, 800e998 <__swsetup_r+0x14>
 800e994:	f7fe ffa0 	bl	800d8d8 <__sinit>
 800e998:	89a3      	ldrh	r3, [r4, #12]
 800e99a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e99e:	0718      	lsls	r0, r3, #28
 800e9a0:	d422      	bmi.n	800e9e8 <__swsetup_r+0x64>
 800e9a2:	06d9      	lsls	r1, r3, #27
 800e9a4:	d407      	bmi.n	800e9b6 <__swsetup_r+0x32>
 800e9a6:	2309      	movs	r3, #9
 800e9a8:	602b      	str	r3, [r5, #0]
 800e9aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	e034      	b.n	800ea20 <__swsetup_r+0x9c>
 800e9b6:	0758      	lsls	r0, r3, #29
 800e9b8:	d512      	bpl.n	800e9e0 <__swsetup_r+0x5c>
 800e9ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9bc:	b141      	cbz	r1, 800e9d0 <__swsetup_r+0x4c>
 800e9be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9c2:	4299      	cmp	r1, r3
 800e9c4:	d002      	beq.n	800e9cc <__swsetup_r+0x48>
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f7ff f9ca 	bl	800dd60 <_free_r>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	6363      	str	r3, [r4, #52]	; 0x34
 800e9d0:	89a3      	ldrh	r3, [r4, #12]
 800e9d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9d6:	81a3      	strh	r3, [r4, #12]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	6063      	str	r3, [r4, #4]
 800e9dc:	6923      	ldr	r3, [r4, #16]
 800e9de:	6023      	str	r3, [r4, #0]
 800e9e0:	89a3      	ldrh	r3, [r4, #12]
 800e9e2:	f043 0308 	orr.w	r3, r3, #8
 800e9e6:	81a3      	strh	r3, [r4, #12]
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	b94b      	cbnz	r3, 800ea00 <__swsetup_r+0x7c>
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9f6:	d003      	beq.n	800ea00 <__swsetup_r+0x7c>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	4628      	mov	r0, r5
 800e9fc:	f000 f8ea 	bl	800ebd4 <__smakebuf_r>
 800ea00:	89a0      	ldrh	r0, [r4, #12]
 800ea02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea06:	f010 0301 	ands.w	r3, r0, #1
 800ea0a:	d00a      	beq.n	800ea22 <__swsetup_r+0x9e>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60a3      	str	r3, [r4, #8]
 800ea10:	6963      	ldr	r3, [r4, #20]
 800ea12:	425b      	negs	r3, r3
 800ea14:	61a3      	str	r3, [r4, #24]
 800ea16:	6923      	ldr	r3, [r4, #16]
 800ea18:	b943      	cbnz	r3, 800ea2c <__swsetup_r+0xa8>
 800ea1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea1e:	d1c4      	bne.n	800e9aa <__swsetup_r+0x26>
 800ea20:	bd38      	pop	{r3, r4, r5, pc}
 800ea22:	0781      	lsls	r1, r0, #30
 800ea24:	bf58      	it	pl
 800ea26:	6963      	ldrpl	r3, [r4, #20]
 800ea28:	60a3      	str	r3, [r4, #8]
 800ea2a:	e7f4      	b.n	800ea16 <__swsetup_r+0x92>
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	e7f7      	b.n	800ea20 <__swsetup_r+0x9c>
 800ea30:	200000ac 	.word	0x200000ac

0800ea34 <memmove>:
 800ea34:	4288      	cmp	r0, r1
 800ea36:	b510      	push	{r4, lr}
 800ea38:	eb01 0402 	add.w	r4, r1, r2
 800ea3c:	d902      	bls.n	800ea44 <memmove+0x10>
 800ea3e:	4284      	cmp	r4, r0
 800ea40:	4623      	mov	r3, r4
 800ea42:	d807      	bhi.n	800ea54 <memmove+0x20>
 800ea44:	1e43      	subs	r3, r0, #1
 800ea46:	42a1      	cmp	r1, r4
 800ea48:	d008      	beq.n	800ea5c <memmove+0x28>
 800ea4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea52:	e7f8      	b.n	800ea46 <memmove+0x12>
 800ea54:	4601      	mov	r1, r0
 800ea56:	4402      	add	r2, r0
 800ea58:	428a      	cmp	r2, r1
 800ea5a:	d100      	bne.n	800ea5e <memmove+0x2a>
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea66:	e7f7      	b.n	800ea58 <memmove+0x24>

0800ea68 <_raise_r>:
 800ea68:	291f      	cmp	r1, #31
 800ea6a:	b538      	push	{r3, r4, r5, lr}
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	460d      	mov	r5, r1
 800ea70:	d904      	bls.n	800ea7c <_raise_r+0x14>
 800ea72:	2316      	movs	r3, #22
 800ea74:	6003      	str	r3, [r0, #0]
 800ea76:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7a:	bd38      	pop	{r3, r4, r5, pc}
 800ea7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ea7e:	b112      	cbz	r2, 800ea86 <_raise_r+0x1e>
 800ea80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea84:	b94b      	cbnz	r3, 800ea9a <_raise_r+0x32>
 800ea86:	4620      	mov	r0, r4
 800ea88:	f000 f830 	bl	800eaec <_getpid_r>
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	4601      	mov	r1, r0
 800ea90:	4620      	mov	r0, r4
 800ea92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea96:	f000 b817 	b.w	800eac8 <_kill_r>
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d00a      	beq.n	800eab4 <_raise_r+0x4c>
 800ea9e:	1c59      	adds	r1, r3, #1
 800eaa0:	d103      	bne.n	800eaaa <_raise_r+0x42>
 800eaa2:	2316      	movs	r3, #22
 800eaa4:	6003      	str	r3, [r0, #0]
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	e7e7      	b.n	800ea7a <_raise_r+0x12>
 800eaaa:	2400      	movs	r4, #0
 800eaac:	4628      	mov	r0, r5
 800eaae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eab2:	4798      	blx	r3
 800eab4:	2000      	movs	r0, #0
 800eab6:	e7e0      	b.n	800ea7a <_raise_r+0x12>

0800eab8 <raise>:
 800eab8:	4b02      	ldr	r3, [pc, #8]	; (800eac4 <raise+0xc>)
 800eaba:	4601      	mov	r1, r0
 800eabc:	6818      	ldr	r0, [r3, #0]
 800eabe:	f7ff bfd3 	b.w	800ea68 <_raise_r>
 800eac2:	bf00      	nop
 800eac4:	200000ac 	.word	0x200000ac

0800eac8 <_kill_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	2300      	movs	r3, #0
 800eacc:	4d06      	ldr	r5, [pc, #24]	; (800eae8 <_kill_r+0x20>)
 800eace:	4604      	mov	r4, r0
 800ead0:	4608      	mov	r0, r1
 800ead2:	4611      	mov	r1, r2
 800ead4:	602b      	str	r3, [r5, #0]
 800ead6:	f7f2 fba2 	bl	800121e <_kill>
 800eada:	1c43      	adds	r3, r0, #1
 800eadc:	d102      	bne.n	800eae4 <_kill_r+0x1c>
 800eade:	682b      	ldr	r3, [r5, #0]
 800eae0:	b103      	cbz	r3, 800eae4 <_kill_r+0x1c>
 800eae2:	6023      	str	r3, [r4, #0]
 800eae4:	bd38      	pop	{r3, r4, r5, pc}
 800eae6:	bf00      	nop
 800eae8:	200037e4 	.word	0x200037e4

0800eaec <_getpid_r>:
 800eaec:	f7f2 bb90 	b.w	8001210 <_getpid>

0800eaf0 <_sbrk_r>:
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	4d05      	ldr	r5, [pc, #20]	; (800eb0c <_sbrk_r+0x1c>)
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	4608      	mov	r0, r1
 800eafa:	602b      	str	r3, [r5, #0]
 800eafc:	f7f2 fc12 	bl	8001324 <_sbrk>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_sbrk_r+0x1a>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_sbrk_r+0x1a>
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	200037e4 	.word	0x200037e4

0800eb10 <memchr>:
 800eb10:	4603      	mov	r3, r0
 800eb12:	b510      	push	{r4, lr}
 800eb14:	b2c9      	uxtb	r1, r1
 800eb16:	4402      	add	r2, r0
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	d101      	bne.n	800eb22 <memchr+0x12>
 800eb1e:	2000      	movs	r0, #0
 800eb20:	e003      	b.n	800eb2a <memchr+0x1a>
 800eb22:	7804      	ldrb	r4, [r0, #0]
 800eb24:	3301      	adds	r3, #1
 800eb26:	428c      	cmp	r4, r1
 800eb28:	d1f6      	bne.n	800eb18 <memchr+0x8>
 800eb2a:	bd10      	pop	{r4, pc}

0800eb2c <_realloc_r>:
 800eb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb30:	4680      	mov	r8, r0
 800eb32:	4614      	mov	r4, r2
 800eb34:	460e      	mov	r6, r1
 800eb36:	b921      	cbnz	r1, 800eb42 <_realloc_r+0x16>
 800eb38:	4611      	mov	r1, r2
 800eb3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3e:	f7ff b97f 	b.w	800de40 <_malloc_r>
 800eb42:	b92a      	cbnz	r2, 800eb50 <_realloc_r+0x24>
 800eb44:	f7ff f90c 	bl	800dd60 <_free_r>
 800eb48:	4625      	mov	r5, r4
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb50:	f000 f89e 	bl	800ec90 <_malloc_usable_size_r>
 800eb54:	4284      	cmp	r4, r0
 800eb56:	4607      	mov	r7, r0
 800eb58:	d802      	bhi.n	800eb60 <_realloc_r+0x34>
 800eb5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb5e:	d812      	bhi.n	800eb86 <_realloc_r+0x5a>
 800eb60:	4621      	mov	r1, r4
 800eb62:	4640      	mov	r0, r8
 800eb64:	f7ff f96c 	bl	800de40 <_malloc_r>
 800eb68:	4605      	mov	r5, r0
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d0ed      	beq.n	800eb4a <_realloc_r+0x1e>
 800eb6e:	42bc      	cmp	r4, r7
 800eb70:	4622      	mov	r2, r4
 800eb72:	4631      	mov	r1, r6
 800eb74:	bf28      	it	cs
 800eb76:	463a      	movcs	r2, r7
 800eb78:	f7ff f8dc 	bl	800dd34 <memcpy>
 800eb7c:	4631      	mov	r1, r6
 800eb7e:	4640      	mov	r0, r8
 800eb80:	f7ff f8ee 	bl	800dd60 <_free_r>
 800eb84:	e7e1      	b.n	800eb4a <_realloc_r+0x1e>
 800eb86:	4635      	mov	r5, r6
 800eb88:	e7df      	b.n	800eb4a <_realloc_r+0x1e>

0800eb8a <__swhatbuf_r>:
 800eb8a:	b570      	push	{r4, r5, r6, lr}
 800eb8c:	460c      	mov	r4, r1
 800eb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb92:	4615      	mov	r5, r2
 800eb94:	2900      	cmp	r1, #0
 800eb96:	461e      	mov	r6, r3
 800eb98:	b096      	sub	sp, #88	; 0x58
 800eb9a:	da0c      	bge.n	800ebb6 <__swhatbuf_r+0x2c>
 800eb9c:	89a3      	ldrh	r3, [r4, #12]
 800eb9e:	2100      	movs	r1, #0
 800eba0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eba4:	bf0c      	ite	eq
 800eba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ebaa:	2340      	movne	r3, #64	; 0x40
 800ebac:	2000      	movs	r0, #0
 800ebae:	6031      	str	r1, [r6, #0]
 800ebb0:	602b      	str	r3, [r5, #0]
 800ebb2:	b016      	add	sp, #88	; 0x58
 800ebb4:	bd70      	pop	{r4, r5, r6, pc}
 800ebb6:	466a      	mov	r2, sp
 800ebb8:	f000 f848 	bl	800ec4c <_fstat_r>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	dbed      	blt.n	800eb9c <__swhatbuf_r+0x12>
 800ebc0:	9901      	ldr	r1, [sp, #4]
 800ebc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ebc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ebca:	4259      	negs	r1, r3
 800ebcc:	4159      	adcs	r1, r3
 800ebce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebd2:	e7eb      	b.n	800ebac <__swhatbuf_r+0x22>

0800ebd4 <__smakebuf_r>:
 800ebd4:	898b      	ldrh	r3, [r1, #12]
 800ebd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebd8:	079d      	lsls	r5, r3, #30
 800ebda:	4606      	mov	r6, r0
 800ebdc:	460c      	mov	r4, r1
 800ebde:	d507      	bpl.n	800ebf0 <__smakebuf_r+0x1c>
 800ebe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	6123      	str	r3, [r4, #16]
 800ebe8:	2301      	movs	r3, #1
 800ebea:	6163      	str	r3, [r4, #20]
 800ebec:	b002      	add	sp, #8
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
 800ebf0:	466a      	mov	r2, sp
 800ebf2:	ab01      	add	r3, sp, #4
 800ebf4:	f7ff ffc9 	bl	800eb8a <__swhatbuf_r>
 800ebf8:	9900      	ldr	r1, [sp, #0]
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f7ff f91f 	bl	800de40 <_malloc_r>
 800ec02:	b948      	cbnz	r0, 800ec18 <__smakebuf_r+0x44>
 800ec04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec08:	059a      	lsls	r2, r3, #22
 800ec0a:	d4ef      	bmi.n	800ebec <__smakebuf_r+0x18>
 800ec0c:	f023 0303 	bic.w	r3, r3, #3
 800ec10:	f043 0302 	orr.w	r3, r3, #2
 800ec14:	81a3      	strh	r3, [r4, #12]
 800ec16:	e7e3      	b.n	800ebe0 <__smakebuf_r+0xc>
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	6020      	str	r0, [r4, #0]
 800ec1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec20:	81a3      	strh	r3, [r4, #12]
 800ec22:	9b00      	ldr	r3, [sp, #0]
 800ec24:	6120      	str	r0, [r4, #16]
 800ec26:	6163      	str	r3, [r4, #20]
 800ec28:	9b01      	ldr	r3, [sp, #4]
 800ec2a:	b15b      	cbz	r3, 800ec44 <__smakebuf_r+0x70>
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec32:	f000 f81d 	bl	800ec70 <_isatty_r>
 800ec36:	b128      	cbz	r0, 800ec44 <__smakebuf_r+0x70>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	f023 0303 	bic.w	r3, r3, #3
 800ec3e:	f043 0301 	orr.w	r3, r3, #1
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	431d      	orrs	r5, r3
 800ec48:	81a5      	strh	r5, [r4, #12]
 800ec4a:	e7cf      	b.n	800ebec <__smakebuf_r+0x18>

0800ec4c <_fstat_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	2300      	movs	r3, #0
 800ec50:	4d06      	ldr	r5, [pc, #24]	; (800ec6c <_fstat_r+0x20>)
 800ec52:	4604      	mov	r4, r0
 800ec54:	4608      	mov	r0, r1
 800ec56:	4611      	mov	r1, r2
 800ec58:	602b      	str	r3, [r5, #0]
 800ec5a:	f7f2 fb3e 	bl	80012da <_fstat>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	d102      	bne.n	800ec68 <_fstat_r+0x1c>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b103      	cbz	r3, 800ec68 <_fstat_r+0x1c>
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	bd38      	pop	{r3, r4, r5, pc}
 800ec6a:	bf00      	nop
 800ec6c:	200037e4 	.word	0x200037e4

0800ec70 <_isatty_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	2300      	movs	r3, #0
 800ec74:	4d05      	ldr	r5, [pc, #20]	; (800ec8c <_isatty_r+0x1c>)
 800ec76:	4604      	mov	r4, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	f7f2 fb3c 	bl	80012f8 <_isatty>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d102      	bne.n	800ec8a <_isatty_r+0x1a>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	b103      	cbz	r3, 800ec8a <_isatty_r+0x1a>
 800ec88:	6023      	str	r3, [r4, #0]
 800ec8a:	bd38      	pop	{r3, r4, r5, pc}
 800ec8c:	200037e4 	.word	0x200037e4

0800ec90 <_malloc_usable_size_r>:
 800ec90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec94:	1f18      	subs	r0, r3, #4
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bfbc      	itt	lt
 800ec9a:	580b      	ldrlt	r3, [r1, r0]
 800ec9c:	18c0      	addlt	r0, r0, r3
 800ec9e:	4770      	bx	lr

0800eca0 <_init>:
 800eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca2:	bf00      	nop
 800eca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca6:	bc08      	pop	{r3}
 800eca8:	469e      	mov	lr, r3
 800ecaa:	4770      	bx	lr

0800ecac <_fini>:
 800ecac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecae:	bf00      	nop
 800ecb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecb2:	bc08      	pop	{r3}
 800ecb4:	469e      	mov	lr, r3
 800ecb6:	4770      	bx	lr
